{"version":3,"file":"index.esm.min.js","sources":["../src/esm/DildoMaterials.js"],"sourcesContent":["/**\n * A collection of materials and material making functions.\n *\n * @require THREE\n *\n * @author Ikaros Kappler\n * @date 2021-07-02\n * @modified 2021-08-04 Ported to Typescript from vanilla JS.\n * @version 1.0.1\n */\nimport * as THREE from 'three';\nexport const DildoMaterials = (() => {\n    /**\n     * Map<string,texture>\n     */\n    var textureStore = new Map();\n    const DildoMaterials = {\n        /**\n         * Create a new mesh material from the given parameters.\n         *\n         * @param {boolean} useTextureImage - Load and use the given texture (at `textureImagePath`) if set to true.\n         * @param {boolean} wireframe - Create a wireframe material if true.\n         * @param {string} textureImagePath - The texture path to use (if useTextureImage is set to true).\n         * @param {THREE.DoubleSide|THREE.FrontSide|THREE.Backside} doubleSingleSide - Wether to display one one or both face sides.\n         * @returns\n         */\n        createMainMaterial: function (useTextureImage, wireframe, textureImagePath, doubleSingleSide) {\n            return useTextureImage\n                ? new THREE.MeshLambertMaterial({\n                    color: 0xffffff,\n                    wireframe: wireframe,\n                    //   flatShading: false,\n                    depthTest: true,\n                    opacity: 1.0,\n                    // side: THREE.DoubleSide,\n                    side: doubleSingleSide,\n                    visible: true,\n                    emissive: 0x0,\n                    reflectivity: 1.0,\n                    refractionRatio: 0.89,\n                    map: loadTextureImage(textureImagePath)\n                })\n                : new THREE.MeshPhongMaterial({\n                    color: 0x3838ff,\n                    wireframe: wireframe,\n                    flatShading: false,\n                    depthTest: true,\n                    opacity: 1.0,\n                    // side: THREE.DoubleSide,\n                    side: doubleSingleSide,\n                    visible: true,\n                    emissive: 0x0,\n                    reflectivity: 1.0,\n                    refractionRatio: 0.89,\n                    map: null\n                });\n        },\n        createSliceMaterial: function (useTextureImage, wireframe, textureImagePath) {\n            if (wireframe) {\n                return new THREE.MeshBasicMaterial({ wireframe: true });\n                // return new THREE.MeshStandardMaterial({ wireframe: true });\n            }\n            else {\n                return new THREE.MeshLambertMaterial({\n                    color: useTextureImage ? 0x888888 : 0xa1848a8,\n                    wireframe: false,\n                    // flatShading: false,\n                    depthTest: true,\n                    opacity: 1.0,\n                    side: THREE.DoubleSide,\n                    // side: doubleSingleSide,\n                    visible: true,\n                    emissive: 0x0,\n                    reflectivity: 1.0,\n                    refractionRatio: 0.89,\n                    map: useTextureImage ? loadTextureImage(textureImagePath) : null,\n                    vertexColors: false\n                });\n            }\n        },\n    };\n    /**\n     * Load a texture or get it from the internal buffer if it was already loaded before.\n     *\n     * @param {string} path - The path (absolute or relative) to the texture image to load.\n     * @returns {THREE.Texture}\n     */\n    const loadTextureImage = function (path) {\n        var texture = textureStore.get(path);\n        if (!texture) {\n            var loader = new THREE.TextureLoader();\n            var texture = loader.load(path);\n            textureStore.set(path, texture);\n        }\n        return texture;\n    };\n    return DildoMaterials;\n})();\n//# sourceMappingURL=DildoMaterials.js.map"],"names":["DildoMaterials","textureStore","Map","createMainMaterial","useTextureImage","wireframe","textureImagePath","doubleSingleSide","THREE","MeshLambertMaterial","color","depthTest","opacity","side","visible","emissive","reflectivity","refractionRatio","map","loadTextureImage","MeshPhongMaterial","flatShading","createSliceMaterial","MeshBasicMaterial","DoubleSide","vertexColors","path","texture","get","TextureLoader","load","set"],"mappings":"6XAWY,MAACA,EAAiB,MAI1B,IAAIC,EAAe,IAAIC,IACvB,MAAMF,EAAiB,CAUnBG,mBAAoB,SAAUC,EAAiBC,EAAWC,EAAkBC,GACxE,OAAOH,EACD,IAAII,EAAMC,oBAAoB,CAC5BC,MAAO,SACPL,UAAWA,EAEXM,WAAW,EACXC,QAAS,EAETC,KAAMN,EACNO,SAAS,EACTC,SAAU,EACVC,aAAc,EACdC,gBAAiB,IACjBC,IAAKC,EAAiBb,KAExB,IAAIE,EAAMY,kBAAkB,CAC1BV,MAAO,QACPL,UAAWA,EACXgB,aAAa,EACbV,WAAW,EACXC,QAAS,EAETC,KAAMN,EACNO,SAAS,EACTC,SAAU,EACVC,aAAc,EACdC,gBAAiB,IACjBC,IAAK,QAGjBI,oBAAqB,SAAUlB,EAAiBC,EAAWC,GACvD,OAAID,EACO,IAAIG,EAAMe,kBAAkB,CAAElB,WAAW,IAIzC,IAAIG,EAAMC,oBAAoB,CACjCC,MAAON,EAAkB,QAAW,UACpCC,WAAW,EAEXM,WAAW,EACXC,QAAS,EACTC,KAAML,EAAMgB,WAEZV,SAAS,EACTC,SAAU,EACVC,aAAc,EACdC,gBAAiB,IACjBC,IAAKd,EAAkBe,EAAiBb,GAAoB,KAC5DmB,cAAc,MAWxBN,EAAmB,SAAUO,GAE/B,KADIC,EAAU1B,EAAa2B,IAAIF,IACjB,CACV,IACIC,GADS,IAAInB,EAAMqB,eACFC,KAAKJ,GAC1BzB,EAAa8B,IAAIL,EAAMC,GAE3B,OAAOA,GAEX,OAAO3B,GArFmB"}