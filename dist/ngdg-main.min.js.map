{"version":3,"file":"ngdg-main.min.js","mappings":"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","sources":["webpack://ngdg/webpack/runtime/chunk loaded","webpack://ngdg/./src/cjs/BumpMapper.js","webpack://ngdg/./src/cjs/ConfigIO.js","webpack://ngdg/./src/cjs/DildoGeneration.js","webpack://ngdg/./src/cjs/DildoGeometry.js","webpack://ngdg/./src/cjs/DildoMaterials.js","webpack://ngdg/./src/cjs/GeometryGenerationHelpers.js","webpack://ngdg/./src/cjs/ImageStore.js","webpack://ngdg/./src/cjs/PathFinder.js","webpack://ngdg/./src/cjs/PlaneMeshIntersection.js","webpack://ngdg/./src/cjs/UVHelpers.js","webpack://ngdg/./src/cjs/clearDuplicateVertices3.js","webpack://ngdg/./src/cjs/computeVertexNormals.js","webpack://ngdg/./src/cjs/constants.js","webpack://ngdg/./src/cjs/defaults.js","webpack://ngdg/./src/cjs/entry.js","webpack://ngdg/./src/cjs/isMobileDevice.js","webpack://ngdg/./src/cjs/locateVertexInArray.js","webpack://ngdg/./src/cjs/mergeGeometries.js","webpack://ngdg/./src/cjs/ngdg.js","webpack://ngdg/./src/cjs/randomWebColor.js","webpack://ngdg/webpack/bootstrap","webpack://ngdg/webpack/runtime/define property getters","webpack://ngdg/webpack/runtime/hasOwnProperty shorthand","webpack://ngdg/webpack/runtime/make namespace object","webpack://ngdg/webpack/runtime/jsonp chunk loading","webpack://ngdg/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","\"use strict\";\n/**\n * A helper to apply bumpmaps to any rectangular mesh.\n *\n * @author  Ikaros Kappler\n * @date    2021-09-06\n * @version 1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BumpMapper = void 0;\nvar THREE = require(\"three\");\nvar computeVertexNormals_1 = require(\"./computeVertexNormals\");\nvar GeometryGenerationHelpers_1 = require(\"./GeometryGenerationHelpers\");\nexports.BumpMapper = {\n    applyBumpmap: function (dildoGeometry, bufferedGeometry, bumpmap, material, options) {\n        var collectedVertexNormals = (0, computeVertexNormals_1.computeVertexNormals)(dildoGeometry, bufferedGeometry);\n        var dildoNormalGeometry = new THREE.Geometry();\n        dildoNormalGeometry.vertices = collectedVertexNormals.map(function (normalLine) {\n            var endPoint = normalLine.end.clone();\n            GeometryGenerationHelpers_1.GeometryGenerationHelpers.normalizeVectorXYZ(normalLine.start, endPoint, options.bumpmapStrength);\n            return endPoint;\n        });\n        var dildoNormalsMesh = new THREE.Points(dildoNormalGeometry, new THREE.PointsMaterial({\n            size: 1.4,\n            color: 0x00ffff\n        }));\n        // if (options.showBumpmapTargets) {\n        //   dildoNormalsMesh.position.y = -100;\n        //   this.addMesh(dildoNormalsMesh);\n        // }\n        var dildoMesh = null;\n        console.log(\"options.useBumpmap\", options.useBumpmap, \"bumpmap\", bumpmap);\n        // const heightMap = createHeightMapFromImage( bumpmapTexture ):\n        if (options.useBumpmap && bumpmap) {\n            for (var y = 0; y < dildoGeometry.vertexMatrix.length; y++) {\n                for (var x = 0; x < dildoGeometry.vertexMatrix[y].length; x++) {\n                    var vertIndex = dildoGeometry.vertexMatrix[y][x];\n                    var vertex = dildoGeometry.vertices[vertIndex];\n                    var yRatio = 1.0 - y / (dildoGeometry.vertexMatrix.length - 1);\n                    var xRatio = x / (dildoGeometry.vertexMatrix[y].length - 1);\n                    var lerpFactor = bumpmap.getHeightAt(xRatio, yRatio);\n                    var lerpTarget = dildoNormalGeometry.vertices[vertIndex];\n                    vertex.lerp(lerpTarget, lerpFactor);\n                }\n            }\n            // Also lerp top point\n            //   const vertIndex: number = dildoGeometry.topIndex;\n            //   //   const vertIndex: number = dildoGeometry.vertexMatrix[dildoGeometry.vertexMatrix.length - 1][0];\n            //   const vertex: THREE.Vector3 = dildoGeometry.vertices[vertIndex];\n            //   const yRatio: number = 0.0;\n            //   const xRatio: number = 0.5;\n            //   const lerpFactor: number = bumpmap.getHeightAt(xRatio, yRatio);\n            //   const lerpTarget: THREE.Vector3 = dildoNormalGeometry.vertices[vertIndex];\n            //   vertex.lerp(lerpTarget, lerpFactor);\n            // Override the buffered geometry! (bumpmap has been applied)\n            bufferedGeometry = new THREE.BufferGeometry().fromGeometry(dildoGeometry);\n            bufferedGeometry.computeVertexNormals();\n            // Override the mesh! (bumpmap has been applied)\n            dildoMesh = new THREE.Mesh(bufferedGeometry, material);\n        }\n        return { dildoMesh: dildoMesh, dildoNormalsMesh: dildoNormalsMesh };\n    }\n};\n//# sourceMappingURL=BumpMapper.js.map","\"use strict\";\n/**\n * A basic IO interface for storing and retrieving json data from dropped files and local storage.\n *\n * @author  Ikaros Kappler\n * @date    2021-10-13\n * @version 1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfigIO = void 0;\nvar ConfigIO = /** @class */ (function () {\n    /**\n     *\n     * @param {HTMLElement} element - The element you wish to operate as the drop zone (like <body/>).\n     */\n    function ConfigIO(element) {\n        var _this = this;\n        this.handleDropEvent = function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            _this.element.style.opacity = \"1.0\";\n            if (!event.dataTransfer.files || event.dataTransfer.files.length === 0) {\n                // No files were dropped\n                return;\n            }\n            if (event.dataTransfer.files.length > 1) {\n                // Multiple file drop is not nupported\n                return;\n            }\n            if (!_this.pathDroppedCallback) {\n                // No handling callback defined.\n                return;\n            }\n            if (event.dataTransfer.files[0]) {\n                var file = event.dataTransfer.files[0];\n                console.log(\"file\", file);\n                if (file.type.match(/json.*/)) {\n                    var reader = new FileReader();\n                    reader.onload = function (readEvent) {\n                        // Finished reading file data.\n                        _this.pathDroppedCallback(readEvent.target.result);\n                    };\n                    reader.readAsText(file); // start reading the file data.\n                }\n            }\n        };\n        this.handleDragOverEvent = function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            _this.element.style.opacity = \"0.5\";\n        };\n        this.handleDragLeaveEvent = function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            _this.element.style.opacity = \"1.0\";\n        };\n        this.element = element;\n        // Init the drop listeners\n        element.addEventListener(\"drop\", this.handleDropEvent.bind(this));\n        element.addEventListener(\"dragover\", this.handleDragOverEvent.bind(this));\n        element.addEventListener(\"dragleave\", this.handleDragLeaveEvent.bind(this));\n    }\n    /**\n     * Install the drop callback. Note than only one callback can be installed in this\n     * implementation. Calling this method multiple times will overwrite previously\n     * installed listeners.\n     *\n     * The callback will receive the dropped files as a string.\n     *\n     * @param {(data:string)=>void} callback\n     */\n    ConfigIO.prototype.onPathDropped = function (callback) {\n        this.pathDroppedCallback = callback;\n    };\n    /**\n     * Install a callback for retrieving the `bezier_path` string from the localstorage.\n     *\n     * @param {(data:string)=>void} handlePathRestored - The callback to handle the retrieved storage value. Will be called immediately.\n     * @param {()=>string} requestPath - Requests the `bezier_path` string value to store; will be called on a 10 second timer interval.\n     */\n    ConfigIO.prototype.onPathRestored = function (handlePathRestored, requestPath) {\n        var bezierJSON = localStorage.getItem(\"bezier_path\");\n        if (bezierJSON) {\n            handlePathRestored(bezierJSON);\n        }\n        setInterval(function () {\n            var newBezierJSON = requestPath();\n            if (newBezierJSON) {\n                localStorage.setItem(\"bezier_path\", newBezierJSON);\n            }\n        }, 10000);\n    };\n    ConfigIO.prototype.destroy = function () {\n        this.element.removeEventListener(\"drop\", this.handleDropEvent);\n        this.element.removeEventListener(\"dragover\", this.handleDragOverEvent);\n        this.element.removeEventListener(\"dragleave\", this.handleDragLeaveEvent);\n    };\n    return ConfigIO;\n}());\nexports.ConfigIO = ConfigIO;\n//# sourceMappingURL=ConfigIO.js.map","\"use strict\";\n/**\n * A class to manage 3d scenes and the generation of dildo models.\n *\n * @author   Ikaros Kappler\n * @date     2020-07-01\n * @modified 2020-09-11 Added proper texture loading.\n * @modified 2021-06-07 Fixing `removeCachedGeometries`. Adding bending of model.\n * @modified 2021-08-29 Ported this class to Typescript from vanilla JS.\n * @version  1.2.1\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DildoGeneration = void 0;\nvar THREE = require(\"three\");\nvar VertexNormalsHelper_1 = require(\"three/examples/jsm/helpers/VertexNormalsHelper\");\nvar DildoGeometry_1 = require(\"./DildoGeometry\");\nvar DildoMaterials_1 = require(\"./DildoMaterials\");\nvar GeometryGenerationHelpers_1 = require(\"./GeometryGenerationHelpers\");\nvar mergeGeometries_1 = require(\"./mergeGeometries\");\nvar PathFinder_1 = require(\"./PathFinder\");\nvar randomWebColor_1 = require(\"./randomWebColor\");\nvar constants_1 = require(\"./constants\");\nvar BumpMapper_1 = require(\"./BumpMapper\");\nvar DildoGeneration = /** @class */ (function () {\n    function DildoGeneration(canvasId, options) {\n        this.canvas = document.getElementById(canvasId);\n        this.parent = this.canvas.parentElement;\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10000);\n        this.camera.position.z = 500;\n        var lightDistanceFactor = 10.0;\n        var intensityFactor = 1.0;\n        this.ambientLightA = new THREE.AmbientLight(0x444444);\n        this.ambientLightA.position.set(350, 0, -350).multiplyScalar(lightDistanceFactor * 5);\n        // this.ambientLightA = new THREE.PointLight(0xffffff, intensityFactor * 5.0, 350.0 * lightDistanceFactor, 0.5); // color, intensity, distance, decay);\n        // this.ambientLightA.position.set(350, 0, -350).multiplyScalar(lightDistanceFactor);\n        this.scene.add(this.ambientLightA);\n        this.ambientLightB = new THREE.PointLight(0xffffff, intensityFactor * 5.0, 350.0 * lightDistanceFactor, 0.5); // color, intensity, distance, decay);\n        this.ambientLightB.position.set(-350, 0, 350).multiplyScalar(lightDistanceFactor);\n        this.scene.add(this.ambientLightB);\n        this.directionalLightA = new THREE.DirectionalLight(0xffffff, intensityFactor * 2.0);\n        // this.directionalLightA = new THREE.PointLight(0xffffff, 1.0, 350.0 * lightDistanceFactor, 0.5); // color, intensity, distance, decay);\n        this.directionalLightA.position.set(350, 350, 350).multiplyScalar(lightDistanceFactor);\n        this.scene.add(this.directionalLightA);\n        this.scene.add(this.directionalLightA.target);\n        this.directionalLightB = new THREE.DirectionalLight(0xffffff, intensityFactor * 2.0);\n        this.directionalLightB.position.set(-350, -350, -50).multiplyScalar(lightDistanceFactor);\n        this.scene.add(this.directionalLightB);\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: this.canvas,\n            preserveDrawingBuffer: true,\n            antialias: true // false\n        });\n        // TODO: check if this works!\n        // this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n        this.controls = options.makeOrbitControls(this.camera, this.renderer.domElement);\n        this.controls.update();\n        // Cache all geometries for later removal\n        this.geometries = [];\n        // Remember partial results\n        // Record<string,object>\n        this.partialResults = {};\n        var _self = this;\n        window.addEventListener(\"resize\", function () {\n            _self.resizeCanvas();\n        });\n        this.resizeCanvas();\n        var animate = function () {\n            requestAnimationFrame(animate);\n            _self.controls.update();\n            _self.renderer.render(_self.scene, _self.camera);\n        };\n        animate();\n    }\n    /**\n     * Resize the 3d canvas to fit its container.\n     */\n    DildoGeneration.prototype.resizeCanvas = function () {\n        var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.style.width = \"\" + width + \"px\";\n        this.canvas.style.height = \"\" + height + \"px\";\n        this.canvas.setAttribute(\"width\", \"\" + width + \"px\");\n        this.canvas.setAttribute(\"height\", height + \"px\");\n        this.renderer.setSize(width, height);\n        // What am I doing here?\n        this.camera.setViewOffset(width, height, width / 4, height / 20, width, height);\n    };\n    /**\n     * Clears the current scene and rebuilds everything from scratch according to the\n     * mesh options being passed.\n     *\n     * @param {BezierPath} options.outline\n     * @param {number}     options.segmentCount\n     * @param {number}     options.outlineSegmentCount (>= 2).\n     * @param {number}     options.bendAngle The bending angle in degrees (!).\n     * @param {boolean}    options.performSlice\n     * @param {boolean?}   options.useTextureImage\n     * @param {string?}    options.textureImagePath\n     * @param {boolean?}   options.wireframe\n     * @param {string}     options.renderFaces - \"double\" or \"front\" (default) or \"back\"\n     **/\n    DildoGeneration.prototype.rebuild = function (options) {\n        this.removeCachedGeometries();\n        var baseRadius = options.outline.getBounds().width;\n        var baseShape = GeometryGenerationHelpers_1.GeometryGenerationHelpers.mkCircularPolygon(baseRadius, options.shapeSegmentCount, options.baseShapeExcentricity);\n        var useBumpmap = typeof options.useBumpmap !== \"undefined\" ? options.useBumpmap : false;\n        // const bumpmapPath = \"./assets/img/bumpmap.png\";\n        // const bumpmapTexture: THREE.Texture | null = useBumpmap ? DildoMaterials.loadTextureImage(bumpmapPath) : null;\n        var bumpmap = useBumpmap && options.bumpmap ? options.bumpmap : null;\n        var dildoGeometry = new DildoGeometry_1.DildoGeometry(Object.assign({ baseShape: baseShape /*, bumpmapTexture: bumpmapTexture */ }, options));\n        var useTextureImage = options.useTextureImage && typeof options.textureImagePath !== \"undefined\";\n        var textureImagePath = typeof options.textureImagePath !== \"undefined\" ? options.textureImagePath : null;\n        var doubleSingleSide = options.renderFaces === \"double\" ? THREE.DoubleSide : options.renderFaces === \"back\" ? THREE.BackSide : THREE.FrontSide;\n        var wireframe = typeof options.wireframe !== \"undefined\" ? options.wireframe : false;\n        // const isBumpmappingPossible : boolean = (options.useBumpmap && bumpmapTexture);\n        var material = DildoMaterials_1.DildoMaterials.createMainMaterial(useTextureImage, wireframe, textureImagePath, doubleSingleSide);\n        // This can be overriden in later steps! (after bumpmap was applied)\n        var bufferedGeometry = new THREE.BufferGeometry().fromGeometry(dildoGeometry);\n        bufferedGeometry.computeVertexNormals();\n        // This can be overriden in later steps! (after bumpmap was applied)\n        var dildoMesh = new THREE.Mesh(bufferedGeometry, material);\n        this.camera.lookAt(new THREE.Vector3(20, 0, 150));\n        this.camera.lookAt(dildoMesh.position);\n        var spineGeometry = new THREE.Geometry();\n        dildoGeometry.spineVertices.forEach(function (spineVert) {\n            spineGeometry.vertices.push(spineVert.clone());\n        });\n        if (options.addSpine) {\n            GeometryGenerationHelpers_1.GeometryGenerationHelpers.addSpine(this, spineGeometry);\n        }\n        // Add perpendicular path?\n        if (options.showBasicPerpendiculars) {\n            GeometryGenerationHelpers_1.GeometryGenerationHelpers.addPerpendicularPaths(this, dildoGeometry);\n        }\n        // Show computed dildo normals?\n        // if (options.previewBumpmap || options.useBumpmap) {\n        if (options.useBumpmap) {\n            // const collectedVertexNormals: Array<THREE.Line3> = computeVertexNormals(\n            //   dildoGeometry as unknown as THREE.Geometry,\n            //   bufferedGeometry\n            // );\n            // const dildoNormalGeometry = new THREE.Geometry();\n            // dildoNormalGeometry.vertices = collectedVertexNormals.map((normalLine: THREE.Line3) => {\n            //   const endPoint: THREE.Vector3 = normalLine.end.clone();\n            //   GeometryGenerationHelpers.normalizeVectorXYZ(normalLine.start, endPoint, options.bumpmapStrength);\n            //   return endPoint;\n            // });\n            // const dildoNormalsMesh: THREE.Points = new THREE.Points(\n            //   dildoNormalGeometry,\n            //   new THREE.PointsMaterial({\n            //     size: 1.4,\n            //     color: 0x00ffff\n            //   })\n            // );\n            // if (options.showBumpmapTargets) {\n            //   dildoNormalsMesh.position.y = -100;\n            //   this.addMesh(dildoNormalsMesh);\n            // }\n            // console.log(\"options.useBumpmap\", options.useBumpmap, \"bumpmap\", bumpmap);\n            // // const heightMap = createHeightMapFromImage( bumpmapTexture ):\n            // if (options.useBumpmap && bumpmap) {\n            //   for (var y = 0; y < dildoGeometry.vertexMatrix.length; y++) {\n            //     for (var x = 0; x < dildoGeometry.vertexMatrix[y].length; x++) {\n            //       const vertIndex: number = dildoGeometry.vertexMatrix[y][x];\n            //       const vertex: THREE.Vector3 = dildoGeometry.vertices[vertIndex];\n            //       const yRatio: number = y / (dildoGeometry.vertexMatrix.length - 1);\n            //       const xRatio: number = x / (dildoGeometry.vertexMatrix[y].length - 1);\n            //       const lerpFactor: number = bumpmap.getHeightAt(xRatio, yRatio);\n            //       const lerpTarget: THREE.Vector3 = dildoNormalGeometry.vertices[vertIndex];\n            //       vertex.lerp(lerpTarget, lerpFactor);\n            //     }\n            //   }\n            //   // Override the buffered geometry! (bumpmap has been applied)\n            //   bufferedGeometry = new THREE.BufferGeometry().fromGeometry(dildoGeometry as unknown as THREE.Geometry);\n            //   bufferedGeometry.computeVertexNormals();\n            //   // Override the mesh! (bumpmap has been applied)\n            //   dildoMesh = new THREE.Mesh(bufferedGeometry, material);\n            // }\n            var _a = BumpMapper_1.BumpMapper.applyBumpmap(dildoGeometry, bufferedGeometry, bumpmap, material, options), bumpmappedDildoMesh = _a.dildoMesh, dildoNormalsMesh = _a.dildoNormalsMesh;\n            dildoMesh = bumpmappedDildoMesh;\n            if (options.showBumpmapTargets) {\n                dildoNormalsMesh.position.y = -100;\n                this.addMesh(dildoNormalsMesh);\n            }\n        }\n        if (options.performSlice) {\n            this.__performPlaneSlice(dildoMesh, dildoGeometry, wireframe, useTextureImage, textureImagePath, options);\n            // The CSG operations are not reliable.\n            // this.__performCsgSlice(latheMesh, geometry, material);\n        }\n        else {\n            dildoMesh.position.y = -100;\n            dildoMesh.userData[\"isExportable\"] = true;\n            this.addMesh(dildoMesh);\n            if (options.showNormals) {\n                var vnHelper = new VertexNormalsHelper_1.VertexNormalsHelper(dildoMesh, options.normalsLength, 0x00ff00); // Fourth param 1?\n                // TODO: use addMesh() here?\n                this.scene.add(vnHelper);\n                this.geometries.push(vnHelper);\n            }\n        }\n    };\n    /**\n     * Perform the actual slice operation.\n     *\n     * This will create several new meshes:\n     *  * a left geometry slice (along the z- axis).\n     *  * a right geometry slice (along the z+ axis).\n     *  * an inner slice cut geometry (inside the dildo model, cutting it into two halves).\n     *  * an outer slice cut geometry (inside the mould model, cutting that one into two halves).\n     *\n     * These will always be generated, even if the options tell different; if so then they are set\n     * to be invisible.\n     *\n     * @param {THREE.Geometry} latheMesh - The buffered dildo geometry (required to perform the slice operation).\n     * @param {DildoGeometry} latheUnbufferedGeometry - The unbuffered dildo geometry (required to obtain the perpendicular path lines).\n     * @param {boolean} wireframe\n     */\n    DildoGeneration.prototype.__performPlaneSlice = function (latheMesh, latheUnbufferedGeometry, wireframe, useTextureImage, textureImagePath, options) {\n        // var epsilon = 0.000001;\n        var leftPlane = new THREE.Plane(new THREE.Vector3(0, 0, 1), 0);\n        var leftSliceGeometry = GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeSlice(latheUnbufferedGeometry, leftPlane);\n        var rightPlane = new THREE.Plane(new THREE.Vector3(0, 0, -1), 0);\n        var rightSliceGeometry = GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeSlice(latheUnbufferedGeometry, rightPlane);\n        var sliceMaterial = DildoMaterials_1.DildoMaterials.createSliceMaterial(useTextureImage, wireframe, textureImagePath);\n        // Find points on intersection path (this is a single path in this configuration)\n        var planeGeom = new THREE.PlaneGeometry(300, 500);\n        var planeMesh = new THREE.Mesh(planeGeom, new THREE.MeshBasicMaterial({\n            color: 0x484848,\n            transparent: true,\n            opacity: 0.35,\n            side: THREE.DoubleSide\n        }));\n        planeMesh.rotation.x = Math.PI / 5;\n        this.partialResults[constants_1.KEY_SPLIT_PANE_MESH] = planeMesh;\n        if (options.showSplitPane) {\n            planeMesh.position.z = 0.5;\n            this.addMesh(planeMesh);\n        }\n        var planeIntersectionPoints = GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeAndAddPlaneIntersection(this, latheMesh, latheUnbufferedGeometry, planeMesh, planeGeom, options);\n        // Find the connected path (there is only one if you choose the cut plane properly)\n        // Note that it doesn't matter which slice geometry we use as left and right match\n        // perfectly together at their cut plane.\n        // Array<number[]>\n        var connectedPaths = new PathFinder_1.PathFinder().findAllPathsOnMesh(leftSliceGeometry, planeIntersectionPoints);\n        // TEST what the connected paths look like\n        // TODO: add an option and only add to scene if desired.\n        for (var p = 0; p < connectedPaths.length; p++) {\n            var geometry = new THREE.Geometry();\n            geometry.vertices = connectedPaths[p].map(function (geometryVertexIndex) {\n                return leftSliceGeometry.vertices[geometryVertexIndex];\n            });\n            var linesMesh_1 = new THREE.Line(geometry, new THREE.LineBasicMaterial({\n                color: (0, randomWebColor_1.randomWebColor)(i, \"Mixed\") // 0x8800a8\n            }));\n            linesMesh_1.position.y = -100;\n            // linesMesh.position.z = -50;\n            this.addMesh(linesMesh_1);\n        }\n        if (options.addPrecalculatedShapeOutlines) {\n            // TEST what the line mesh looks like\n            var pointGeometry = new THREE.Geometry();\n            pointGeometry.vertices = planeIntersectionPoints;\n            var linesMesh = new THREE.Line(pointGeometry, new THREE.LineBasicMaterial({\n                color: 0x8800a8\n            }));\n            linesMesh.position.y = -100;\n            linesMesh.position.z = -50;\n            this.addMesh(linesMesh);\n        }\n        // Triangulate connected paths\n        var triangulatedGeometries = [];\n        for (var i = 0; i < connectedPaths.length; i++) {\n            var triangulationGeometry = GeometryGenerationHelpers_1.GeometryGenerationHelpers.makePlaneTriangulation(this, leftSliceGeometry, connectedPaths[i], options);\n            triangulatedGeometries.push(triangulationGeometry);\n            // Merge together left and right slice geometry with the triangulated\n            // cut faces.\n            if (options.closeCutAreas) {\n                (0, mergeGeometries_1.mergeGeometries)(leftSliceGeometry, triangulationGeometry, constants_1.EPS);\n                (0, mergeGeometries_1.mergeGeometries)(rightSliceGeometry, triangulationGeometry, constants_1.EPS);\n            }\n        }\n        if (options.showLeftSplit) {\n            leftSliceGeometry.uvsNeedUpdate = true;\n            // TODO: check if this is still required\n            leftSliceGeometry.buffersNeedUpdate = true;\n            leftSliceGeometry.computeVertexNormals();\n            var slicedMeshLeft = new THREE.Mesh(leftSliceGeometry, sliceMaterial);\n            slicedMeshLeft.position.y = -100;\n            slicedMeshLeft.position.z = -50;\n            slicedMeshLeft.userData[\"isExportable\"] = true;\n            this.addMesh(slicedMeshLeft);\n            if (options.showNormals) {\n                var vnHelper = new VertexNormalsHelper_1.VertexNormalsHelper(slicedMeshLeft, options.normalsLength, 0x00ff00);\n                this.scene.add(vnHelper);\n                this.geometries.push(vnHelper);\n            }\n        }\n        if (options.showRightSplit) {\n            rightSliceGeometry.uvsNeedUpdate = true;\n            // TODO: check if this is still required\n            rightSliceGeometry.buffersNeedUpdate = true;\n            rightSliceGeometry.computeVertexNormals();\n            var slicedMeshRight = new THREE.Mesh(rightSliceGeometry, sliceMaterial);\n            slicedMeshRight.position.y = -100;\n            slicedMeshRight.position.z = 50;\n            slicedMeshRight.userData[\"isExportable\"] = true;\n            this.addMesh(slicedMeshRight);\n            if (options.showNormals) {\n                var vnHelper = new VertexNormalsHelper_1.VertexNormalsHelper(slicedMeshRight, options.normalsLength, 0x00ff00);\n                this.scene.add(vnHelper);\n                this.geometries.push(vnHelper);\n            }\n        }\n        // Remember everything\n        this.partialResults[constants_1.KEY_LEFT_SLICE_PLANE] = leftPlane;\n        this.partialResults[constants_1.KEY_LEFT_SLICE_GEOMETRY] = leftSliceGeometry;\n        this.partialResults[constants_1.KEY_RIGHT_SLICE_PLANE] = rightPlane;\n        this.partialResults[constants_1.KEY_RIGHT_SLICE_GEOMETRY] = rightSliceGeometry;\n        this.partialResults[constants_1.KEY_PLANE_INTERSECTION_POINTS] = planeIntersectionPoints;\n        this.partialResults[constants_1.KEY_SPLIT_TRIANGULATION_GEOMETRIES] = triangulatedGeometries;\n    };\n    //   /**\n    //    * Make a triangulation of the given path specified by the verted indices.\n    //    *\n    //    * @param {Array<number>} connectedPath - An array of vertex indices.\n    //    * @return {THREE.Geometry} trianglesMesh\n    //    */\n    //   var makePlaneTriangulation = function (generator, sliceGeometry, connectedPath, options) {\n    //     // Convert the connected paths indices to [x, y, x, y, x, y, ...] coordinates (requied by earcut)\n    //     var currentPathXYData = connectedPath.reduce(function (earcutInput, vertIndex) {\n    //       var vert = sliceGeometry.vertices[vertIndex];\n    //       earcutInput.push(vert.x, vert.y);\n    //       return earcutInput;\n    //     }, []);\n    //     // Array<number> : triplets of vertex indices in the plain XY array\n    //     var triangles = earcut(currentPathXYData);\n    //     // Convert triangle indices back to a geometry\n    //     var trianglesGeometry = new THREE.Geometry();\n    //     // We will merge the geometries in the end which will create clones of the vertices.\n    //     // No need to clone here.\n    //     // trianglesGeometry.vertices = leftSliceGeometry.vertices;\n    //     trianglesGeometry.vertices = connectedPath.map(function (geometryVertexIndex) {\n    //       return sliceGeometry.vertices[geometryVertexIndex];\n    //     });\n    //     // Array<{x,y}> is compatible with Array<{x,y,z}> here :)\n    //     var flatSideBounds = Bounds.computeFromVertices(trianglesGeometry.vertices);\n    //     for (var t = 0; t < triangles.length; t += 3) {\n    //       var a = triangles[t];\n    //       var b = triangles[t + 1];\n    //       var c = triangles[t + 2];\n    //       trianglesGeometry.faces.push(new THREE.Face3(a, b, c));\n    //       // Add UVs\n    //       UVHelpers.makeFlatTriangleUVs(trianglesGeometry, flatSideBounds, a, b, c);\n    //     }\n    //     trianglesGeometry.uvsNeedUpdate = true;\n    //     trianglesGeometry.buffersNeedUpdate = true;\n    //     trianglesGeometry.computeVertexNormals();\n    //     var trianglesMesh = new THREE.Mesh(\n    //       trianglesGeometry,\n    //       new THREE.MeshBasicMaterial({\n    //         color: 0x0048ff,\n    //         transparent: true,\n    //         opacity: 0.55,\n    //         side: THREE.DoubleSide\n    //       })\n    //     );\n    //     trianglesMesh.position.y = -100;\n    //     // trianglesMesh.position.z += 1.0; // Avoid Moiré with plane mesh?\n    //     trianglesMesh.userData[\"isExportable\"] = false;\n    //     generator.partialResults[KEY_PLANE_INTERSECTION_TRIANGULATION] = trianglesGeometry;\n    //     if (options.showSplitShapeTriangulation) {\n    //       generator.addMesh(trianglesMesh);\n    //     }\n    //     return trianglesGeometry;\n    //   };\n    /**\n     * Add a mesh to the underlying scene.\n     *\n     * The function will make some modifications to the rotation of the meshes.\n     * @param {THREE.Mesh} mesh\n     */\n    DildoGeneration.prototype.addMesh = function (mesh) {\n        mesh.rotation.x = Math.PI;\n        this.scene.add(mesh);\n        this.geometries.push(mesh);\n    };\n    DildoGeneration.prototype.removeCachedGeometries = function () {\n        for (var i = 0; i < this.geometries.length; i++) {\n            var old = this.geometries[i];\n            // Remove old object.\n            //  A better way would be to update the lathe in-place. Possible?\n            this.scene.remove(old);\n            //   if (typeof old.dispose == \"function\") old.dispose();\n            //   if (typeof old.material != \"undefined\" && typeof old.material.dispose == \"function\") old.material.dispose();\n            if (old instanceof THREE.Mesh) {\n                old.geometry.dispose();\n                old.material.dispose();\n            }\n        }\n        this.geometries = [];\n    };\n    /**\n     * Generate an STL string from the (exportable) meshes that are currently stored inside this generator.\n     *\n     * @param {function(string)} options.onComplete\n     **/\n    DildoGeneration.prototype.generateSTL = function (options, exporter) {\n        // const exporter: STLExporter = new STLExporter();\n        var stlBuffer = [];\n        // TODO: merge all exportable geometries together and export as one.\n        for (var i in this.geometries) {\n            if (this.geometries[i].userData[\"isExportable\"] === true) {\n                var stlData = exporter.parse(this.geometries[i]);\n                stlBuffer.push(stlData);\n            }\n        }\n        if (typeof options.onComplete === \"function\") {\n            options.onComplete(stlBuffer.join(\"\\n\\n\"));\n        }\n        else {\n            console.warn(\"STL data was generated but no 'onComplete' callback was defined.\");\n        }\n    };\n    return DildoGeneration;\n}()); // END class\nexports.DildoGeneration = DildoGeneration;\n//# sourceMappingURL=DildoGeneration.js.map","\"use strict\";\n/**\n * @require THREE.Geometry\n *\n * @author   Ikaros Kappler\n * @date     2020-07-08\n * @modified 2021-06-11 Fixing top and bottom points; preparing slicing of mesh.\n * @modified 2021-08-29 Ported to Typescript from vanilla JS.\n * @version  1.0.2\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DildoGeometry = exports.DildoBaseClass = void 0;\n// TODOs\n// + Add cut-plane faces when hollow\n// + Move vertex-creating helper functions out of the class\n// + Move face-creating helper functions out of the class\n// + Move UV-creating helper functions out of the class\n// + port to typescript\nvar plotboilerplate_1 = require(\"plotboilerplate\");\nvar THREE = require(\"three\");\nvar GeometryGenerationHelpers_1 = require(\"./GeometryGenerationHelpers\");\n// import { earcut } from \"./thirdparty-ported/earcut\"; // TODO: fix earcut types\nvar earcut_typescript_1 = require(\"earcut-typescript\"); // TODO: fix earcut types\nvar UVHelpers_1 = require(\"./UVHelpers\");\nvar DEG_TO_RAD = Math.PI / 180.0;\n// import { DEG_TO_RAD } from \"./constants\";\n// This is a dirty workaround to\n// avoid direct class extending of THREE.Geometry.\n// I am using `THREE.Geometry.call(this);` instead :/\nvar DildoBaseClass = /** @class */ (function () {\n    function DildoBaseClass() {\n        this.vertices = [];\n        this.faces = [];\n        this.faceVertexUvs = [[]];\n    }\n    return DildoBaseClass;\n}());\nexports.DildoBaseClass = DildoBaseClass;\n// export class DildoGeometry { // extends globalThis.THREE.Geometry {\nvar DildoGeometry = /** @class */ (function (_super) {\n    __extends(DildoGeometry, _super);\n    /**\n     * Create a new dildo geometry from the passed options..\n     *\n     * @param {Polygon} options.baseShape - The base shape to use (this is usually some regular polygon).\n     * @param {BezierPath} options.outline - The lathe outline to use.\n     * @param {number} options.bendAngle - A bend angle (in degrees!). Will only be applied if isBending=true.\n     * @param {number} options.outlineSegmentCount (>= 2).\n     * @param {boolean} options.isBending - Switch bending on/off no matter what the bend angle says.\n     * @param {boolean} options.makeHollow - Make a hollow mold.\n     **/\n    function DildoGeometry(options) {\n        var _this = _super.call(this) || this;\n        THREE.Geometry.call(_this);\n        _this.vertexMatrix = []; // Array<Array<number>>\n        _this.topIndex = -1;\n        _this.bottomIndex = -1;\n        _this.spineVertices = []; // Array<THREE.Vector>\n        _this.outerPerpLines = []; // Array<Three.Line3>\n        _this.innerPerpLines = []; // Array<Three.Line3>\n        _this.flatSidePolygon = null; // Polygon (2d)\n        _this.leftFlatIndices = []; // Array<number>\n        _this.rightFlatIndices = []; // Array<number>\n        _this.leftFlatTriangleIndices = []; // Array[[number,number,number]]\n        _this.rightFlatTriangleIndices = []; // Array[[number,number,number]]\n        _this.flatSideBounds = null; // Bounds\n        // The four corner vertices from the hollow shell plus the bottom vertex indices left and right\n        _this.hollowBottomEdgeVertIndices = []; // [number,number,number,number, number, number]\n        _this.hollowBottomTriagles = []; // Array<[number,number,number]>\n        _this.dildoNormals = [];\n        _this._buildVertices(options);\n        _this._buildFaces(options);\n        _this._buildUVMapping(options);\n        // Fill up missing UVs to avoid warnings\n        // This is a bit dirty, but not in call cases it is useful to create UV mappings\n        // while (this.faceVertexUvs[0].length < this.faces.length) {\n        //   this.faceVertexUvs[0].push([new THREE.Vector2(0, 0), new THREE.Vector2(1, 0), new THREE.Vector2(0.5, 1)]);\n        // }\n        if (options.useBumpmap) {\n            if (options.bumpmapTexture) {\n                _this.__applyBumpmap(options.bumpmapTexture);\n            }\n            else {\n                console.warn(\"Cannot apply bumpmap as desired, because the bumpmap texture is null or undefined.\");\n            }\n        }\n        return _this;\n    }\n    /**\n     *\n     * @param {Polygon} baseShape\n     * @param {Vertex} shapeCenter\n     * @param {Bounds} outlineBounds\n     * @param {THREE.Vertex3} outlineVert\n     * @param {number} sliceIndex\n     * @param {number} heightT A value between 0.0 and 1.0 (inclusive) to indicate the height position.\n     * @param {boolean} isBending\n     * @param {number=} bendAngle Must not be null, NaN or infinity if `isBending==true`\n     * @param {number=} arcRadius\n     * @param {boolean=} normalizePerpendiculars\n     * @param {number=} normalsLength\n     * @param {number=0} shapeTwistAngle - The angle to twist this particular shape around the y axis.\n     * @return { yMin: number, yMax : number }\n     */\n    DildoGeometry.prototype.__buildSlice = function (baseShape, outlineBounds, outlineVert, sliceIndex, heightT, isBending, bendAngle, arcRadius, shapeTwistAngle) {\n        var outlineXPct = (outlineBounds.max.x - outlineVert.x) / outlineBounds.width;\n        // TODO: are these is use?\n        var yMin, yMax;\n        for (var i = 0; i < baseShape.vertices.length; i++) {\n            var shapeVert = baseShape.vertices[i];\n            if (isBending) {\n                var vert = new THREE.Vector3(shapeVert.x * outlineXPct, 0, shapeVert.y * outlineXPct);\n                // Apply twist\n                rotateVertY(vert, shapeTwistAngle, 0, 0);\n                this._bendVertex(vert, bendAngle, arcRadius, heightT);\n                vert.y += outlineBounds.max.y;\n            }\n            else {\n                var vert = new THREE.Vector3(shapeVert.x * outlineXPct, outlineVert.y, shapeVert.y * outlineXPct);\n                // Apply twist\n                rotateVertY(vert, shapeTwistAngle, 0, 0);\n            }\n            this.vertexMatrix[sliceIndex][i] = this.vertices.length;\n            this.vertices.push(vert);\n            if (sliceIndex == 0) {\n                if (i == 0)\n                    yMin = vert.y;\n                if (i + 1 == baseShape.vertices.length)\n                    yMax = vert.y;\n            }\n        } // END for\n    };\n    /**\n     *\n     * @param {Polygon} baseShape\n     * @param {Vertex} shapeCenter\n     * @param {Bounds} outlineBounds\n     * @param {THREE.Vertex3} outlineVert\n     * @param {number} sliceIndex\n     * @param {number} heightT A value between 0.0 and 1.0 (inclusive) to indicate the height position.\n     * @param {boolean} isBending\n     * @param {number=} bendAngle Must not be null, NaN or infinity if `isBending==true`\n     * @param {number=} arcRadius\n     * @param {boolean=} normalizePerpendiculars\n     * @param {number=} normalsLength\n     * @return { yMin: number, yMax : number }\n     */\n    DildoGeometry.prototype.__buildSpine = function (shapeCenter, outlineBounds, outlineVert, heightT, isBending, bendAngle, arcRadius) {\n        var outlineXPct = (outlineBounds.max.x - outlineVert.x) / outlineBounds.width;\n        // Find shape's center point to construct a spine\n        var spineVert = shapeCenter.clone();\n        if (isBending) {\n            var vert = new THREE.Vector3(spineVert.x * outlineXPct, 0, spineVert.y * outlineXPct);\n            this._bendVertex(vert, bendAngle, arcRadius, heightT);\n            vert.y += outlineBounds.max.y;\n        }\n        else {\n            var vert = new THREE.Vector3(spineVert.x * outlineXPct, outlineVert.y, spineVert.y * outlineXPct);\n        }\n        this.spineVertices.push(vert);\n    };\n    /**\n     *\n     * @param {Polygon} baseShape\n     * @param {Bounds} outlineBounds\n     * @param {THREE.Vertex3} outlineVert\n     * @param {number} sliceIndex\n     * @param {number} heightT A value between 0.0 and 1.0 (inclusive) to indicate the height position.\n     * @param {boolean} isBending\n     * @param {number=} bendAngle Must not be null, NaN or infinity if `isBending==true`\n     * @param {number=} arcRadius\n     * @param {boolean=} normalizePerpendiculars\n     * @param {number=} normalsLength\n     * @return { yMin: number, yMax : number }\n     */\n    DildoGeometry.prototype.__buildPerps = function (baseShape, outlineBounds, outlineVert, // THREE.Vector3?\n    perpendicularVert, heightT, isBending, bendAngle, arcRadius, normalizePerpendiculars, normalsLength) {\n        var outlineXPct = (outlineBounds.max.x - outlineVert.x) / outlineBounds.width;\n        var halfIndices = [0, Math.floor(baseShape.vertices.length / 2)];\n        for (var j = 0; j < halfIndices.length; j++) {\n            var i = halfIndices[j];\n            var shapeVert = baseShape.vertices[i];\n            if (isBending) {\n                var vert = new THREE.Vector3(shapeVert.x * outlineXPct, 0, shapeVert.y * outlineXPct);\n                this._bendVertex(vert, bendAngle, arcRadius, heightT);\n                vert.y += outlineBounds.max.y;\n            }\n            else {\n                var vert = new THREE.Vector3(shapeVert.x * outlineXPct, outlineVert.y, shapeVert.y * outlineXPct);\n            }\n            var perpDifference = new THREE.Vector3(outlineVert.x - perpendicularVert.x, outlineVert.y - perpendicularVert.y, 0);\n            // TODO: check (this is in both cases the same)\n            if (i == 0)\n                var endVert = new THREE.Vector3(vert.x - perpendicularVert.x, vert.y + perpendicularVert.y, 0);\n            else\n                var endVert = new THREE.Vector3(vert.x + perpendicularVert.x, vert.y + perpendicularVert.y, 0);\n            rotateVert(endVert, bendAngle * heightT, vert.x, vert.y);\n            var outerPerpVert = vert.clone();\n            outerPerpVert.x += perpDifference.x;\n            outerPerpVert.y += perpDifference.y;\n            outerPerpVert.z += perpDifference.z;\n            if (normalizePerpendiculars) {\n                GeometryGenerationHelpers_1.GeometryGenerationHelpers.normalizeVectorXY(vert, endVert, normalsLength);\n            }\n            if (i == 0) {\n                this.outerPerpLines.push(new THREE.Line3(vert, endVert));\n            }\n            else {\n                this.innerPerpLines.push(new THREE.Line3(vert, endVert));\n            }\n        } // END for\n    };\n    //   /**\n    //    *\n    //    * @param {Polygon} baseShape\n    //    * @param {Bounds} outlineBounds\n    //    * @param {THREE.Vertex3} outlineVert\n    //    * @param {number} sliceIndex\n    //    * @param {number} heightT A value between 0.0 and 1.0 (inclusive) to indicate the height position.\n    //    * @param {boolean} isBending\n    //    * @param {number=} bendAngle Must not be null, NaN or infinity if `isBending==true`\n    //    * @param {number=} arcRadius\n    //    * @param {boolean=} normalizePerpendiculars\n    //    * @param {number=} normalsLength\n    //    * @return { yMin: number, yMax : number }\n    //    */\n    //   __buildNormals(\n    //     outlineSegmentIndex: number,\n    //     baseShape: Polygon,\n    //     outlineBounds: Bounds,\n    //     outlineVert: Vertex, // THREE.Vector3?\n    //     perpendicularVert: Vertex,\n    //     heightT: number,\n    //     isBending: boolean,\n    //     bendAngle: number,\n    //     arcRadius: number,\n    //     normalizePerpendiculars: boolean,\n    //     normalsLength: number\n    //   ) {\n    //     // var outlineXPct = (outlineBounds.max.x - outlineVert.x) / outlineBounds.width;\n    //     // var halfIndices = [0, Math.floor(baseShape.vertices.length / 2)];\n    //     // for (var j = 0; j < halfIndices.length; j++) {\n    //     //   var i = halfIndices[j];\n    //     //   var shapeVert = baseShape.vertices[i];\n    //     //   if (isBending) {\n    //     //     var vert = new THREE.Vector3(shapeVert.x * outlineXPct, 0, shapeVert.y * outlineXPct);\n    //     //     this._bendVertex(vert, bendAngle, arcRadius, heightT);\n    //     //     vert.y += outlineBounds.max.y;\n    //     //   } else {\n    //     //     var vert = new THREE.Vector3(shapeVert.x * outlineXPct, outlineVert.y, shapeVert.y * outlineXPct);\n    //     //   }\n    //     //   var perpDifference = new THREE.Vector3(outlineVert.x - perpendicularVert.x, outlineVert.y - perpendicularVert.y, 0);\n    //     //   if (i == 0) var endVert = new THREE.Vector3(vert.x - perpendicularVert.x, vert.y + perpendicularVert.y, 0);\n    //     //   else var endVert = new THREE.Vector3(vert.x + perpendicularVert.x, vert.y + perpendicularVert.y, 0);\n    //     //   rotateVert(endVert, bendAngle * heightT, vert.x, vert.y);\n    //     //   var outerPerpVert = vert.clone();\n    //     //   outerPerpVert.x += perpDifference.x;\n    //     //   outerPerpVert.y += perpDifference.y;\n    //     //   outerPerpVert.z += perpDifference.z;\n    //     //   if (normalizePerpendiculars) {\n    //     //     normalizeVectorXY(vert, endVert, normalsLength);\n    //     //   }\n    //     //   if (i == 0) {\n    //     //     this.outerPerpLines.push(new THREE.Line3(vert, endVert));\n    //     //   } else {\n    //     //     this.innerPerpLines.push(new THREE.Line3(vert, endVert));\n    //     //   }\n    //     // } // END for\n    //     var outlineXPct = (outlineBounds.max.x - outlineVert.x) / outlineBounds.width;\n    //     var halfIndices = [0, Math.floor(baseShape.vertices.length / 2)];\n    //     // Just append? Should be growing from 0 to n-1\n    //     this.dildoNormals[outlineSegmentIndex] = [];\n    //     // for (var j = 0; j < halfIndices.length; j++) {\n    //     console.log(\"baseShape.vertices.length\", baseShape.vertices.length);\n    //     for (var i = 0; i < baseShape.vertices.length; i++) {\n    //       //   var i = halfIndices[j];\n    //       var shapeVert = baseShape.vertices[i];\n    //       var perpDifference = new THREE.Vector3(outlineVert.x - perpendicularVert.x, outlineVert.y - perpendicularVert.y, 0);\n    //       normalizeVectorXY(outlineVert, perpDifference, normalsLength);\n    //       rotateVertY(perpDifference, bendAngle * heightT, vert.x, vert.y);\n    //       if (i == 0) {\n    //         console.log(\"perpDifference\", perpDifference);\n    //       }\n    //       if (isBending) {\n    //         var vert = new THREE.Vector3(shapeVert.x * outlineXPct, 0, shapeVert.y * outlineXPct);\n    //         // vert.add(new THREE.Vector3(perpDifference.x, 0, perpDifference.y));\n    //         // vert.sub(perpDifference);\n    //         this._bendVertex(vert, bendAngle, arcRadius, heightT);\n    //         vert.y += outlineBounds.max.y;\n    //       } else {\n    //         var vert = new THREE.Vector3(shapeVert.x * outlineXPct, outlineVert.y, shapeVert.y * outlineXPct);\n    //         // vert.add(new THREE.Vector3(perpDifference.x, perpDifference.y, 0));\n    //         // vert.sub(perpDifference);\n    //       }\n    //       //   var perpDifference = new THREE.Vector3(outlineVert.x - perpendicularVert.x, outlineVert.y - perpendicularVert.y, 0);\n    //       // TODO: check (this is in both cases the same)\n    //       //   if (i == 0) var endVert = new THREE.Vector3(vert.x - perpendicularVert.x, vert.y + perpendicularVert.y, vert.z);\n    //       //   //0);\n    //       //   else var endVert = new THREE.Vector3(vert.x + perpendicularVert.x, vert.y + perpendicularVert.y, vert.z); // 0);\n    //       // var endVert = new THREE.Vector3(vert.x + perpendicularVert.x, vert.y + perpendicularVert.y, vert.z);\n    //       //   rotateVert(endVert, bendAngle * heightT, vert.x, vert.y);\n    //       var outerPerpVert = vert.clone();\n    //       outerPerpVert.x += perpDifference.x;\n    //       outerPerpVert.y += perpDifference.y;\n    //       outerPerpVert.z += perpDifference.z;\n    //       // TODO: re-check\n    //       if (true || normalizePerpendiculars) {\n    //         // normalizeVectorXY(vert, endVert, normalsLength);\n    //         // normalizeVectorXYZ(vert, endVert, normalsLength);\n    //       }\n    //       // Add to cut lines?\n    //       //   if (i == 0) {\n    //       //     this.outerPerpLines.push(new THREE.Line3(vert, endVert));\n    //       //   } else if (i == halfIndices[1]) {\n    //       //     this.innerPerpLines.push(new THREE.Line3(vert, endVert));\n    //       //   }\n    //       // Add to regular normals\n    //       this.dildoNormals[outlineSegmentIndex].push(vert);\n    //       if (i == 0) {\n    //         // console.log(\"endVert\", outerPerpVert);\n    //       }\n    //     } // END for\n    //   }\n    /**\n     * Pre: perpLines are already built.\n     *\n     * Note: the last indices in the array will show to the point equivalent to the bottom point.\n     *\n     * @param {*} options\n     */\n    DildoGeometry.prototype.__makeFlatSideVertices = function (shapeRadius) {\n        // We are using the earcut algorithm later\n        //  + create an outline of the perpendicular end points\n        //  + shift the outline to the left bound of the mesh\n        //  + [LATER] run earcut\n        //  + [LATER] add all triangle faces\n        //  + [LATER] create a copy of the vertices and the triangulation the the right side\n        // Step 1: serialize the 2d vertex data along the perpendicular path\n        // var polygon = new Polygon(this.getPerpendicularPathVertices(true), false);\n        this.flatSidePolygon = new plotboilerplate_1.Polygon(this.getPerpendicularPathVertices(true), false);\n        this.flatSideBounds = this.flatSidePolygon.getBounds();\n        // Step 2: Add the 3d vertices to this geometry (and store positions in left-/rightFlatIndices array)\n        for (var i = 0; i < this.flatSidePolygon.vertices.length; i++) {\n            var nextIndex = this.vertices.length;\n            this.leftFlatIndices.push(nextIndex);\n            this.vertices.push(new THREE.Vector3(this.flatSidePolygon.vertices[i].x, this.flatSidePolygon.vertices[i].y, shapeRadius));\n            if (i === 0 || i + 1 === this.flatSidePolygon.vertices.length || i + 2 === this.flatSidePolygon.vertices.length) {\n                // Keep track of the four corner points (two left, two right)\n                this.hollowBottomEdgeVertIndices.push(nextIndex);\n            }\n        }\n        for (var i = 0; i < this.flatSidePolygon.vertices.length; i++) {\n            var nextIndex = this.vertices.length;\n            this.rightFlatIndices.push(nextIndex);\n            this.vertices.push(new THREE.Vector3(this.flatSidePolygon.vertices[i].x, this.flatSidePolygon.vertices[i].y, -shapeRadius));\n            if (i === 0 || i + 1 === this.flatSidePolygon.vertices.length || i + 2 === this.flatSidePolygon.vertices.length) {\n                // Keep track of the four corner points (two left, two right)\n                this.hollowBottomEdgeVertIndices.push(nextIndex);\n            }\n        }\n    };\n    /**\n     * Pre: perpLines are already built.\n     *\n     * Note: the last indices in the array will show to the point equivalent to the bottom point.\n     *\n     * @param {*}\n     */\n    DildoGeometry.prototype.__makeFlatSideFaces = function () {\n        // We are using the earcut algorithm here\n        //  + [DONE before] create an outline of the perpendicular end points\n        //  + [DONE before] shift the outline to the left bound of the mesh\n        //  + run earcut\n        //  + add all triangle faces\n        //  + create a copy of the vertices and the triangulation the the right side\n        var _self = this;\n        // Array<THREE.Vector3>  (compatible with XYCoords :)\n        var polygonVertices = this.leftFlatIndices.map(function (flatSideIndex) {\n            return _self.vertices[flatSideIndex];\n        });\n        var polygonData = GeometryGenerationHelpers_1.GeometryGenerationHelpers.flattenVert2dArray(polygonVertices);\n        // Step 3: run Earcut\n        var triangleIndices = (0, earcut_typescript_1.earcut)(polygonData);\n        // Step 4: process the earcut result;\n        //         add the retrieved triangles as geometry faces.\n        for (var i = 0; i + 2 < triangleIndices.length; i += 3) {\n            var a = triangleIndices[i];\n            var b = triangleIndices[i + 1];\n            var c = triangleIndices[i + 2];\n            GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeFace3(this, this.leftFlatIndices[a], this.leftFlatIndices[b], this.leftFlatIndices[c]);\n            this.leftFlatTriangleIndices.push([this.leftFlatIndices[a], this.leftFlatIndices[b], this.leftFlatIndices[c]]);\n        }\n        for (var i = 0; i + 2 < triangleIndices.length; i += 3) {\n            var a = triangleIndices[i];\n            var b = triangleIndices[i + 1];\n            var c = triangleIndices[i + 2];\n            GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeFace3(this, this.rightFlatIndices[a], this.rightFlatIndices[c], this.rightFlatIndices[b]);\n            this.rightFlatTriangleIndices.push([this.rightFlatIndices[a], this.rightFlatIndices[b], this.rightFlatIndices[c]]);\n        }\n    };\n    DildoGeometry.prototype.getPerpendicularPathVertices = function (includeBottomVert, getInner) {\n        // Array<XYCoords>\n        var polygonVertices = [];\n        for (var i = 0; i < this.innerPerpLines.length; i++) {\n            polygonVertices.push(getInner ? this.innerPerpLines[i].start : this.innerPerpLines[i].end);\n        }\n        // Reverse the outer path segment (both begin at bottom and meet at the top)\n        for (var i = this.outerPerpLines.length - 1; i >= 0; i--) {\n            polygonVertices.push(getInner ? this.outerPerpLines[i].start : this.outerPerpLines[i].end);\n        }\n        // Also add base point at last index\n        if (includeBottomVert) {\n            polygonVertices.push(this.vertices[this.bottomIndex]);\n        }\n        return polygonVertices;\n    };\n    DildoGeometry.prototype.getPerpendicularHullLines = function () {\n        // Array<XYCoords>\n        var perpLines = [];\n        for (var i = 0; i < this.innerPerpLines.length; i++) {\n            perpLines.push(this.innerPerpLines[i]);\n        }\n        // Reverse the outer path segment (both begin at bottom and meet at the top)\n        for (var i = this.outerPerpLines.length - 1; i >= 0; i--) {\n            perpLines.push(this.outerPerpLines[i]);\n        }\n        return perpLines;\n    };\n    /**\n     * Construct the top vertex that's used to closed the cylinder geometry at the top.\n     *\n     * @param {plotboilerplate.Bounds} outlineBounds\n     * @param {boolean} isBending\n     * @param {number|NaN|undefined} bendAngle\n     * @param {number|undefined} arcRadius\n     * @returns THREE.Vector\n     */\n    DildoGeometry.prototype._getTopVertex = function (outlineBounds, isBending, bendAngle, arcRadius) {\n        if (isBending) {\n            var topPoint = new THREE.Vector3(0, 0, 0);\n            this._bendVertex(topPoint, bendAngle, arcRadius, 1.0);\n            topPoint.y += outlineBounds.max.y;\n            return topPoint;\n        }\n        else {\n            return new THREE.Vector3(0, outlineBounds.min.y, 0);\n        }\n    };\n    /**\n     * Construct the bottom vertex that's used to closed the cylinder geometry at the bottom.\n     *\n     * @param {plotboilerplate.Bounds} outlineBounds\n     * @param {boolean} isBending\n     * @returns THREE.Vector\n     */\n    DildoGeometry.prototype._getBottomVertex = function (outlineBounds) {\n        var bottomPoint = new THREE.Vector3(0, outlineBounds.max.y, 0);\n        // if (isBending) {\n        // No need to bend the bottom point (no effect)\n        // this._bendVertex(bottomPoint, bendAngle, arcRadius, 0.0);\n        // }\n        return bottomPoint;\n    };\n    /**\n     * A helper function to 'bend' a vertex position around the desired bend axis (angle + radius).\n     * @private\n     * @param {} vert\n     * @param {*} bendAngle\n     * @param {*} arcRadius\n     * @param {*} heightT\n     */\n    DildoGeometry.prototype._bendVertex = function (vert, bendAngle, arcRadius, heightT) {\n        var axis = new THREE.Vector3(0, 0, 1);\n        var angle = bendAngle * heightT;\n        // Move slice point along radius, rotate, then move back\n        // (equivalent to rotation around arc center)\n        vert.x -= arcRadius;\n        vert.applyAxisAngle(axis, angle);\n        vert.x += arcRadius;\n    };\n    /**\n     * Rotate a 3d vector around the z axis (back-front-axis).\n     *\n     * @param {THREE.Vector3} vert\n     * @param {THREE.Vector3} angle\n     * @param {number} xCenter\n     * @param {number} yCenter\n     * @returns\n     */\n    //   // TODO: move to helpers\n    //   var rotateVert = function (vert, angle, xCenter, yCenter) {\n    //     var axis = new THREE.Vector3(0, 0, 1);\n    //     vert.x -= xCenter;\n    //     vert.y -= yCenter;\n    //     vert.applyAxisAngle(axis, angle);\n    //     vert.x += xCenter;\n    //     vert.y += yCenter;\n    //     return vert;\n    //   };\n    //   /**\n    //    * Rotate a 3d vector around the y axis (up-down-axis).\n    //    *\n    //    * @param {THREE.Vector3} vert\n    //    * @param {THREE.Vector3} angle\n    //    * @param {number} xCenter\n    //    * @param {number} zCenter\n    //    * @returns\n    //    */\n    //   // TODO: move to helpers\n    //   var rotateVertY = function (vert, angle, xCenter, zCenter) {\n    //     var axis = new THREE.Vector3(0, 1, 0);\n    //     vert.x -= xCenter;\n    //     vert.z -= zCenter;\n    //     vert.applyAxisAngle(axis, angle);\n    //     vert.x += xCenter;\n    //     vert.z += zCenter;\n    //     return vert;\n    //   };\n    //   /**\n    //    * Normalize a 2D vector to a given length.\n    //    *\n    //    * @param {XYCoords} base - The start point.\n    //    * @param {XYCoords} extend - The end point.\n    //    * @param {number} normalLength - The desired length\n    //    */\n    //   var normalizeVectorXY = function (base, extend, normalLength) {\n    //     var diff = { x: extend.x - base.x, y: extend.y - base.y }; // XYCoords\n    //     var length = Math.sqrt(diff.x * diff.x + diff.y * diff.y);\n    //     var ratio = normalLength / length;\n    //     extend.x = base.x + diff.x * ratio;\n    //     extend.y = base.y + diff.y * ratio;\n    //   };\n    // computeVertexNormals() {\n    //   for( var f = 0; f < this.faces.length; f++ ) {\n    //       var face = this.faces[f];\n    //   }\n    // }\n    // TODO\n    DildoGeometry.prototype.applyBumpMap = function (bumpMapTexture) {\n        // Build normals\n        for (var i = 0; i < this.vertexMatrix.length; i++) {\n            for (var j = 0; j < this.vertexMatrix[i].length; j++) {\n                var vertIndex = this.vertexMatrix[i][j];\n                var vertex = this.vertices[vertIndex];\n            }\n        }\n    };\n    /**\n     * Build up the faces for this geometry.\n     * @param {*} options\n     */\n    // DildoGeometry.prototype._buildFaces = function (options) {\n    DildoGeometry.prototype._buildFaces = function (options) {\n        var baseShape = options.baseShape;\n        var outlineSegmentCount = options.outlineSegmentCount;\n        var closeTop = Boolean(options.closeTop);\n        var closeBottom = Boolean(options.closeBottom);\n        var makeHollow = Boolean(options.makeHollow);\n        var baseShapeSegmentCount = baseShape.vertices.length;\n        this.faceVertexUvs[0] = [];\n        for (var s = 0; s < outlineSegmentCount; s++) {\n            for (var i = 0; i < baseShapeSegmentCount; i++) {\n                if (s > 0) {\n                    if (i > 0) {\n                        this.addFace4ByIndices(s, i - 1, s - 1, i, makeHollow);\n                        if (i + 1 == baseShape.vertices.length) {\n                            // Close the gap on the shape\n                            this.addFace4ByIndices(s, i, s - 1, 0, makeHollow);\n                        }\n                    }\n                }\n            } // END for\n        } // END for\n        if (makeHollow) {\n            this.__makeFlatSideFaces();\n            this.__makeBackFrontFaces();\n        }\n        if (closeBottom) {\n            if (makeHollow)\n                this._buildHollowBottomFaces();\n            else\n                this._buildEndFaces(this.bottomIndex, 0, baseShapeSegmentCount, false);\n        }\n        if (closeTop) {\n            this._buildEndFaces(this.topIndex, this.vertexMatrix.length - 1, baseShapeSegmentCount, makeHollow);\n        }\n    };\n    DildoGeometry.prototype._buildHollowBottomFaces = function () {\n        var _self = this;\n        var edgeVertices = this.hollowBottomEdgeVertIndices.map(function (edgeVertIndex) {\n            return _self.vertices[edgeVertIndex];\n        });\n        var findClosestEdgeIndex = function (vert) {\n            // THREE.Vector\n            var index = 0;\n            var distance = Number.MAX_VALUE;\n            var tmpDist;\n            for (var i = 0; i < edgeVertices.length; i++) {\n                var tmpIndex = _self.hollowBottomEdgeVertIndices[i];\n                if ((tmpDist = edgeVertices[i].distanceTo(vert)) < distance) {\n                    index = tmpIndex;\n                    distance = tmpDist;\n                }\n            }\n            return index;\n        };\n        // 'Last index' starts at last point at all : )\n        var n = this.vertexMatrix[0].length;\n        var lastIndex = findClosestEdgeIndex(this.vertices[n - 1]);\n        var triangleIndices; // = []; // [number,number,number]\n        // Use first slice (at bottom position)\n        for (var i = 0; i < n; i++) {\n            var curIndex = findClosestEdgeIndex(this.vertices[this.vertexMatrix[0][i]]);\n            // Close gap to last (different shell index)\n            triangleIndices = [lastIndex, this.vertexMatrix[0][i == 0 ? n - 1 : i - 1], this.vertexMatrix[0][i]];\n            this.faces.push(new THREE.Face3(triangleIndices[0], triangleIndices[1], triangleIndices[2])); // Same?\n            this.hollowBottomTriagles.push(triangleIndices);\n            if (lastIndex !== curIndex) {\n                // Add normal triangle to same shell index\n                triangleIndices = [curIndex, lastIndex, this.vertexMatrix[0][i]];\n                this.faces.push(new THREE.Face3(triangleIndices[0], triangleIndices[1], triangleIndices[2]));\n                this.hollowBottomTriagles.push(triangleIndices);\n            }\n            lastIndex = curIndex;\n        }\n    };\n    /**\n     * Build the face and the top or bottom end of the geometry. Imagine the dildo geometry\n     * as a closed cylinder: this function created the top or the bottom 'circle'.\n     *\n     * @param {number} endVertexIndex - This should be `this.topIndex` or `this.bottomIndex`.\n     * @param {number} shapeIndex - This should be `0` (top) or `outlineSegmentCount-1` (bottom).\n     * @param {number} baseShapeSegmentCount - The number of shape segments.\n     * @param {boolean=false} inverseFaceDirection - If true then the face will have left winding order (instead of right which is the default).\n     */\n    DildoGeometry.prototype._buildEndFaces = function (endVertexIndex, shapeIndex, baseShapeSegmentCount, inverseFaceDirection) {\n        // Close at top.\n        for (var i = 1; i < baseShapeSegmentCount; i++) {\n            GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeFace3(this, this.vertexMatrix[shapeIndex][i - 1], endVertexIndex, this.vertexMatrix[shapeIndex][i], inverseFaceDirection);\n            if (i + 1 == baseShapeSegmentCount) {\n                GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeFace3(this, this.vertexMatrix[shapeIndex][i], endVertexIndex, this.vertexMatrix[shapeIndex][0], inverseFaceDirection);\n            }\n        }\n    };\n    /**\n     * Pre: flatSides are made\n     *\n     * @param {*} options\n     */\n    DildoGeometry.prototype.__makeBackFrontFaces = function () {\n        // Connect left and right side (important: ignore bottom vertex at last index)\n        for (var i = 1; i + 1 < this.flatSidePolygon.vertices.length; i++) {\n            GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeFace4(this, this.leftFlatIndices[i], this.leftFlatIndices[i - 1], this.rightFlatIndices[i], this.rightFlatIndices[i - 1]);\n        }\n    };\n    /**\n     * Build the texture UV mapping for all faces.\n     *\n     * @param {Polygon} options.baseShape\n     * @param {number} options.outlineSegmentCount\n     * @param {number} options.vertices.length\n     */\n    // DildoGeometry.prototype._buildUVMapping = function (options) {\n    DildoGeometry.prototype._buildUVMapping = function (options) {\n        var baseShape = options.baseShape;\n        var outlineSegmentCount = options.outlineSegmentCount;\n        var baseShapeSegmentCount = baseShape.vertices.length;\n        var closeTop = Boolean(options.closeTop);\n        var closeBottom = Boolean(options.closeBottom);\n        var makeHollow = Boolean(options.makeHollow);\n        // https://stackoverflow.com/questions/20774648/three-js-generate-uv-coordinate\n        for (var s = 1; s < outlineSegmentCount; s++) {\n            for (var i = 1; i < baseShape.vertices.length; i++) {\n                GeometryGenerationHelpers_1.GeometryGenerationHelpers.addCylindricUV4(this, s, i - 1, s - 1, i, outlineSegmentCount, baseShapeSegmentCount, makeHollow);\n                if (i + 1 == baseShape.vertices.length) {\n                    // Close the gap on the shape\n                    GeometryGenerationHelpers_1.GeometryGenerationHelpers.addCylindricUV4(this, s, i - 1, s - 1, i, outlineSegmentCount, baseShapeSegmentCount, makeHollow);\n                }\n            }\n        }\n        if (makeHollow) {\n            // Make flat side UVS (left)\n            // Note: left flat side and right flat side have the same number of polygon vertices\n            for (var i = 0; i < this.leftFlatTriangleIndices.length; i++) {\n                var leftA = this.leftFlatTriangleIndices[i][0];\n                var leftB = this.leftFlatTriangleIndices[i][1];\n                var leftC = this.leftFlatTriangleIndices[i][2];\n                UVHelpers_1.UVHelpers.makeFlatTriangleUVs(this, this.flatSideBounds, leftA, leftB, leftC);\n            }\n            // Make flat side UVS (right)\n            for (var i = 0; i < this.rightFlatTriangleIndices.length; i++) {\n                // NOTE: as the triangles are computed on the left flat side -> for the right side\n                //          change the winding order!!!\n                var rightA = this.rightFlatTriangleIndices[i][0];\n                var rightB = this.rightFlatTriangleIndices[i][2];\n                var rightC = this.rightFlatTriangleIndices[i][1];\n                UVHelpers_1.UVHelpers.makeFlatTriangleUVs(this, this.flatSideBounds, rightA, rightB, rightC);\n            }\n            // TODO: add these as function\n            for (var i = 1; i + 1 < this.flatSidePolygon.vertices.length; i++) {\n                var ratioI = (i - 1) / (this.flatSidePolygon.vertices.length - 1);\n                var ratioJ = i / (this.flatSidePolygon.vertices.length - 1);\n                this.faceVertexUvs[0].push([\n                    new THREE.Vector2(0.0, ratioJ),\n                    new THREE.Vector2(0.0, ratioI),\n                    new THREE.Vector2(1.0, ratioJ)\n                ]);\n                this.faceVertexUvs[0].push([\n                    new THREE.Vector2(0.0, ratioI),\n                    new THREE.Vector2(1.0, ratioI),\n                    new THREE.Vector2(1.0, ratioJ)\n                ]);\n            }\n        } // END if[makeHollow]\n        // Build UV mapping for the bottom (base)\n        if (closeBottom) {\n            if (makeHollow) {\n                makeHollowBottomUVs(this, this.hollowBottomEdgeVertIndices, this.hollowBottomTriagles);\n            }\n            else {\n                for (var i = 1; i < baseShapeSegmentCount; i++) {\n                    GeometryGenerationHelpers_1.GeometryGenerationHelpers.addPyramidalBaseUV3(this, i - 1, baseShapeSegmentCount);\n                    if (i + 1 == baseShapeSegmentCount) {\n                        // Close the gap on the shape\n                        GeometryGenerationHelpers_1.GeometryGenerationHelpers.addPyramidalBaseUV3(this, i - 1, baseShapeSegmentCount);\n                    }\n                }\n            }\n        }\n        // Build UV mapping for the top (closing element)\n        if (closeTop) {\n            var lastIndex = outlineSegmentCount - 1;\n            for (var i = 1; i < baseShapeSegmentCount; i++) {\n                GeometryGenerationHelpers_1.GeometryGenerationHelpers.addPyramidalBaseUV3(this, i - 1, baseShapeSegmentCount);\n                if (i + 1 == baseShapeSegmentCount) {\n                    // Close the gap on the shape\n                    GeometryGenerationHelpers_1.GeometryGenerationHelpers.addPyramidalBaseUV3(this, lastIndex, baseShapeSegmentCount);\n                }\n            }\n        }\n        this.uvsNeedUpdate = true;\n    };\n    /**\n     * Build a triangulated face4 (two face3) for the given matrix index pairs. The method will create\n     * two right-turning triangles.\n     *\n     * <pre>\n     *       (a,b)---(c,b)\n     *         |    /  |\n     *         |   /   |\n     *         |  /    |\n     *       (a,d)---(c,d)\n     * </pre>\n     *\n     * @param {number} a - The first primary index in the `vertexMatrix` array.\n     * @param {number} b - The first seconday index in the `vertexMatrix[a]` array.\n     * @param {number} c - The second primary index in the `vertexMatrix` array.\n     * @param {number} d - The second seconday index in the `vertexMatrix[c]` array.\n     * @param {boolean=false} inverseFaceDirection - If true then the face will have left winding order (instead of right which is the default).\n     */\n    DildoGeometry.prototype.addFace4ByIndices = function (a, b, c, d, inverseFaceDirection) {\n        GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeFace4(this, this.vertexMatrix[a][b], this.vertexMatrix[c][b], this.vertexMatrix[a][d], this.vertexMatrix[c][d], inverseFaceDirection);\n    };\n    /**\n     * Build up the vertices in this geometry.\n     *\n     * @param {} options\n     */\n    DildoGeometry.prototype._buildVertices = function (options) {\n        var baseShape = options.baseShape;\n        var outline = options.outline;\n        var outlineSegmentCount = options.outlineSegmentCount;\n        var makeHollow = Boolean(options.makeHollow);\n        var bendAngleRad = (options.bendAngle / 180) * Math.PI;\n        var hollowStrengthX = options.hollowStrengthX; // default=15.0? // TODO: hollow strength as param\n        var twistAngle = options.twistAngle * DEG_TO_RAD;\n        var normalizePerpendiculars = Boolean(options.normalizePerpendiculars);\n        var normalsLength = typeof options.normalsLength !== \"undefined\" ? options.normalsLength : 10.0;\n        var outlineBounds = outline.getBounds();\n        var shapeHeight = outlineBounds.height;\n        var shapeBounds = baseShape.getBounds();\n        var shapeCenter = shapeBounds.getCenter();\n        var arcLength = shapeHeight;\n        var arcRadius = arcLength / bendAngleRad;\n        var isBending = options.isBending &&\n            !isNaN(arcRadius) &&\n            arcRadius !== Number.POSITIVE_INFINITY &&\n            arcRadius !== Number.NEGATIVE_INFINITY &&\n            Math.abs(bendAngleRad) > 0.01;\n        for (var s = 0; s < outlineSegmentCount; s++) {\n            var t = Math.min(1.0, Math.max(0.0, s / (outlineSegmentCount - 1)));\n            this.vertexMatrix[s] = [];\n            var outlineVert = outline.getPointAt(t);\n            var perpendicularVert = outline.getPerpendicularAt(t);\n            var heightT = (outlineBounds.max.y - outlineVert.y) / shapeHeight;\n            var outlineT = s / (outlineSegmentCount - 1);\n            this.__buildSlice(baseShape, outlineBounds, outlineVert, s, heightT, isBending, bendAngleRad, arcRadius, twistAngle * outlineT);\n            this.__buildSpine(shapeCenter, outlineBounds, outlineVert, heightT, isBending, bendAngleRad, arcRadius);\n            this.__buildPerps(baseShape, outlineBounds, outlineVert, perpendicularVert, heightT, isBending, bendAngleRad, arcRadius, normalizePerpendiculars, normalsLength);\n            // this.__buildNormals(\n            //   s,\n            //   baseShape,\n            //   outlineBounds,\n            //   outlineVert,\n            //   perpendicularVert,\n            //   heightT,\n            //   isBending,\n            //   bendAngleRad,\n            //   arcRadius,\n            //   normalizePerpendiculars,\n            //   normalsLength\n            // );\n        } // END for\n        var topVertex = this._getTopVertex(outlineBounds, isBending, bendAngleRad, arcRadius);\n        var bottomVertex = this._getBottomVertex(outlineBounds);\n        this.topIndex = this.vertices.length;\n        this.vertices.push(topVertex);\n        this.bottomIndex = this.vertices.length;\n        this.vertices.push(bottomVertex);\n        if (makeHollow) {\n            // Construct the left and the right flat bounds (used to make a casting mould)\n            this.__makeFlatSideVertices(Math.max(shapeBounds.width, shapeBounds.height) / 2.0 + hollowStrengthX);\n        }\n    };\n    DildoGeometry.prototype.__applyBumpmap = function (bumpmapTexture) {\n        var tmp = this;\n        for (var i = 0; i < this.vertexMatrix.length; i++) {\n            for (var j = 0; j < this.vertexMatrix[i].length; j++) {\n                // apply local bump map\n                // const normal = tmp.\n            }\n        }\n    };\n    return DildoGeometry;\n}(DildoBaseClass)); // END class\nexports.DildoGeometry = DildoGeometry;\n// TODO: move to helpers\nvar rotateVert = function (vert, angle, xCenter, yCenter) {\n    var axis = new THREE.Vector3(0, 0, 1);\n    vert.x -= xCenter;\n    vert.y -= yCenter;\n    vert.applyAxisAngle(axis, angle);\n    vert.x += xCenter;\n    vert.y += yCenter;\n    return vert;\n};\n/**\n * Rotate a 3d vector around the y axis (up-down-axis).\n *\n * @param {THREE.Vector3} vert\n * @param {THREE.Vector3} angle\n * @param {number} xCenter\n * @param {number} zCenter\n * @returns\n */\n// TODO: move to helpers\nvar rotateVertY = function (vert, angle, xCenter, zCenter) {\n    var axis = new THREE.Vector3(0, 1, 0);\n    vert.x -= xCenter;\n    vert.z -= zCenter;\n    vert.applyAxisAngle(axis, angle);\n    vert.x += xCenter;\n    vert.z += zCenter;\n    return vert;\n};\n// /**\n//  * Normalize a 2D vector to a given length.\n//  *\n//  * @param {XYCoords} base - The start point.\n//  * @param {XYCoords} extend - The end point.\n//  * @param {number} normalLength - The desired length\n//  */\n// // TODO: add types\n// var normalizeVectorXY = function (base, extend, normalLength) {\n//   var diff = { x: extend.x - base.x, y: extend.y - base.y }; // XYCoords\n//   var length = Math.sqrt(diff.x * diff.x + diff.y * diff.y);\n//   var ratio = normalLength / length;\n//   extend.x = base.x + diff.x * ratio;\n//   extend.y = base.y + diff.y * ratio;\n// };\n/**\n * Normalize a 2D vector to a given length.\n *\n * @param {THREE.Vector3} base - The start point.\n * @param {THREE.Vector3} extend - The end point.\n * @param {number} normalLength - The desired length\n */\n// TOTO: add types\nvar normalizeVectorXYZ = function (base, extend, normalLength) {\n    var diff = { x: extend.x - base.x, y: extend.y - base.y, z: extend.z - base.z };\n    var length = Math.sqrt(diff.x * diff.x + diff.y * diff.y + diff.z * diff.z);\n    var ratio = normalLength / length;\n    extend.x = base.x + diff.x * ratio;\n    extend.y = base.y + diff.y * ratio;\n    extend.z = base.z + diff.z * ratio;\n};\n/**\n *\n * @param {THREE.Geometry} thisGeometry\n * @param {Array<number>} containingPolygonIndices\n * @param {Array<[number,number,number]>} triangles\n */\nvar makeHollowBottomUVs = function (thisGeometry, containingPolygonIndices, triangles) {\n    // Compute polyon bounds\n    var polygonBounds = plotboilerplate_1.Bounds.computeFromVertices(containingPolygonIndices.map(function (vertIndex) {\n        return new plotboilerplate_1.Vertex(thisGeometry.vertices[vertIndex].x, thisGeometry.vertices[vertIndex].z);\n    }));\n    var getUVRatios = function (vert) {\n        // console.log((vert.x - shapeBounds.min.x) / shapeBounds.width, (vert.y - shapeBounds.min.y) / shapeBounds.height);\n        return new THREE.Vector2((vert.x - polygonBounds.min.x) / polygonBounds.width, (vert.z - polygonBounds.min.y) / polygonBounds.height);\n    };\n    // ON the x-z-plane {x, *, z}\n    for (var t = 0; t < triangles.length; t++) {\n        var vertA = thisGeometry.vertices[triangles[t][0]];\n        var vertB = thisGeometry.vertices[triangles[t][1]];\n        var vertC = thisGeometry.vertices[triangles[t][2]];\n        thisGeometry.faceVertexUvs[0].push([getUVRatios(vertA), getUVRatios(vertB), getUVRatios(vertC)]);\n    }\n};\n//# sourceMappingURL=DildoGeometry.js.map","\"use strict\";\n/**\n * A collection of materials and material making functions.\n *\n * @require THREE\n *\n * @author Ikaros Kappler\n * @date 2021-07-02\n * @modified 2021-08-04 Ported to Typescript from vanilla JS.\n * @version 1.0.1\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DildoMaterials = void 0;\nvar THREE = require(\"three\");\nexports.DildoMaterials = (function () {\n    /**\n     * Map<string,texture>\n     */\n    var textureStore = new Map();\n    var DildoMaterials = {\n        /**\n         * Create a new mesh material from the given parameters.\n         *\n         * @param {boolean} useTextureImage - Load and use the given texture (at `textureImagePath`) if set to true.\n         * @param {boolean} wireframe - Create a wireframe material if true.\n         * @param {string} textureImagePath - The texture path to use (if useTextureImage is set to true).\n         * @param {THREE.DoubleSide|THREE.FrontSide|THREE.Backside} doubleSingleSide - Wether to display one one or both face sides.\n         * @returns\n         */\n        createMainMaterial: function (useTextureImage, wireframe, textureImagePath, doubleSingleSide) {\n            return useTextureImage\n                ? new THREE.MeshLambertMaterial({\n                    color: 0xffffff,\n                    wireframe: wireframe,\n                    //   flatShading: false,\n                    depthTest: true,\n                    opacity: 1.0,\n                    // side: THREE.DoubleSide,\n                    side: doubleSingleSide,\n                    visible: true,\n                    emissive: 0x0,\n                    reflectivity: 1.0,\n                    refractionRatio: 0.89,\n                    map: DildoMaterials.loadTextureImage(textureImagePath)\n                })\n                : new THREE.MeshPhongMaterial({\n                    color: 0x3838ff,\n                    wireframe: wireframe,\n                    flatShading: false,\n                    depthTest: true,\n                    opacity: 1.0,\n                    // side: THREE.DoubleSide,\n                    side: doubleSingleSide,\n                    visible: true,\n                    emissive: 0x0,\n                    reflectivity: 1.0,\n                    refractionRatio: 0.89,\n                    map: null\n                });\n        },\n        createSliceMaterial: function (useTextureImage, wireframe, textureImagePath) {\n            if (wireframe) {\n                return new THREE.MeshBasicMaterial({ wireframe: true });\n                // return new THREE.MeshStandardMaterial({ wireframe: true });\n            }\n            else {\n                return new THREE.MeshLambertMaterial({\n                    color: useTextureImage ? 0x888888 : 0xa1848a8,\n                    wireframe: false,\n                    // flatShading: false,\n                    depthTest: true,\n                    opacity: 1.0,\n                    side: THREE.DoubleSide,\n                    // side: doubleSingleSide,\n                    visible: true,\n                    emissive: 0x0,\n                    reflectivity: 1.0,\n                    refractionRatio: 0.89,\n                    map: useTextureImage ? DildoMaterials.loadTextureImage(textureImagePath) : null,\n                    vertexColors: false\n                });\n            }\n        },\n        /**\n         * Load a texture or get it from the internal buffer if it was already loaded before.\n         *\n         * @param {string} path - The path (absolute or relative) to the texture image to load.\n         * @returns {THREE.Texture}\n         */\n        loadTextureImage: function (path) {\n            var texture = textureStore.get(path);\n            if (!texture) {\n                // TODO: use a singleton here?\n                var loader = new THREE.TextureLoader();\n                texture = loader.load(path);\n                textureStore.set(path, texture);\n            }\n            return texture;\n        }\n    };\n    return DildoMaterials;\n})();\n//# sourceMappingURL=DildoMaterials.js.map","\"use strict\";\n/**\n * A collection of helper function used to generate dildo meshes.\n *\n * @require sliceGeometry\n *\n * @author   Ikaros Kappler\n * @date     2021-06-30\n * @modified 2021-08-29 Ported to Typescript from vanilla JS.\n * @version  0.0.1-alpha\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GeometryGenerationHelpers = void 0;\nvar THREE = require(\"three\");\n// import { earcut } from \"./thirdparty-ported/earcut\"; // TODO: fix earcut types, convert to custum library\nvar earcut_typescript_1 = require(\"earcut-typescript\");\nvar plotboilerplate_1 = require(\"plotboilerplate\");\n// import { sliceGeometry } from \"./thirdparty-ported/threejs-slice-geometry\"; // TODO: convert to custom library\nvar threejs_slice_geometry_typescript_1 = require(\"threejs-slice-geometry-typescript\"); // TODO: convert to custom library\nvar PlaneMeshIntersection_1 = require(\"./PlaneMeshIntersection\");\nvar clearDuplicateVertices3_1 = require(\"./clearDuplicateVertices3\");\nvar UVHelpers_1 = require(\"./UVHelpers\");\nvar constants_1 = require(\"./constants\");\nexports.GeometryGenerationHelpers = {\n    /**\n     * Create a (right-turning) triangle of the three vertices at index A, B and C.\n     *\n     * The default direction (right) can be changed to left to pass `invsereFaceDirection=true`.\n     *\n     * @param {THREE.Geometry} geometry - The geometry to add the face to.\n     * @param {number} vertIndexA\n     * @param {number} vertIndexB\n     * @param {number} vertIndexC\n     * @param {boolean=false} inverseFaceDirection - If true then the face will have left winding order (instead of right which is the default).\n     */\n    makeFace3: function (geometry, vertIndexA, vertIndexB, vertIndexC, inverseFaceDirection) {\n        if (inverseFaceDirection) {\n            geometry.faces.push(new THREE.Face3(vertIndexC, vertIndexB, vertIndexA));\n        }\n        else {\n            geometry.faces.push(new THREE.Face3(vertIndexA, vertIndexB, vertIndexC));\n        }\n    },\n    /**\n     * Build a triangulated face4 (two face3) for the given vertex indices. The method will create\n     * two right-turning triangles by default, or two left-turning triangles if `inverseFaceDirection`.\n     *\n     * <pre>\n     *         A-----B\n     *         |   / |\n     *         |  /  |\n     *         | /   |\n     *         C-----D\n     * </pre>\n     *\n     * @param {THREE.Geometry} geometry - The geometry to add the face to.\n     * @param {number} vertIndexA - The first vertex index.\n     * @param {number} vertIndexB - The second vertex index.\n     * @param {number} vertIndexC - The third vertex index.\n     * @param {number} vertIndexD - The fourth vertex index.\n     * @param {boolean=false} inverseFaceDirection - If true then the face will have left winding order (instead of right which is the default).\n     */\n    makeFace4: function (geometry, vertIndexA, vertIndexB, vertIndexC, vertIndexD, inverseFaceDirection) {\n        if (inverseFaceDirection) {\n            // Just inverse the winding order of both face3 elements\n            exports.GeometryGenerationHelpers.makeFace3(geometry, vertIndexA, vertIndexC, vertIndexB, false);\n            exports.GeometryGenerationHelpers.makeFace3(geometry, vertIndexC, vertIndexD, vertIndexB, false);\n        }\n        else {\n            exports.GeometryGenerationHelpers.makeFace3(geometry, vertIndexA, vertIndexB, vertIndexC, false);\n            exports.GeometryGenerationHelpers.makeFace3(geometry, vertIndexB, vertIndexD, vertIndexC, false);\n        }\n    },\n    /**\n     * Create texture UV coordinates for the rectangular two  triangles at matrix indices a, b, c and d.\n     *\n     * @param {THREE.Geometry} geometry - The geometry to add the face to.\n     * @param {number} a - The first face-4 vertex index.\n     * @param {number} b - The second face-4 vertex index.\n     * @param {number} c - The third face-4 vertex index.\n     * @param {number} d - The fourth face-4 vertex index.\n     * @param {number} outlineSegmentCount - The total number of segments on the outline.\n     * @param {number} baseShapeSegmentCount - The total number of segments on the base shape.\n     * @param {boolean=false} inverseFaceDirection - If true then the UV mapping is applied in left winding order (instead of right which is the default).\n     */\n    addCylindricUV4: function (geometry, a, b, c, d, outlineSegmentCount, baseShapeSegmentCount, inverseFaceDirection) {\n        if (inverseFaceDirection) {\n            // change: abc -> acb\n            // change: bdc -> cdb\n            geometry.faceVertexUvs[0].push([\n                new THREE.Vector2(a / outlineSegmentCount, b / baseShapeSegmentCount),\n                new THREE.Vector2(a / outlineSegmentCount, d / baseShapeSegmentCount),\n                new THREE.Vector2(c / outlineSegmentCount, b / baseShapeSegmentCount)\n            ]);\n            geometry.faceVertexUvs[0].push([\n                new THREE.Vector2(a / outlineSegmentCount, d / baseShapeSegmentCount),\n                new THREE.Vector2(c / outlineSegmentCount, d / baseShapeSegmentCount),\n                new THREE.Vector2(c / outlineSegmentCount, b / baseShapeSegmentCount)\n            ]);\n        }\n        else {\n            geometry.faceVertexUvs[0].push([\n                new THREE.Vector2(a / outlineSegmentCount, b / baseShapeSegmentCount),\n                new THREE.Vector2(c / outlineSegmentCount, b / baseShapeSegmentCount),\n                new THREE.Vector2(a / outlineSegmentCount, d / baseShapeSegmentCount)\n            ]);\n            geometry.faceVertexUvs[0].push([\n                new THREE.Vector2(c / outlineSegmentCount, b / baseShapeSegmentCount),\n                new THREE.Vector2(c / outlineSegmentCount, d / baseShapeSegmentCount),\n                new THREE.Vector2(a / outlineSegmentCount, d / baseShapeSegmentCount)\n            ]);\n        }\n    },\n    /**\n     * Create texture UV coordinates for the triangle at matrix indices a, b and c.\n     *\n     * @param {THREE.Geometry} geometry - The geometry to add the new faces to.\n     * @param {number} a - The current base shape segment index, must be inside [0,baseShapeSegmentCount-1].\n     * @param {number} baseShapeSegmentCount - The total number of base shape segments.\n     */\n    addPyramidalBaseUV3: function (geometry, a, baseShapeSegmentCount) {\n        // Create a mirrored texture to avoid hard visual cuts\n        var ratioA = 1.0 - Math.abs(0.5 - a / baseShapeSegmentCount) * 2;\n        var ratioB = 1.0 - Math.abs(0.5 - (a + 1) / baseShapeSegmentCount) * 2;\n        geometry.faceVertexUvs[0].push([new THREE.Vector2(ratioA, 0), new THREE.Vector2(0.5, 1), new THREE.Vector2(ratioB, 0)]);\n    },\n    /**\n     * Flatten an array of 2d vertices into a flat array of coordinates.\n     * (required by the earcut algorithm for example).\n     *\n     * @param {Array<XYCoords>} vertices2d\n     * @returns {Array<number>}\n     */\n    flattenVert2dArray: function (vertices2d) {\n        // Array<number>\n        var coordinates = [];\n        for (var i = 0; i < vertices2d.length; i++) {\n            coordinates.push(vertices2d[i].x, vertices2d[i].y);\n        }\n        return coordinates;\n    },\n    /**\n     * A helper function to create (discrete) circular 2d shapes.\n     *\n     * @param {number} radius - The radius of the circle.\n     * @param {number} pointCount - The number of vertices to construct the circle with.\n     * @param {number=1.0} excentricity - To create ellipses (default is 1.0).\n     * @returns {Polygon}\n     */\n    mkCircularPolygon: function (radius, pointCount, excentricity) {\n        if (typeof excentricity === \"undefined\") {\n            excentricity = 1.0;\n        }\n        var vertices = [];\n        var phi;\n        for (var i = 0; i < pointCount; i++) {\n            phi = Math.PI * 2 * (i / pointCount);\n            vertices.push(new plotboilerplate_1.Vertex(Math.cos(phi) * radius * excentricity, Math.sin(phi) * radius));\n        }\n        return new plotboilerplate_1.Polygon(vertices, false);\n    },\n    /**\n     * Slice a geometry at the given plane and add the remaining part(s).\n     *\n     * Note that only the right half (on the positive z axis) is kept. To obtain both you\n     * need to run the algorithm twice with two flipped planes.\n     *\n     * Note also that the mesh is open at the cut plane.\n     *\n     * @param {THREE.Geometry} unbufferedGeometry - The geometry to slice.\n     * @param {THREE.Plane} plane PlaneGeometry???\n     * @return {THREE.Geometry}\n     */\n    makeSlice: function (unbufferedGeometry, plane) {\n        // Slice mesh into two\n        // See https://github.com/tdhooper/threejs-slice-geometry\n        var closeHoles = false; // This might be configurable in a later version.\n        // TODO: cc\n        // var sliceMaterial = DildoMaterials.createSliceMaterial(wireframe);\n        // var slicedGeometry = sliceGeometry(unbufferedGeometry, plane, closeHoles);\n        var slicedGeometry = (0, threejs_slice_geometry_typescript_1.sliceGeometry)(unbufferedGeometry, plane, closeHoles);\n        // Now note that it's possible that the result might contain multiple vertices\n        // at the same position, which makes further calculations quite difficult.\n        // -> Merge multiple vertices into one\n        slicedGeometry.mergeVertices();\n        // And don't forget to compute the normals.\n        slicedGeometry.computeFaceNormals();\n        // var slicedMesh = new THREE.Mesh(slicedGeometry, sliceMaterial);\n        // var slicedMesh = new THREE.Mesh(new THREE.BufferGeometry().fromGeometry(slicedGeometry), sliceMaterial);\n        //   slicedMesh.position.y = -100;\n        //   slicedMesh.position.z = zOffset;\n        //   slicedMesh.userData[\"isExportable\"] = true;\n        //   thisGenerator.addMesh(slicedMesh);\n        return slicedGeometry;\n    },\n    /**\n     * This function creates the cut intersection elements to fill the (open) slice meshes.\n     *\n     * @param {DildoGeneration} thisGenerator\n     * @param {THREE.Mesh} mesh\n     * @param {IDildoGeometry} unbufferedGeometry\n     * @param {THREE.Plane} planeGeometry\n     * @returns\n     */\n    makeAndAddPlaneIntersection: function (thisGenerator, mesh, unbufferedGeometry, // THREE.Geometry,\n    planeGeometry, // THREE.Plane, // THREE.PlaneGeometry, // THREE.Plane ???\n    planeGeometryReal, \n    // TODO: use a proper global interface here\n    options // { showSplitShape?: boolean }\n    ) {\n        // Find the cut path\n        var planeMeshIntersection = new PlaneMeshIntersection_1.PlaneMeshIntersection();\n        // Array<THREE.Vector3>  (compatible with XYCoords :)\n        var intersectionPoints = planeMeshIntersection.getIntersectionPoints(mesh, unbufferedGeometry, planeGeometry, planeGeometryReal);\n        var EPS = 0.000001;\n        var uniqueIntersectionPoints = (0, clearDuplicateVertices3_1.clearDuplicateVertices3)(intersectionPoints, EPS);\n        var pointGeometry = new THREE.Geometry();\n        pointGeometry.vertices = uniqueIntersectionPoints;\n        var pointsMaterial = new THREE.PointsMaterial({\n            size: 1.4,\n            color: 0x00ffff\n        });\n        var pointsMesh = new THREE.Points(pointGeometry, pointsMaterial);\n        if (options.showSplitShape) {\n            pointsMesh.position.y = -100;\n            pointsMesh.position.z = -50;\n            thisGenerator.addMesh(pointsMesh);\n        }\n        // TODO: convert point set to path\n        // Test: make a triangulation to see what the path looks like\n        var polygonData = exports.GeometryGenerationHelpers.flattenVert2dArray(uniqueIntersectionPoints);\n        // Run Earcut\n        var triangleIndices = (0, earcut_typescript_1.earcut)(polygonData);\n        // Process the earcut result;\n        //         add the retrieved triangles as geometry faces.\n        var triangleGeometry = new THREE.Geometry();\n        for (var i = 0; i < uniqueIntersectionPoints.length; i++) {\n            triangleGeometry.vertices.push(uniqueIntersectionPoints[i].clone());\n        }\n        for (var i = 0; i + 2 < triangleIndices.length; i += 3) {\n            var a = triangleIndices[i];\n            var b = triangleIndices[i + 1];\n            var c = triangleIndices[i + 2];\n            exports.GeometryGenerationHelpers.makeFace3(triangleGeometry, a, b, c);\n        }\n        if (options.addRawIntersectionTriangleMesh) {\n            // This is more a quick experimental preview feature.\n            // The data is often faulty and too unprecise.\n            var triangleMesh = new THREE.Mesh(triangleGeometry, new THREE.LineBasicMaterial({\n                color: 0xff8800\n            }));\n            triangleMesh.position.y = -100;\n            triangleMesh.position.z = -50;\n            thisGenerator.addMesh(triangleMesh);\n        }\n        // Make the actual models\n        // CURRENTLY NOT IN USE. THE UNDERLYING MODEL IS A NON-TWISTED ONE.\n        if (options.addPrecalculatedMassiveFaces) {\n            exports.GeometryGenerationHelpers.makeAndAddMassivePlaneIntersection(thisGenerator, unbufferedGeometry);\n        }\n        if (options.addPrecalculatedHollowFaces) {\n            exports.GeometryGenerationHelpers.makeAndAddHollowPlaneIntersection(thisGenerator, unbufferedGeometry);\n        }\n        return uniqueIntersectionPoints;\n    },\n    // CURRENTLY NOT REALLY IN USE. THE UNDERLYING MODEL IS A NON-TWISTED ONE.\n    makeAndAddMassivePlaneIntersection: function (thisGenerator, unbufferedGeometry) {\n        var intersectionPoints = unbufferedGeometry.getPerpendicularPathVertices(true, true); // includeBottom=true, getInner=true\n        var pointGeometry = new THREE.Geometry();\n        pointGeometry.vertices = intersectionPoints;\n        var pointsMaterial = new THREE.MeshBasicMaterial({\n            wireframe: false,\n            color: 0xff0000,\n            opacity: 0.5,\n            side: THREE.DoubleSide,\n            transparent: true\n        });\n        // Array<number,number,number,...>\n        var polygonData = exports.GeometryGenerationHelpers.flattenVert2dArray(intersectionPoints);\n        // Step 3: run Earcut\n        var triangleIndices = (0, earcut_typescript_1.earcut)(polygonData);\n        // Step 4: process the earcut result;\n        //         add the retrieved triangles as geometry faces.\n        for (var i = 0; i + 2 < triangleIndices.length; i += 3) {\n            var a = triangleIndices[i];\n            var b = triangleIndices[i + 1];\n            var c = triangleIndices[i + 2];\n            exports.GeometryGenerationHelpers.makeFace3(pointGeometry, a, b, c);\n        }\n        var pointsMesh = new THREE.Mesh(pointGeometry, pointsMaterial);\n        pointsMesh.position.y = -100;\n        pointsMesh.position.z = 50;\n        pointsMesh.userData[\"isExportable\"] = false;\n        thisGenerator.addMesh(pointsMesh);\n    },\n    // CURRENTLY NOT REALLY IN USE. THE UNDERLYING MODEL IS A NON-TWISTED ONE.\n    makeAndAddHollowPlaneIntersection: function (thisGenerator, unbufferedGeometry) {\n        var pointGeometry = new THREE.Geometry();\n        var perpLines = unbufferedGeometry.getPerpendicularHullLines();\n        for (var i = 0; i < perpLines.length; i++) {\n            var innerPoint = perpLines[i].start;\n            var outerPoint = perpLines[i].end;\n            pointGeometry.vertices.push(innerPoint, outerPoint);\n            var vertIndex = pointGeometry.vertices.length;\n            if (i > 0) {\n                pointGeometry.faces.push(new THREE.Face3(vertIndex - 4, vertIndex - 2, vertIndex - 3));\n                pointGeometry.faces.push(new THREE.Face3(vertIndex - 3, vertIndex - 2, vertIndex - 1));\n            }\n        }\n        var pointsMaterial = new THREE.MeshBasicMaterial({\n            wireframe: false,\n            color: 0xff0000,\n            opacity: 0.5,\n            side: THREE.DoubleSide,\n            transparent: true\n        });\n        var pointsMesh = new THREE.Mesh(pointGeometry, pointsMaterial);\n        pointsMesh.position.y = -100;\n        pointsMesh.position.z = -50;\n        pointsMesh.userData[\"isExportable\"] = false;\n        thisGenerator.addMesh(pointsMesh);\n    },\n    /**\n     * Add an orange colored line mesh from a spine geometry..\n     *\n     * @param {DildoGeneration} thisGenerator - The generator to add the new mesh to.\n     * @param {THREE.Geometry} spineGeometry - The spine geometry itself.\n     */\n    addSpine: function (thisGenerator, spineGeometry) {\n        var spineMesh = new THREE.LineSegments(spineGeometry, new THREE.LineBasicMaterial({\n            color: 0xff8800\n        }));\n        spineMesh.position.y = -100;\n        thisGenerator.addMesh(spineMesh);\n    },\n    /**\n     * This function creates two line-meshes in red and green indicating the perpendicular cut\n     * path along the geometry to be sliced.\n     *\n     * @param {DildoGeneration} thisGenerator - The generator to add the new two meshes to.\n     * @param {DildoGeometry} unbufferedDildoGeometry - The dildo geometry to retrieve the perpendicular path from.\n     */\n    addPerpendicularPaths: function (thisGenerator, unbufferedDildoGeometry) {\n        exports.GeometryGenerationHelpers.addPerpendicularPath(thisGenerator, unbufferedDildoGeometry.outerPerpLines, 0xff0000);\n        exports.GeometryGenerationHelpers.addPerpendicularPath(thisGenerator, unbufferedDildoGeometry.innerPerpLines, 0x00ff00);\n    },\n    /**\n     * Add the given array of perpendicular lines (perpendicular to the mesh surface along the cut path)\n     * as a THREE.LineSegments geometry.\n     *\n     * @param {DildoGeneration} thisGenerator - The generator to add the created line mesh to.\n     * @param {Array<THREE.Line3>} perpLines - The lines to\n     * @param {number} materialColor - A color for the material to use (like 0xff0000 for red).\n     */\n    addPerpendicularPath: function (thisGenerator, perpLines, materialColor) {\n        var outerPerpGeometry = new THREE.Geometry();\n        perpLines.forEach(function (perpLine) {\n            outerPerpGeometry.vertices.push(perpLine.start.clone());\n            outerPerpGeometry.vertices.push(perpLine.end.clone());\n        });\n        var outerPerpMesh = new THREE.LineSegments(outerPerpGeometry, new THREE.LineBasicMaterial({\n            color: materialColor\n        }));\n        outerPerpMesh.position.y = -100;\n        thisGenerator.addMesh(outerPerpMesh);\n    },\n    // TODO: add to global helper functions\n    /**\n     * Make a triangulation of the given path specified by the verted indices.\n     *\n     * @param {Array<number>} connectedPath - An array of vertex indices.\n     * @return {THREE.Geometry} trianglesMesh\n     */\n    makePlaneTriangulation: function (generator, sliceGeometry, connectedPath, options) {\n        // Convert the connected paths indices to [x, y, x, y, x, y, ...] coordinates (requied by earcut)\n        var currentPathXYData = connectedPath.reduce(function (earcutInput, vertIndex) {\n            var vert = sliceGeometry.vertices[vertIndex];\n            earcutInput.push(vert.x, vert.y);\n            return earcutInput;\n        }, []);\n        // Array<number> : triplets of vertex indices in the plain XY array\n        var triangles = (0, earcut_typescript_1.earcut)(currentPathXYData);\n        // Convert triangle indices back to a geometry\n        var trianglesGeometry = new THREE.Geometry();\n        // We will merge the geometries in the end which will create clones of the vertices.\n        // No need to clone here.\n        // trianglesGeometry.vertices = leftSliceGeometry.vertices;\n        trianglesGeometry.vertices = connectedPath.map(function (geometryVertexIndex) {\n            return sliceGeometry.vertices[geometryVertexIndex];\n        });\n        // Array<{x,y}> is compatible with Array<{x,y,z}> here :)\n        var flatSideBounds = plotboilerplate_1.Bounds.computeFromVertices(trianglesGeometry.vertices.map(function (vector3) { return new plotboilerplate_1.Vertex(vector3.x, vector3.y); }));\n        for (var t = 0; t < triangles.length; t += 3) {\n            var a = triangles[t];\n            var b = triangles[t + 1];\n            var c = triangles[t + 2];\n            trianglesGeometry.faces.push(new THREE.Face3(a, b, c));\n            // Add UVs\n            UVHelpers_1.UVHelpers.makeFlatTriangleUVs(trianglesGeometry, flatSideBounds, a, b, c);\n        }\n        trianglesGeometry.uvsNeedUpdate = true;\n        // TODO: check if this is still required\n        trianglesGeometry.buffersNeedUpdate = true;\n        trianglesGeometry.computeVertexNormals();\n        var trianglesMesh = new THREE.Mesh(trianglesGeometry, new THREE.MeshBasicMaterial({\n            color: 0x0048ff,\n            transparent: true,\n            opacity: 0.55,\n            side: THREE.DoubleSide\n        }));\n        trianglesMesh.position.y = -100;\n        // trianglesMesh.position.z += 1.0; // Avoid Moiré with plane mesh?\n        trianglesMesh.userData[\"isExportable\"] = false;\n        generator.partialResults[constants_1.KEY_PLANE_INTERSECTION_TRIANGULATION] = trianglesGeometry;\n        if (options.showSplitShapeTriangulation) {\n            generator.addMesh(trianglesMesh);\n        }\n        return trianglesGeometry;\n    },\n    /**\n     * Normalize a 2D vector to a given length.\n     *\n     * @param {XYCoords} base - The start point.\n     * @param {XYCoords} extend - The end point.\n     * @param {number} normalLength - The desired length\n     */\n    // TODO: add types\n    normalizeVectorXY: function (base, extend, normalLength) {\n        var diff = { x: extend.x - base.x, y: extend.y - base.y }; // XYCoords\n        var length = Math.sqrt(diff.x * diff.x + diff.y * diff.y);\n        var ratio = normalLength / length;\n        extend.x = base.x + diff.x * ratio;\n        extend.y = base.y + diff.y * ratio;\n    },\n    /**\n     * Normalize a 2D vector to a given length.\n     *\n     * @param {XYCoords} base - The start point.\n     * @param {XYCoords} extend - The end point.\n     * @param {number} normalLength - The desired length\n     */\n    // TODO: add types\n    normalizeVectorXYZ: function (base, extend, normalLength) {\n        var diff = { x: extend.x - base.x, y: extend.y - base.y, z: extend.z - base.z };\n        var length = Math.sqrt(diff.x * diff.x + diff.y * diff.y + diff.z * diff.z);\n        var ratio = normalLength / length;\n        extend.x = base.x + diff.x * ratio;\n        extend.y = base.y + diff.y * ratio;\n        extend.z = base.z + diff.z * ratio;\n    },\n    /**\n     * A helper function to clear all child nodes from the given HTML DOM node.\n     *\n     * @param {HTMLElement} rootNoode\n     */\n    removeAllChildNodes: function (rootNode) {\n        while (rootNode.lastChild) {\n            rootNode.removeChild(rootNode.lastChild);\n        }\n    },\n    /**\n     * Clamp the given number into the passed min-max interval.\n     *\n     * @param {number} n\n     * @param {number} min\n     * @param {number} max\n     * @returns\n     */\n    clamp: function (n, min, max) {\n        return Math.max(Math.min(n, max), min);\n    }\n};\n//# sourceMappingURL=GeometryGenerationHelpers.js.map","\"use strict\";\n/**\n * @author  Ikaros Kappler\n * @date    2021-09-02\n * @version 1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImageStore = void 0;\nexports.ImageStore = (function () {\n    var imageMap = new Map();\n    var Store = {\n        getImage: function (path, onComplete) {\n            // Try to find in store\n            var image = imageMap.get(path);\n            if (!image) {\n                image = document.createElement(\"img\"); // as HTMLImageElement;\n                imageMap.set(path, image);\n                image.onload = function () {\n                    onComplete(image);\n                };\n                image.setAttribute(\"src\", path);\n            }\n            return image;\n        },\n        isImageLoaded: function (image) {\n            return image.complete && image.naturalHeight !== 0 && image.naturalHeight !== undefined;\n        }\n    };\n    return Store;\n})();\n//# sourceMappingURL=ImageStore.js.map","\"use strict\";\n/**\n * The PathFinger tool will find the connected path on a mesh surface, given by a set\n * of vertices that lay on the geometry's surface.\n *\n * Each vertex in the path elements array must be at some gometry vertex position. The position\n * does not necessarily need to be exact, some epsilon is used (default epsilon is 0.000001).\n *\n * @author   Ikaros Kappler\n * @modified 2021-08-29 Ported to Typescript from vanilla JS.\n * @date     2021-07-06\n * @version  1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PathFinder = void 0;\n// var EPS = 0.000001;\nvar constants_1 = require(\"./constants\");\nvar PathFinder = /** @class */ (function () {\n    /**\n     * Construct a new PathFinder.\n     *\n     * @param {number=0.000001} epsilon - (optional) Specity any custom epsilon here if the default epsilon is too large/small. Must be >= 0.\n     */\n    function PathFinder(epsilon) {\n        this.visitedVertices = new Set();\n        this.unvisitedVertIndices = new Set(); // <number>\n        this.numVisitedVertices = 0;\n        this.epsilon = typeof epsilon !== \"undefined\" && epsilon >= 0 ? epsilon : constants_1.EPS;\n    }\n    /**\n     * Find all connected paths specified by the path vertex array, that lay on the geometry's surface.\n     *\n     * If the vertices depict more than one path, then the returned array will contain\n     * multiple paths, too.\n     *\n     * The pathVertices array must not contain duplicates.\n     *\n     * @param {THREE.Geometry} unbufferedGeometry - The geometry itself containing the path vertices.\n     * @param {THREE.Vector3[]} pathVertices - The unsorted vertices (must form a connected path on the geometry).\n     * @return {Array<number[]>} An array of paths; each path consists of an array of path vertex indices in the `pathVertices` param.\n     */\n    PathFinder.prototype.findAllPathsOnMesh = function (unbufferedGeometry, pathVertices) {\n        var collectedPaths = []; // Array<number[]>\n        this.visitedVertices.clear();\n        this.unvisitedVertIndices.clear();\n        // Map path vertices to vertices in the geometry.\n        //\n        // Please note that the index array might be shorter than the vertex array itself, if some vertices could\n        // not be located in the geometry.\n        //\n        var pathVertIndices = mapVerticesToGeometryIndices(unbufferedGeometry, pathVertices, this.epsilon);\n        var n = pathVertIndices.length;\n        // Initially build up an array of path vertices, marking them all as unvisited.\n        this.unvisitedVertIndices = new Set(pathVertIndices.map(function (_pathVert, index) {\n            return index;\n        }));\n        // As long as there are path vertices unvisited, there are sill portions of the path(s)\n        // to be processed.\n        while (this.numVisitedVertices < n) {\n            var nextUnvisitedIndex = this.unvisitedVertIndices.values().next().value;\n            // Array<number>\n            var path = this.findUnvisitedPaths(unbufferedGeometry, pathVertIndices, nextUnvisitedIndex);\n            collectedPaths.push(path);\n        }\n        // Try to find adjacent paths to connect them.\n        return this.combineAdjacentPaths(collectedPaths, unbufferedGeometry);\n    };\n    /**\n     * Find the next sequence unvisited path (indices) of vertices that are directly connected\n     * via some faces on the geometry's surface.\n     *\n     * Be aware that path detection only works in one direction, so you will probably end up\n     * in several paths that can still be connected, if you start with some random vertex\n     * index.\n     *\n     * @param {THREE.Geometry} unbufferedGeometry - The geometry to use to find connected vertices (use it's faces).\n     * @param {Array<number>} pathVertIndices - The indices of all vertices that form the path(s). Each index must match a vertex in the geometry's `vertices` array.\n     * @param {number} unvisitedIndex - The path vertex (index) to start with. This can be picked randomly.\n     * @returns {Array<number>} The indices of the found path in an array (index sequence).\n     */\n    PathFinder.prototype.findUnvisitedPaths = function (unbufferedGeometry, pathVertIndices, unvisitedIndex) {\n        var path = [unvisitedIndex]; // which elements?\n        this.visitedVertices.add(unvisitedIndex);\n        this.unvisitedVertIndices.delete(unvisitedIndex);\n        this.numVisitedVertices++;\n        // Find the the face for this vertex's index\n        // var faceAndVertIndex; // { faceIndex: number, vertIndex: number }\n        var adjacentVertIndex;\n        while ((adjacentVertIndex = this.findAdjacentFace(unbufferedGeometry, pathVertIndices, unvisitedIndex)) !== -1) {\n            // Retrieved face/vertex tuple represents the next element on the path\n            path.push(adjacentVertIndex);\n            this.visitedVertices.add(adjacentVertIndex);\n            this.unvisitedVertIndices.delete(adjacentVertIndex);\n            this.numVisitedVertices++;\n            unvisitedIndex = adjacentVertIndex;\n        }\n        return path;\n    };\n    /**\n     * Find the next unvisited vertex index that connects the given (unvisited) vertex\n     * index of the path.\n     *\n     * To find that the geometry's faces will be used.\n     *\n     * @param {THREE.Geometry} unbufferedGeometry\n     * @param {Array<number>} pathVertIndices\n     * @param {number} unvisitedIndex\n     * @returns {number} The next adjacent face index or -1 if none can be found.\n     */\n    PathFinder.prototype.findAdjacentFace = function (unbufferedGeometry, pathVertIndices, unvisitedIndex) {\n        var faceCount = unbufferedGeometry.faces.length;\n        for (var f = 0; f < faceCount; f++) {\n            if (faceHasVertIndex(unbufferedGeometry, f, unvisitedIndex)) {\n                // Face is a canditate to extend the path.\n                // Check if there is a second un-visited path vertex\n                for (var i = 0; i < pathVertIndices.length; i++) {\n                    var pathVertIndex = pathVertIndices[i];\n                    if (pathVertIndex === unvisitedIndex) {\n                        continue;\n                    }\n                    if (this.isVisited(pathVertIndex)) {\n                        continue;\n                    }\n                    if (!this.isVisited(pathVertIndex) && faceHasVertIndex(unbufferedGeometry, f, pathVertIndex)) {\n                        return pathVertIndex;\n                    }\n                    if (faceHasVertIndex(unbufferedGeometry, f, pathVertIndex)) {\n                        return pathVertIndex;\n                    }\n                } // END for\n            } // END if\n        } // END for\n        // At this point no matching face was found\n        return -1;\n    };\n    /**\n     * Checks if the given vertex index (one of the path vertices) was already\n     * marked as being visited.\n     *\n     * @param {number} vertIndex\n     * @returns {boolean}\n     */\n    PathFinder.prototype.isVisited = function (vertIndex) {\n        return this.visitedVertices.has(vertIndex);\n    };\n    /**\n     * Find adjacent paths and connect them.\n     *\n     * @param {Array<number[]>} collectedPaths\n     * @param {THREE.Geometry} unbufferedGeometry\n     * @param {THREE.Vector3[]} pathVertices\n     * @return {Array<number[]>} A new sequence of paths (a path is an array of vertex indices).\n     */\n    PathFinder.prototype.combineAdjacentPaths = function (collectedPaths, unbufferedGeometry) {\n        var resultPaths = [];\n        // First build up an unvisited path set (set of path indices)\n        var unvisitedPathIndexSet = new Set(collectedPaths.map(function (_path, index) {\n            return index;\n        }));\n        while (unvisitedPathIndexSet.size > 0) {\n            var currentPathIndex = unvisitedPathIndexSet.values().next().value;\n            unvisitedPathIndexSet.delete(currentPathIndex);\n            var currentPath = collectedPaths[currentPathIndex];\n            var nextPath = null; // TODO: type?\n            do {\n                nextPath = findAdjacentPath(collectedPaths, currentPath[currentPath.length - 1], unvisitedPathIndexSet, unbufferedGeometry);\n                if (!nextPath && currentPath.length > 1) {\n                    // If path's end point has no connection try reversed path\n                    currentPath = currentPath.reverse();\n                    nextPath = findAdjacentPath(collectedPaths, currentPath[currentPath.length - 1], unvisitedPathIndexSet, unbufferedGeometry);\n                }\n                if (nextPath) {\n                    currentPath = currentPath.concat(nextPath);\n                }\n            } while (nextPath);\n            // All adjacent paths found and connected.\n            resultPaths.push(currentPath);\n        }\n        return resultPaths;\n    };\n    return PathFinder;\n}()); // END class\nexports.PathFinder = PathFinder;\n/**\n * A simple check to determine if a face of the geometry (given by the face index)\n * is adjacent to the given vertex index (a vertex index in the geometry.).\n *\n * @param {THREE.Geometry} unbufferedGeometry\n * @param {number} faceIndex\n * @param {number} geometryVertexIndex\n * @returns\n */\nvar faceHasVertIndex = function (unbufferedGeometry, faceIndex, geometryVertexIndex) {\n    var face = unbufferedGeometry.faces[faceIndex];\n    return face.a === geometryVertexIndex || face.b === geometryVertexIndex || face.c === geometryVertexIndex;\n};\n/**\n * Get an array of vertex indices inside the geometry that represent the given path vertices,\n *\n * If no equivalent geometry vertex can be found (for a path vertex) then the path vertex\n * will be skipped.\n * So the returned array might be shorter than the path – and thus, have gaps.\n *\n * @param {THREE.Geometry} unbufferedGeometry - The Three.js geometry to use.\n * @param {Array<THREE.Vector3>} pathVertices - The acual mesh vertices of the current path.\n * @param {number} epsilon - Is required here (just pass through).\n * @returns\n */\nvar mapVerticesToGeometryIndices = function (unbufferedGeometry, pathVertices, epsilon) {\n    var pathVertIndices = [];\n    for (var i = 0; i < pathVertices.length; i++) {\n        var pathVert = pathVertices[i];\n        var foundIndex = -1;\n        var foundDist = epsilon;\n        for (var j = 0; j < unbufferedGeometry.vertices.length; j++) {\n            var curDist = unbufferedGeometry.vertices[j].distanceTo(pathVert);\n            if (curDist <= foundDist) {\n                // Remember geometry index if closest to path vertex\n                if (foundIndex === -1 ||\n                    // By convention use smalled vertex index if multiple found\n                    (foundIndex !== -1 && unbufferedGeometry.vertices[foundIndex].distanceTo(pathVert) >= curDist && foundIndex > j)) {\n                    foundIndex = j;\n                    foundDist = curDist;\n                }\n            }\n        }\n        if (foundIndex === -1) {\n            console.warn(\"PathFinder.mapVerticesToGeometryIndices could not find a matching geometry vertex for path point \" +\n                i +\n                \". The final result might be locally broken.\");\n        }\n        else {\n            // Note: it may be possible that NO MATCHING GEOMETRY VERT was found (foundIndex = -1).\n            pathVertIndices.push(foundIndex);\n        }\n    } // END for i\n    return pathVertIndices;\n};\n/**\n * This is a helper function to find adjacent sub paths and connect them.\n * It expects basic path segments already to be found and that they are\n * somehow connected. Unconnected paths – which are possible in non-convex\n * geometries – will stay unconnected.\n *\n * It locates the next path that connects to the given (current) path\n * and returns the acual path indices in the correct order. Forward paths\n * and backward paths are detected here and being brought into the correct\n * order.\n *\n * Example: if a path connects with it's end vertex to the end of the given\n * path, then it will be reversed.\n *\n * @param {Array<number[]>} collectedPaths - The array of paths (array of array)\n * @param {number} currentVertIndex - The vertex index in the geometry to find the next adjacent path for.\n * @param {Set<number>} unvisitedPathIndexSet - A set to keep track of unvisited vertex indices. Will be updated.\n * @param {THREE.Geometry} unbufferedGeometry - The geometry to find the path on.\n * @returns\n */\nvar findAdjacentPath = function (collectedPaths, currentVertIndex, unvisitedPathIndexSet, unbufferedGeometry) {\n    for (var f = 0; f < unbufferedGeometry.faces.length; f++) {\n        if (faceHasVertIndex(unbufferedGeometry, f, currentVertIndex)) {\n            // Now find any unvisited path (first or last point) that connects here.\n            for (var p = 0; p < collectedPaths.length; p++) {\n                if (!unvisitedPathIndexSet.has(p)) {\n                    // Path already visited\n                    continue;\n                }\n                var nextPath = collectedPaths[p];\n                if (faceHasVertIndex(unbufferedGeometry, f, nextPath[0])) {\n                    // Concat forwards\n                    unvisitedPathIndexSet.delete(p);\n                    return nextPath;\n                }\n                else if (faceHasVertIndex(unbufferedGeometry, f, nextPath[nextPath.length - 1])) {\n                    // Concat backwards\n                    unvisitedPathIndexSet.delete(p);\n                    return nextPath.reverse();\n                }\n            }\n        }\n    }\n};\n//# sourceMappingURL=PathFinder.js.map","\"use strict\";\n/**\n * Compute the intersection of a mesh and a plane.\n *\n * Inspired by\n *    https://stackoverflow.com/questions/42348495/three-js-find-all-points-where-a-mesh-intersects-a-plane\n *    https://jsfiddle.net/prisoner849/8uxw667m/\n *\n * @co-author Ikaros Kappler\n * @date 2021-06-11\n * @modified 2021-08-29 Ported to Typescript from vanilla JS.\n * @version 1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlaneMeshIntersection = void 0;\nvar THREE = require(\"three\");\nvar PlaneMeshIntersection = /** @class */ (function () {\n    /**\n     * Constructor.\n     */\n    function PlaneMeshIntersection() {\n        var _this = this;\n        /**\n         *\n         * @param {THREE.Mesh} mesh\n         * @param {THREE.Geometry} geometry\n         * @param {THREE.Mesh} plane {THREE.PlaneGeometry ???\n         * @returns {Array<THREE.Vector3>}\n         */\n        // TODO: plane type???\n        this.getIntersectionPoints = function (mesh, geometry, plane, planeGeometryReal) {\n            // Note: this could also work with a directly passed Mesh.Plane object instead a THREE.PlaneGeometry.\n            _this.pointsOfIntersection = [];\n            var mathPlane = new THREE.Plane();\n            // var planeGeometry : THREE.Geometry = (plane as unknown).geometry;\n            // plane.localToWorld(this.planePointA.copy(plane.geometry.vertices[plane.geometry.faces[0].a]));\n            // plane.localToWorld(this.planePointB.copy(plane.geometry.vertices[plane.geometry.faces[0].b]));\n            // plane.localToWorld(this.planePointC.copy(plane.geometry.vertices[plane.geometry.faces[0].c]));\n            plane.localToWorld(_this.planePointA.copy(planeGeometryReal.vertices[planeGeometryReal.faces[0].a]));\n            plane.localToWorld(_this.planePointB.copy(planeGeometryReal.vertices[planeGeometryReal.faces[0].b]));\n            plane.localToWorld(_this.planePointC.copy(planeGeometryReal.vertices[planeGeometryReal.faces[0].c]));\n            mathPlane.setFromCoplanarPoints(_this.planePointA, _this.planePointB, _this.planePointC);\n            var _self = _this;\n            geometry.faces.forEach(function (face) {\n                mesh.localToWorld(_self.a.copy(geometry.vertices[face.a]));\n                mesh.localToWorld(_self.b.copy(geometry.vertices[face.b]));\n                mesh.localToWorld(_self.c.copy(geometry.vertices[face.c]));\n                _self.lineAB = new THREE.Line3(_self.a, _self.b);\n                _self.lineBC = new THREE.Line3(_self.b, _self.c);\n                _self.lineCA = new THREE.Line3(_self.c, _self.a);\n                _self.__setPointOfIntersection(_self.lineAB, mathPlane);\n                _self.__setPointOfIntersection(_self.lineBC, mathPlane);\n                _self.__setPointOfIntersection(_self.lineCA, mathPlane);\n            });\n            return _this.pointsOfIntersection;\n        };\n        this.__setPointOfIntersection = function (line, plane) {\n            var intersectionPoint = plane.intersectLine(line, this.pointOfIntersection);\n            if (intersectionPoint) {\n                this.pointsOfIntersection.push(intersectionPoint.clone());\n            }\n        };\n        //   Vector3[]\n        this.pointsOfIntersection = [];\n        this.a = new THREE.Vector3();\n        this.b = new THREE.Vector3();\n        this.c = new THREE.Vector3();\n        this.planePointA = new THREE.Vector3();\n        this.planePointB = new THREE.Vector3();\n        this.planePointC = new THREE.Vector3();\n        this.lineAB = new THREE.Line3();\n        this.lineBC = new THREE.Line3();\n        this.lineCA = new THREE.Line3();\n        this.pointOfIntersection = new THREE.Vector3();\n    }\n    return PlaneMeshIntersection;\n}());\nexports.PlaneMeshIntersection = PlaneMeshIntersection;\n//# sourceMappingURL=PlaneMeshIntersection.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2021-08-03\n * @modified 2021-08-04 Ported to Typsescript from vanilla JS.\n * @version  1.0.1\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UVHelpers = void 0;\nvar THREE = require(\"three\");\nexports.UVHelpers = {\n    /**\n     * Helper function to create triangular UV Mappings for a triangle.\n     *\n     * @param {THREE.Geometry} thisGeometry\n     * @param {Bounds} shapeBounds\n     * @param {number} vertIndexA - The index in the geometry's vertices array.\n     * @param {number} vertIndexB - ...\n     * @param {number} vertIndexC - ...\n     */\n    makeFlatTriangleUVs: function (thisGeometry, // THREE.Geometry does not longer exist since r125 and will be replaced by BufferGeometry\n    shapeBounds, vertIndexA, vertIndexB, vertIndexC) {\n        var vertA = thisGeometry.vertices[vertIndexA];\n        var vertB = thisGeometry.vertices[vertIndexB];\n        var vertC = thisGeometry.vertices[vertIndexC];\n        // Convert a position vertex { x, y, * } to UV coordinates { u, v }\n        var getUVRatios = function (vert) {\n            return new THREE.Vector2((vert.x - shapeBounds.min.x) / shapeBounds.width, (vert.y - shapeBounds.min.y) / shapeBounds.height);\n        };\n        thisGeometry.faceVertexUvs[0].push([getUVRatios(vertA), getUVRatios(vertB), getUVRatios(vertC)]);\n    }\n};\n//# sourceMappingURL=UVHelpers.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2021-07-13\n * @modified 2021-08-04 Ported to Typescript from vainlla JS.\n * @version  1.0.1\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clearDuplicateVertices3 = void 0;\nvar EPS = 0.000001;\n/**\n * Filter the array and clear all duplicates.\n *\n * The original array is left unchanged. The vertices in the array are not cloned.\n *\n * @param {THREE.Vector3[]} vertices\n * @param {number=EPS} epsilon\n * @return {THREE.Vector3[]}\n */\nvar clearDuplicateVertices3 = function (vertices, epsilon) {\n    if (typeof epsilon === \"undefined\") {\n        epsilon = EPS;\n    }\n    var result = [];\n    for (var i = 0; i < vertices.length; i++) {\n        if (!containsElementFrom(vertices, vertices[i], i + 1, epsilon)) {\n            result.push(vertices[i]);\n        }\n    }\n    return result;\n};\nexports.clearDuplicateVertices3 = clearDuplicateVertices3;\n/**\n * A distance checker: check if the passed to vertices are no more than 'eps' units apart.\n *\n * @param {THREE.Vector3} vertA\n * @param {THREE.Vector3} vertB\n * @param {number} eps\n * @returns {boolean}\n */\nvar isCloseTo = function (vertA, vertB, eps) {\n    return vertA.distanceTo(vertB) < eps;\n};\n/**\n * Try to find an element in the given vertex array, starting at a given position (inclusive).\n *\n * @param {THREE.Vector3[]} vertices\n * @param {THREE.Vector3} vertex\n * @param {number} fromIndex\n * @param {number} epsilon\n * @returns {boolan}\n */\nvar containsElementFrom = function (vertices, vertex, fromIndex, epsilon) {\n    for (var i = fromIndex; i < vertices.length; i++) {\n        if (isCloseTo(vertices[i], vertex, epsilon)) {\n            return true;\n        }\n    }\n    return false;\n};\n//# sourceMappingURL=clearDuplicateVertices3.js.map","\"use strict\";\n/**\n * Calculate the vertex normals of a mesh from the pre-calculated face normals.\n *\n * jkmott writing about this challenge:\n *   >> If you have a large complex mesh with small faces you can get away with\n *   >> computing the vertex normals by taking the average of the face normals\n *   >> that surround it, and that’s a fine strategy.\n *\n * https://meshola.wordpress.com/2016/07/24/three-js-vertex-normals/\n *\n * @author  Ikaros Kappler\n * @date    2021-08-31\n * @version 1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.computeVertexNormals = void 0;\nvar THREE = require(\"three\");\n/**\n * Compute the vertex normals of a base geometry and its buffered counterpart (both parts are required here).\n *\n * Note that unbufferedGeometry.computeVertexNormals() must have been called for this to work.\n *\n * @param {THREE.Geometry} unbufferedGeometry - The base geometry.\n * @param {THREE.BufferedGeometry} bufferedGeometry - The buffered geometry.\n * @returns\n */\nvar computeVertexNormals = function (unbufferedGeometry, bufferedGeometry) {\n    // Fetch the face normals from the buffers.\n    var vertexNormals = bufferedGeometry.getAttribute(\"normal\");\n    //   console.log(\"normals\", vertexNormals);\n    //   console.log(\n    //     \"unbufferedGeometry.vertices.length\",\n    //     unbufferedGeometry.vertices.length,\n    //     \"unbufferedGeometry.faces.length\",\n    //     unbufferedGeometry.faces.length,\n    //     \"vertexNormals.array.length/3\",\n    //     vertexNormals.array.length / 3\n    //   );\n    var collectedFaceNormals = Array(unbufferedGeometry.faces.length);\n    // For each face get the three face normals, each of which consists of 3 float values itself.\n    // So each face consumes 9 floats from the array buffer.\n    for (var f = 0; f < unbufferedGeometry.faces.length; f++) {\n        var face = unbufferedGeometry.faces[f];\n        var faceNormalA = new THREE.Vector3(vertexNormals.array[f * 9 + 0], vertexNormals.array[f * 9 + 1], vertexNormals.array[f * 9 + 2]);\n        var faceNormalB = new THREE.Vector3(vertexNormals.array[f * 9 + 3], vertexNormals.array[f * 9 + 4], vertexNormals.array[f * 9 + 5]);\n        var faceNormalC = new THREE.Vector3(vertexNormals.array[f * 9 + 6], vertexNormals.array[f * 9 + 7], vertexNormals.array[f * 9 + 8]);\n        addVertexNormal(collectedFaceNormals, face.a, faceNormalA);\n        addVertexNormal(collectedFaceNormals, face.b, faceNormalB);\n        addVertexNormal(collectedFaceNormals, face.c, faceNormalC);\n    } // END for\n    //   console.log(\"collectedFaceNormals\", collectedFaceNormals);\n    var normals = new Array(unbufferedGeometry.vertices.length);\n    for (var i = 0; i < unbufferedGeometry.vertices.length; i++) {\n        var averageNormal = computeAverageVector(collectedFaceNormals[i]);\n        averageNormal.add(unbufferedGeometry.vertices[i]);\n        normals[i] = new THREE.Line3(unbufferedGeometry.vertices[i], averageNormal);\n    }\n    return normals;\n};\nexports.computeVertexNormals = computeVertexNormals;\n/**\n * Add the computed face normal to the given vertex normal buffer.\n *\n * Each vertex normal buffer ends up with multiple face normals associated with it (from the\n * adjacent faces). The aim is to calculate the average vector from all.\n *\n * @param {Array<THREE.Vector3[]>} buffer\n * @param {number} vertIndex\n * @param {THREE.Vector3} vertexNormal\n */\nvar addVertexNormal = function (buffer, vertIndex, vertexNormal) {\n    if (vertIndex >= buffer.length || typeof buffer[vertIndex] === \"undefined\") {\n        buffer[vertIndex] = [];\n    }\n    buffer[vertIndex].push(vertexNormal);\n};\n/**\n * Compute the average vector from a sequence of (nromal) vectors.\n *\n * @param {Array<THREE.Vector3>} vectors - The vectors to get the average vector for.\n * @returns {THREE.Vector3} The average vector from all given.\n */\nvar computeAverageVector = function (vectors) {\n    var avg = new THREE.Vector3(0, 0, 0);\n    if (vectors) {\n        vectors.forEach(function (nrml) {\n            avg.add(nrml);\n        });\n        avg.divideScalar(vectors.length);\n    }\n    return avg;\n};\n//# sourceMappingURL=computeVertexNormals.js.map","\"use strict\";\n/**\n * @author  Ikaros Kappler\n * @version 1.0.0\n * @date    2021-08-30\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KEY_SPLIT_TRIANGULATION_GEOMETRIES = exports.KEY_PLANE_INTERSECTION_TRIANGULATION = exports.KEY_PLANE_INTERSECTION_POINTS = exports.KEY_SPLIT_PANE_MESH = exports.KEY_RIGHT_SLICE_PLANE = exports.KEY_LEFT_SLICE_PLANE = exports.KEY_RIGHT_SLICE_GEOMETRY = exports.KEY_LEFT_SLICE_GEOMETRY = exports.DEG_TO_RAD = exports.EPS = void 0;\nexports.EPS = 0.000001;\nexports.DEG_TO_RAD = Math.PI / 180.0;\nexports.KEY_LEFT_SLICE_GEOMETRY = \"KEY_LEFT_SLICE_GEOMETRY\"; // THREE.Geometry\nexports.KEY_RIGHT_SLICE_GEOMETRY = \"KEY_RIGHT_SLICE_GEOMETRY\"; // THREE.Geometry\nexports.KEY_LEFT_SLICE_PLANE = \"KEY_LEFT_SLICE_PLANE\"; // THREE.Plane\nexports.KEY_RIGHT_SLICE_PLANE = \"KEY_RIGHT_SLICE_PLANE\"; // THREE.Plane\nexports.KEY_SPLIT_PANE_MESH = \"KEY_SPLIT_PANE_MESH\"; // THREE.Mesh\nexports.KEY_PLANE_INTERSECTION_POINTS = \"KEY_PLANE_INTERSECTION_POINTS\"; // Array<Vector3>\nexports.KEY_PLANE_INTERSECTION_TRIANGULATION = \"KEY_PLANE_INTERSECTION_TRIANGULATION\"; // THREE.Geometry\nexports.KEY_SPLIT_TRIANGULATION_GEOMETRIES = \"KEY_SPLIT_TRIANGULATION_GEOMETRIES\"; // Array<THREE.Geometry>\n//# sourceMappingURL=constants.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_BEZIER_JSON = void 0;\n// Refactored from dildo-generator\nexports.DEFAULT_BEZIER_JSON = \"\\n  [\\n    {\\n       \\\"startPoint\\\":[\\n          -122,\\n          77.80736634304651\\n       ],\\n       \\\"endPoint\\\":[\\n          -65.59022229786551,\\n          21.46778533702511\\n       ],\\n       \\\"startControlPoint\\\":[\\n          -121.62058129515852,\\n          25.08908859418696\\n       ],\\n       \\\"endControlPoint\\\":[\\n          -79.33419353770395,\\n          48.71529293460728\\n       ]\\n    },\\n    {\\n       \\\"startPoint\\\":[\\n          -65.59022229786551,\\n          21.46778533702511\\n       ],\\n       \\\"endPoint\\\":[\\n          -65.66917273472913,\\n          -149.23537680826058\\n       ],\\n       \\\"startControlPoint\\\":[\\n          -52.448492057756646,\\n          -4.585775770903305\\n       ],\\n       \\\"endControlPoint\\\":[\\n          -86.1618869001374,\\n          -62.11613821618976\\n       ]\\n    },\\n    {\\n       \\\"startPoint\\\":[\\n          -65.66917273472913,\\n          -149.23537680826058\\n       ],\\n       \\\"endPoint\\\":[\\n          -61.86203591980055,\\n          -243.8368165606738\\n       ],\\n       \\\"startControlPoint\\\":[\\n          -53.701578771473564,\\n          -200.1123697454778\\n       ],\\n       \\\"endControlPoint\\\":[\\n          -69.80704300441666,\\n          -205.36451303641783\\n       ]\\n    },\\n    {\\n       \\\"startPoint\\\":[\\n          -61.86203591980055,\\n          -243.8368165606738\\n       ],\\n       \\\"endPoint\\\":[\\n          -21.108966092052256,\\n          -323\\n       ],\\n       \\\"startControlPoint\\\":[\\n          -54.08681426887413,\\n          -281.486963896856\\n       ],\\n       \\\"endControlPoint\\\":[\\n          -53.05779349623559,\\n          -323\\n       ]\\n    }\\n ]\\n  \";\n//# sourceMappingURL=defaults.js.map","\"use strict\";\n\n// Export the library to the global scope:\nglobalThis.ngdg = require(\"./ngdg\").ngdg;\n","\"use strict\";\n// http://detectmobilebrowsers.com/\n// @date 2021-11-02\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isMobileDevice = void 0;\nfunction isMobileDevice() {\n    return (function (a) {\n        return (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) ||\n            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)));\n    })(navigator.userAgent || navigator.vendor || window.opera);\n}\nexports.isMobileDevice = isMobileDevice;\n//# sourceMappingURL=isMobileDevice.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2021-07-26\n * @modified 2021-08-04 Ported to Typescript from vanilla JS.\n * @version  1.0.1\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.locateVertexInArray = void 0;\n/**\n * Find that vertex in the array that is closest to the given vertex.\n *\n * The epsilon is not optional.\n *\n * @param {Array<THREE.Vector3>} vertArray\n * @param {THREE.Vector3} vertex\n * @param {number} epsilon\n * @returns {number} The index of the found vertex or -1 if not found.\n */\nvar locateVertexInArray = function (vertArray, vertex, epsilon) {\n    var closestDist = Number.POSITIVE_INFINITY;\n    var closestIndex = -1;\n    for (var i = 0; i < vertArray.length; i++) {\n        var dist = vertArray[i].distanceTo(vertex);\n        if (closestIndex === -1 && dist < closestDist && dist < epsilon) {\n            closestIndex = i;\n            closestDist = dist;\n        }\n    }\n    return closestIndex;\n};\nexports.locateVertexInArray = locateVertexInArray;\n//# sourceMappingURL=locateVertexInArray.js.map","\"use strict\";\n/**\n * Merge one geometry (all vertices and faces) into the other.\n *\n * @require locateVertexInArray\n *\n * @author   Ikaros Kappler\n * @date     2021-07-26\n * @modified 2021-08-04 Ported to Typescript from vanilla JS.\n * @version  1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mergeAndMapVertices = exports.mergeGeometries = void 0;\nvar THREE = require(\"three\");\n// import { Geometry, Face3 } from \"three/examples/jsm/deprecated/Geometry\";\nvar locateVertexInArray_1 = require(\"./locateVertexInArray\");\nvar EPS = 0.000001;\n// import { EPS } from \"./constants\";\n/**\n * This function tries to merge the 'mergeGeometry' into the 'baseGeometry'.\n * It assumes that both geometries are somehow connected, so it will try to\n * local equal vertices first instead of just copying all 'mergeGeometry' vertices\n * into the other one.\n *\n * The merged vertices will be cloned.\n *\n * @param {THREE.Geometry} baseGeometry\n * @param {THREE.Geometry} mergeGeometry\n */\nvar mergeGeometries = function (baseGeometry, mergeGeometry, epsilon) {\n    if (typeof epsilon === \"undefined\") {\n        epsilon = EPS;\n    }\n    var vertexMap = (0, exports.mergeAndMapVertices)(baseGeometry, mergeGeometry, epsilon);\n    for (var f = 0; f < mergeGeometry.faces.length; f++) {\n        var face = mergeGeometry.faces[f];\n        var a = vertexMap[face.a];\n        var b = vertexMap[face.b];\n        var c = vertexMap[face.c];\n        // baseGeometry.faces.push(new THREE.Face3(a, b, c));\n        // TODO: how to use this here?\n        // Face3 is not a constructor!!! Just a type!!!\n        baseGeometry.faces.push(new THREE.Face3(a, b, c));\n        if (mergeGeometry.faceVertexUvs.length > 0 && f < mergeGeometry.faceVertexUvs[0].length) {\n            var uvData = mergeGeometry.faceVertexUvs[0][f]; // [Vector2,Vector2,Vector2]\n            baseGeometry.faceVertexUvs[0].push([uvData[0].clone(), uvData[1].clone(), uvData[2].clone()]);\n        }\n        else {\n            baseGeometry.faceVertexUvs[0].push([new THREE.Vector2(0.0, 0.0), new THREE.Vector2(0.0, 1.0), new THREE.Vector2(1.0, 0.5)]);\n        }\n    }\n};\nexports.mergeGeometries = mergeGeometries;\n/**\n * This function merges the vertices from a given geometry into a base geometry.\n * It will ty to locate existing vertices within an epsilon range and keep those. Vertices that\n * have no close existing counterpart in the base geometry will be added.\n *\n * The function returns a mapping of new/merged vertices inside the base geometry, showing\n * which vertex (index) was mapped whereto.\n *\n * @param {THREE-Geometry} baseGeometry\n * @param {THREE-Geometry} mergeGeometry\n * @param {number} epsilon\n * @returns Array<number>\n */\nvar mergeAndMapVertices = function (baseGeometry, mergeGeometry, epsilon) {\n    var vertexMap = [];\n    for (var v = 0; v < mergeGeometry.vertices.length; v++) {\n        var mergeVert = mergeGeometry.vertices[v];\n        var indexInBase = (0, locateVertexInArray_1.locateVertexInArray)(baseGeometry.vertices, mergeVert, epsilon);\n        if (indexInBase === -1) {\n            // The current vertex cannot be found in the base geometry.\n            //  -> add to geometry and remember new index.\n            vertexMap.push(baseGeometry.vertices.length);\n            baseGeometry.vertices.push(mergeVert.clone());\n        }\n        else {\n            vertexMap.push(indexInBase);\n        }\n    }\n    return vertexMap;\n};\nexports.mergeAndMapVertices = mergeAndMapVertices;\n//# sourceMappingURL=mergeGeometries.js.map","\"use strict\";\n/**\n * This defines the globally exported wrapper library.\n *\n * See ./src/cjs/entry.js\n *\n * @author   Ikaros Kappler\n * @version  1.0.0\n * @date     2021-09-27\n * @modified 2022-01-29\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ngdg = void 0;\nvar defaults_1 = require(\"./defaults\");\nvar ImageStore_1 = require(\"./ImageStore\");\nvar DildoGeneration_1 = require(\"./DildoGeneration\");\nvar ConfigIO_1 = require(\"./ConfigIO\");\nvar isMobileDevice_1 = require(\"./isMobileDevice\");\nexports.ngdg = {\n    DEFAULT_BEZIER_JSON: defaults_1.DEFAULT_BEZIER_JSON,\n    ConfigIO: ConfigIO_1.ConfigIO,\n    DildoGeneration: DildoGeneration_1.DildoGeneration,\n    ImageStore: ImageStore_1.ImageStore,\n    isMobileDevice: isMobileDevice_1.isMobileDevice\n};\n//# sourceMappingURL=ngdg.js.map","\"use strict\";\n/**\n * Refactored from some older code from 2020.\n *\n * @requires WebColors\n * @requires WebColorsMalachite\n * @requires WebColorsContrast\n *\n * @author   Ikaros Kappler\n * @date     2021-07-14\n * @modified 2021-08-29 Ported to Typescript from vanilla Js.\n * @version  1.0.1\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomWebColor = void 0;\nvar WebColorsMalachite_1 = require(\"plotboilerplate/src/esm/utils/WebColorsMalachite\");\nvar WebColorsContrast_1 = require(\"plotboilerplate/src/esm/utils/WebColorsContrast\");\nvar WebColors_1 = require(\"plotboilerplate/src/esm/utils/WebColors\");\n/**\n * Pick a color from the WebColors array.\n *\n * All params are optional.\n *\n * @param {number=undefined} index\n * @param {\"Malachite\"|\"Mixed\"|\"WebColors\"} colorSet\n **/\nvar randomWebColor = function (index, colorSet) {\n    if (typeof index === \"undefined\") {\n        var maxLen = Math.max(typeof WebColorsMalachite_1.WebColorsMalachite !== \"undefined\" ? WebColorsMalachite_1.WebColorsMalachite.length : 0, typeof WebColorsContrast_1.WebColorsContrast !== \"undefined\" ? WebColorsContrast_1.WebColorsContrast.length : 0, typeof WebColors_1.WebColors !== \"undefined\" ? WebColors_1.WebColors.length : 0);\n        index = Math.round(Math.random() * maxLen);\n    }\n    switch (colorSet) {\n        case \"Malachite\":\n            if (typeof WebColorsMalachite_1.WebColorsMalachite !== \"undefined\") {\n                return WebColorsMalachite_1.WebColorsMalachite[index % WebColorsMalachite_1.WebColorsMalachite.length].cssRGB();\n            }\n            else {\n                console.warn(\"You decided to use the 'WebColorsMalachite' color palette but it is not installed. Falling back.\");\n            }\n        case \"Mixed\":\n            if (typeof WebColorsContrast_1.WebColorsContrast !== \"undefined\") {\n                return WebColorsContrast_1.WebColorsContrast[index % WebColorsContrast_1.WebColorsContrast.length].cssRGB();\n            }\n            else {\n                console.warn(\"You decided to use the 'WebColorsContrast' color palette but it is not installed. Falling back.\");\n            }\n        case \"WebColors\":\n        default:\n            return WebColors_1.WebColors[index % WebColors_1.WebColors.length].cssRGB();\n    }\n};\nexports.randomWebColor = randomWebColor;\n//# sourceMappingURL=randomWebColor.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkngdg\"] = self[\"webpackChunkngdg\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [736], () => (__webpack_require__(333)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","Object","defineProperty","exports","value","BumpMapper","THREE","computeVertexNormals_1","GeometryGenerationHelpers_1","applyBumpmap","dildoGeometry","bufferedGeometry","bumpmap","material","options","collectedVertexNormals","computeVertexNormals","dildoNormalGeometry","Geometry","vertices","map","normalLine","endPoint","end","clone","GeometryGenerationHelpers","normalizeVectorXYZ","start","bumpmapStrength","dildoNormalsMesh","Points","PointsMaterial","size","color","dildoMesh","console","log","useBumpmap","y","vertexMatrix","length","x","vertIndex","vertex","yRatio","xRatio","lerpFactor","getHeightAt","lerpTarget","lerp","BufferGeometry","fromGeometry","Mesh","ConfigIO","element","_this","this","handleDropEvent","event","preventDefault","stopPropagation","style","opacity","dataTransfer","files","pathDroppedCallback","file","type","match","reader","FileReader","onload","readEvent","target","result","readAsText","handleDragOverEvent","handleDragLeaveEvent","addEventListener","bind","prototype","onPathDropped","callback","onPathRestored","handlePathRestored","requestPath","bezierJSON","localStorage","getItem","setInterval","newBezierJSON","setItem","destroy","removeEventListener","DildoGeneration","VertexNormalsHelper_1","DildoGeometry_1","DildoMaterials_1","mergeGeometries_1","PathFinder_1","randomWebColor_1","constants_1","BumpMapper_1","canvasId","canvas","document","getElementById","parent","parentElement","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","ambientLightA","AmbientLight","set","multiplyScalar","lightDistanceFactor","add","ambientLightB","PointLight","intensityFactor","directionalLightA","DirectionalLight","directionalLightB","renderer","WebGLRenderer","preserveDrawingBuffer","antialias","controls","makeOrbitControls","domElement","update","geometries","partialResults","_self","resizeCanvas","animate","requestAnimationFrame","render","width","documentElement","clientWidth","body","height","clientHeight","setAttribute","setSize","setViewOffset","rebuild","removeCachedGeometries","baseRadius","outline","getBounds","baseShape","mkCircularPolygon","shapeSegmentCount","baseShapeExcentricity","DildoGeometry","assign","useTextureImage","textureImagePath","doubleSingleSide","renderFaces","DoubleSide","BackSide","FrontSide","wireframe","DildoMaterials","createMainMaterial","lookAt","Vector3","spineGeometry","spineVertices","forEach","spineVert","push","addSpine","showBasicPerpendiculars","addPerpendicularPaths","_a","bumpmappedDildoMesh","showBumpmapTargets","addMesh","performSlice","__performPlaneSlice","userData","showNormals","vnHelper","VertexNormalsHelper","normalsLength","latheMesh","latheUnbufferedGeometry","leftPlane","Plane","leftSliceGeometry","makeSlice","rightPlane","rightSliceGeometry","sliceMaterial","createSliceMaterial","planeGeom","PlaneGeometry","planeMesh","MeshBasicMaterial","transparent","side","rotation","Math","PI","KEY_SPLIT_PANE_MESH","showSplitPane","planeIntersectionPoints","makeAndAddPlaneIntersection","connectedPaths","PathFinder","findAllPathsOnMesh","p","geometry","geometryVertexIndex","linesMesh_1","Line","LineBasicMaterial","randomWebColor","i","addPrecalculatedShapeOutlines","pointGeometry","linesMesh","triangulatedGeometries","triangulationGeometry","makePlaneTriangulation","closeCutAreas","mergeGeometries","EPS","showLeftSplit","uvsNeedUpdate","buffersNeedUpdate","slicedMeshLeft","showRightSplit","slicedMeshRight","KEY_LEFT_SLICE_PLANE","KEY_LEFT_SLICE_GEOMETRY","KEY_RIGHT_SLICE_PLANE","KEY_RIGHT_SLICE_GEOMETRY","KEY_PLANE_INTERSECTION_POINTS","KEY_SPLIT_TRIANGULATION_GEOMETRIES","mesh","old","remove","dispose","generateSTL","exporter","stlBuffer","stlData","parse","onComplete","join","warn","extendStatics","__extends","d","b","setPrototypeOf","__proto__","Array","hasOwnProperty","call","TypeError","String","__","constructor","create","DildoBaseClass","plotboilerplate_1","earcut_typescript_1","UVHelpers_1","DEG_TO_RAD","faces","faceVertexUvs","_super","topIndex","bottomIndex","outerPerpLines","innerPerpLines","flatSidePolygon","leftFlatIndices","rightFlatIndices","leftFlatTriangleIndices","rightFlatTriangleIndices","flatSideBounds","hollowBottomEdgeVertIndices","hollowBottomTriagles","dildoNormals","_buildVertices","_buildFaces","_buildUVMapping","bumpmapTexture","__applyBumpmap","__buildSlice","outlineBounds","outlineVert","sliceIndex","heightT","isBending","bendAngle","arcRadius","shapeTwistAngle","outlineXPct","max","shapeVert","vert","rotateVertY","_bendVertex","__buildSpine","shapeCenter","__buildPerps","perpendicularVert","normalizePerpendiculars","halfIndices","floor","j","perpDifference","endVert","rotateVert","outerPerpVert","normalizeVectorXY","Line3","__makeFlatSideVertices","shapeRadius","Polygon","getPerpendicularPathVertices","nextIndex","__makeFlatSideFaces","polygonVertices","flatSideIndex","polygonData","flattenVert2dArray","triangleIndices","earcut","a","c","makeFace3","includeBottomVert","getInner","getPerpendicularHullLines","perpLines","_getTopVertex","topPoint","min","_getBottomVertex","axis","angle","applyAxisAngle","applyBumpMap","bumpMapTexture","outlineSegmentCount","closeTop","Boolean","closeBottom","makeHollow","baseShapeSegmentCount","s","addFace4ByIndices","__makeBackFrontFaces","_buildHollowBottomFaces","_buildEndFaces","edgeVertices","edgeVertIndex","findClosestEdgeIndex","tmpDist","index","distance","Number","MAX_VALUE","tmpIndex","distanceTo","n","lastIndex","curIndex","Face3","endVertexIndex","shapeIndex","inverseFaceDirection","makeFace4","addCylindricUV4","leftA","leftB","leftC","UVHelpers","makeFlatTriangleUVs","rightA","rightB","rightC","ratioI","ratioJ","Vector2","makeHollowBottomUVs","addPyramidalBaseUV3","bendAngleRad","hollowStrengthX","twistAngle","shapeHeight","shapeBounds","getCenter","isNaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","abs","t","getPointAt","getPerpendicularAt","outlineT","topVertex","bottomVertex","xCenter","yCenter","zCenter","thisGeometry","containingPolygonIndices","triangles","polygonBounds","Bounds","computeFromVertices","Vertex","getUVRatios","vertA","vertB","vertC","textureStore","Map","MeshLambertMaterial","depthTest","visible","emissive","reflectivity","refractionRatio","loadTextureImage","MeshPhongMaterial","flatShading","vertexColors","path","texture","get","TextureLoader","load","threejs_slice_geometry_typescript_1","PlaneMeshIntersection_1","clearDuplicateVertices3_1","vertIndexA","vertIndexB","vertIndexC","vertIndexD","ratioA","ratioB","vertices2d","coordinates","radius","pointCount","excentricity","phi","cos","sin","unbufferedGeometry","plane","slicedGeometry","sliceGeometry","mergeVertices","computeFaceNormals","thisGenerator","planeGeometry","planeGeometryReal","intersectionPoints","PlaneMeshIntersection","getIntersectionPoints","uniqueIntersectionPoints","clearDuplicateVertices3","pointsMaterial","pointsMesh","showSplitShape","triangleGeometry","addRawIntersectionTriangleMesh","triangleMesh","addPrecalculatedMassiveFaces","makeAndAddMassivePlaneIntersection","addPrecalculatedHollowFaces","makeAndAddHollowPlaneIntersection","innerPoint","outerPoint","spineMesh","LineSegments","unbufferedDildoGeometry","addPerpendicularPath","materialColor","outerPerpGeometry","perpLine","outerPerpMesh","generator","connectedPath","currentPathXYData","reduce","earcutInput","trianglesGeometry","vector3","trianglesMesh","KEY_PLANE_INTERSECTION_TRIANGULATION","showSplitShapeTriangulation","base","extend","normalLength","diff","ratio","sqrt","removeAllChildNodes","rootNode","lastChild","removeChild","clamp","imageMap","ImageStore","getImage","image","createElement","isImageLoaded","complete","naturalHeight","undefined","epsilon","visitedVertices","Set","unvisitedVertIndices","numVisitedVertices","pathVertices","collectedPaths","clear","pathVertIndices","mapVerticesToGeometryIndices","_pathVert","nextUnvisitedIndex","values","next","findUnvisitedPaths","combineAdjacentPaths","unvisitedIndex","adjacentVertIndex","delete","findAdjacentFace","faceCount","f","faceHasVertIndex","pathVertIndex","isVisited","has","resultPaths","unvisitedPathIndexSet","_path","currentPathIndex","currentPath","nextPath","findAdjacentPath","reverse","concat","faceIndex","face","pathVert","foundIndex","foundDist","curDist","currentVertIndex","pointsOfIntersection","mathPlane","localToWorld","planePointA","copy","planePointB","planePointC","setFromCoplanarPoints","lineAB","lineBC","lineCA","__setPointOfIntersection","line","intersectionPoint","intersectLine","pointOfIntersection","containsElementFrom","fromIndex","eps","vertexNormals","getAttribute","collectedFaceNormals","faceNormalA","array","faceNormalB","faceNormalC","addVertexNormal","normals","averageNormal","computeAverageVector","buffer","vertexNormal","vectors","avg","nrml","divideScalar","DEFAULT_BEZIER_JSON","globalThis","ngdg","isMobileDevice","navigator","userAgent","vendor","opera","test","substr","locateVertexInArray","vertArray","closestDist","closestIndex","dist","mergeAndMapVertices","locateVertexInArray_1","baseGeometry","mergeGeometry","vertexMap","uvData","v","mergeVert","indexInBase","defaults_1","ImageStore_1","DildoGeneration_1","ConfigIO_1","isMobileDevice_1","WebColorsMalachite_1","WebColorsContrast_1","WebColors_1","colorSet","maxLen","WebColorsMalachite","WebColorsContrast","WebColors","round","random","cssRGB","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","m","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","keys","every","key","splice","r","definition","o","enumerable","obj","prop","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}