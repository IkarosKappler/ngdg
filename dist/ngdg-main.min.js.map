{"version":3,"file":"ngdg-main.min.js","mappings":"uBAAIA,E,iBCQJC,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQE,gBAAa,EACrB,IAAIC,EAAQ,EAAQ,KAChBC,EAAyB,EAAQ,KACjCC,EAA8B,EAAQ,KAC1CL,EAAQE,WAAa,CACjBI,aAAc,SAAUC,EAAeC,EAAkBC,EAASC,EAAUC,GACxE,IAAIC,GAAyB,EAAIR,EAAuBS,sBAAsBN,EAAeC,GACzFM,EAAsB,IAAIX,EAAMY,SACpCD,EAAoBE,SAAWJ,EAAuBK,KAAI,SAAUC,GAChE,IAAIC,EAAWD,EAAWE,IAAIC,QAE9B,OADAhB,EAA4BiB,0BAA0BC,mBAAmBL,EAAWM,MAAOL,EAAUR,EAAQc,iBACtGN,KAEX,IAAIO,EAAmB,IAAIvB,EAAMwB,OAAOb,EAAqB,IAAIX,EAAMyB,eAAe,CAClFC,KAAM,IACNC,MAAO,SAMPC,EAAY,KAGhB,GAFAC,QAAQC,IAAI,qBAAsBtB,EAAQuB,WAAY,UAAWzB,GAE7DE,EAAQuB,YAAczB,EAAS,CAC/B,IAAK,IAAI0B,EAAI,EAAGA,EAAI5B,EAAc6B,aAAaC,OAAQF,IACnD,IAAK,IAAIG,EAAI,EAAGA,EAAI/B,EAAc6B,aAAaD,GAAGE,OAAQC,IAAK,CAC3D,IAAIC,EAAYhC,EAAc6B,aAAaD,GAAGG,GAC1CE,EAASjC,EAAcS,SAASuB,GAChCE,EAAS,EAAMN,GAAK5B,EAAc6B,aAAaC,OAAS,GACxDK,EAASJ,GAAK/B,EAAc6B,aAAaD,GAAGE,OAAS,GACrDM,EAAalC,EAAQmC,YAAYF,EAAQD,GACzCI,EAAa/B,EAAoBE,SAASuB,GAC9CC,EAAOM,KAAKD,EAAYF,IAahCnC,GAAmB,IAAIL,EAAM4C,gBAAiBC,aAAazC,IAC1CM,uBAEjBkB,EAAY,IAAI5B,EAAM8C,KAAKzC,EAAkBE,GAEjD,MAAO,CAAEqB,UAAWA,EAAWL,iBAAkBA,M,cCjDzD5B,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQkD,qBAAkB,EAC1B,IAAI/C,EAAQ,EAAQ,KAChBgD,EAAwB,EAAQ,KAChCC,EAAkB,EAAQ,KAC1BC,EAAmB,EAAQ,KAC3BhD,EAA8B,EAAQ,KACtCiD,EAAoB,EAAQ,KAC5BC,EAAe,EAAQ,IACvBC,EAAmB,EAAQ,KAC3BC,EAAc,EAAQ,KACtBC,EAAe,EAAQ,KACvBR,EAAiC,WACjC,SAASA,EAAgBS,EAAUhD,GAC/BiD,KAAKC,OAASC,SAASC,eAAeJ,GACtCC,KAAKI,OAASJ,KAAKC,OAAOI,cAC1BL,KAAKM,MAAQ,IAAI/D,EAAMgE,MACvBP,KAAKQ,OAAS,IAAIjE,EAAMkE,kBAAkB,GAAIC,OAAOC,WAAaD,OAAOE,YAAa,GAAK,KAC3FZ,KAAKQ,OAAOK,SAASC,EAAI,IAGzBd,KAAKe,cAAgB,IAAIxE,EAAMyE,aAAa,SAC5ChB,KAAKe,cAAcF,SAASI,IAAI,IAAK,GAAI,KAAKC,eAAeC,IAG7DnB,KAAKM,MAAMc,IAAIpB,KAAKe,eACpBf,KAAKqB,cAAgB,IAAI9E,EAAM+E,WAAW,SAAUC,EAAuB,KAA6B,IACxGvB,KAAKqB,cAAcR,SAASI,KAAK,IAAK,EAAG,KAAKC,eARpB,IAS1BlB,KAAKM,MAAMc,IAAIpB,KAAKqB,eACpBrB,KAAKwB,kBAAoB,IAAIjF,EAAMkF,iBAAiB,SAAUF,GAE9DvB,KAAKwB,kBAAkBX,SAASI,IAAI,IAAK,IAAK,KAAKC,eAZzB,IAa1BlB,KAAKM,MAAMc,IAAIpB,KAAKwB,mBACpBxB,KAAKM,MAAMc,IAAIpB,KAAKwB,kBAAkBE,QACtC1B,KAAK2B,kBAAoB,IAAIpF,EAAMkF,iBAAiB,SAAUF,GAC9DvB,KAAK2B,kBAAkBd,SAASI,KAAK,KAAM,KAAM,IAAIC,eAhB3B,IAiB1BlB,KAAKM,MAAMc,IAAIpB,KAAK2B,mBACpB3B,KAAK4B,SAAW,IAAIrF,EAAMsF,cAAc,CACpC5B,OAAQD,KAAKC,OACb6B,uBAAuB,EACvBC,WAAW,IAIf/B,KAAKgC,SAAWjF,EAAQkF,kBAAkBjC,KAAKQ,OAAQR,KAAK4B,SAASM,YACrElC,KAAKgC,SAASG,SAEdnC,KAAKoC,WAAa,GAGlBpC,KAAKqC,eAAiB,GACtB,IAAIC,EAAQtC,KACZU,OAAO6B,iBAAiB,UAAU,WAC9BD,EAAME,kBAEVxC,KAAKwC,eACL,IAAIC,EAAU,WACVC,sBAAsBD,GACtBH,EAAMN,SAASG,SACfG,EAAMV,SAASe,OAAOL,EAAMhC,MAAOgC,EAAM9B,SAE7CiC,IAgYJ,OA3XAnD,EAAgBsD,UAAUJ,aAAe,WACrC,IAAIK,EAAQnC,OAAOC,YAAcT,SAAS4C,gBAAgBC,aAAe7C,SAAS8C,KAAKD,YACnFE,EAASvC,OAAOE,aAAeV,SAAS4C,gBAAgBI,cAAgBhD,SAAS8C,KAAKE,aAC1FlD,KAAKC,OAAO4C,MAAQA,EACpB7C,KAAKC,OAAOgD,OAASA,EACrBjD,KAAKC,OAAOkD,MAAMN,MAAaA,EAAQ,KACvC7C,KAAKC,OAAOkD,MAAMF,OAAcA,EAAS,KACzCjD,KAAKC,OAAOmD,aAAa,QAAcP,EAAQ,MAC/C7C,KAAKC,OAAOmD,aAAa,SAAUH,EAAS,MAC5CjD,KAAK4B,SAASyB,QAAQR,EAAOI,GAE7BjD,KAAKQ,OAAO8C,cAAcT,EAAOI,EAAQJ,EAAQ,EAAGI,EAAS,GAAIJ,EAAOI,IAgB5E3D,EAAgBsD,UAAUW,QAAU,SAAUxG,GAC1CiD,KAAKwD,yBACL,IAAIC,EAAa1G,EAAQ2G,QAAQC,YAAYd,MACzCe,EAAYnH,EAA4BiB,0BAA0BmG,kBAAkBJ,EAAY1G,EAAQ+G,kBAAmB/G,EAAQgH,uBAInIlH,OAH2C,IAAvBE,EAAQuB,YAA6BvB,EAAQuB,YAGzCvB,EAAQF,QAAUE,EAAQF,QAAU,KAC5DF,EAAgB,IAAI6C,EAAgBwE,cAAc9H,OAAO+H,OAAO,CAAEL,UAAWA,GAAmD7G,IAChImH,EAAkBnH,EAAQmH,sBAAuD,IAA7BnH,EAAQoH,iBAC5DA,OAAuD,IAA7BpH,EAAQoH,iBAAmCpH,EAAQoH,iBAAmB,KAChGC,EAA2C,WAAxBrH,EAAQsH,YAA2B9H,EAAM+H,WAAqC,SAAxBvH,EAAQsH,YAAyB9H,EAAMgI,SAAWhI,EAAMiI,UACjIC,OAAyC,IAAtB1H,EAAQ0H,WAA4B1H,EAAQ0H,UAE/D3H,EAAW2C,EAAiBiF,eAAeC,mBAAmBT,EAAiBO,EAAWN,EAAkBC,GAE5GxH,GAAmB,IAAIL,EAAM4C,gBAAiBC,aAAazC,GAC/DC,EAAiBK,uBAEjB,IAAIkB,EAAY,IAAI5B,EAAM8C,KAAKzC,EAAkBE,GACjDkD,KAAKQ,OAAOoE,OAAO,IAAIrI,EAAMsI,QAAQ,GAAI,EAAG,MAC5C7E,KAAKQ,OAAOoE,OAAOzG,EAAU0C,UAC7B,IAAIiE,EAAgB,IAAIvI,EAAMY,SAa9B,GAZAR,EAAcoI,cAAcC,SAAQ,SAAUC,GAC1CH,EAAc1H,SAAS8H,KAAKD,EAAUxH,YAEtCV,EAAQoI,UACR1I,EAA4BiB,0BAA0ByH,SAASnF,KAAM8E,GAGrE/H,EAAQqI,yBACR3I,EAA4BiB,0BAA0B2H,sBAAsBrF,KAAMrD,GAIlFI,EAAQuB,WAAY,CA0CpB,IAAIgH,EAAKxF,EAAaxD,WAAWI,aAAaC,EAAeC,EAAkBC,EAASC,EAAUC,GAAUwI,EAAsBD,EAAGnH,UAAWL,EAAmBwH,EAAGxH,iBACtKK,EAAYoH,EACRxI,EAAQyI,qBACR1H,EAAiB+C,SAAStC,GAAK,IAC/ByB,KAAKyF,QAAQ3H,IAGrB,GAAIf,EAAQ2I,aACR1F,KAAK2F,oBAAoBxH,EAAWxB,EAAe8H,EAAWP,EAAiBC,EAAkBpH,QAQjG,GAHAoB,EAAU0C,SAAStC,GAAK,IACxBJ,EAAUyH,SAAuB,cAAI,EACrC5F,KAAKyF,QAAQtH,GACTpB,EAAQ8I,YAAa,CACrB,IAAIC,EAAW,IAAIvG,EAAsBwG,oBAAoB5H,EAAWpB,EAAQiJ,cAAe,OAE/FhG,KAAKM,MAAMc,IAAI0E,GACf9F,KAAKoC,WAAW8C,KAAKY,KAoBjCxG,EAAgBsD,UAAU+C,oBAAsB,SAAUM,EAAWC,EAAyBzB,EAAWP,EAAiBC,EAAkBpH,GAExI,IAAIoJ,EAAY,IAAI5J,EAAM6J,MAAM,IAAI7J,EAAMsI,QAAQ,EAAG,EAAG,GAAI,GACxDwB,EAAoB5J,EAA4BiB,0BAA0B4I,UAAUJ,EAAyBC,GAC7GI,EAAa,IAAIhK,EAAM6J,MAAM,IAAI7J,EAAMsI,QAAQ,EAAG,GAAI,GAAI,GAC1D2B,EAAqB/J,EAA4BiB,0BAA0B4I,UAAUJ,EAAyBK,GAC9GE,EAAgBhH,EAAiBiF,eAAegC,oBAAoBxC,EAAiBO,EAAWN,GAEhGwC,EAAY,IAAIpK,EAAMqK,cAAc,IAAK,KACzCC,EAAY,IAAItK,EAAM8C,KAAKsH,EAAW,IAAIpK,EAAMuK,kBAAkB,CAClE5I,MAAO,QACP6I,aAAa,EACbC,QAAS,IACTC,KAAM1K,EAAM+H,cAEhBuC,EAAUK,SAASxI,EAAIyI,KAAKC,GAAK,EACjCpH,KAAKqC,eAAexC,EAAYwH,qBAAuBR,EACnD9J,EAAQuK,gBACRT,EAAUhG,SAASC,EAAI,GACvBd,KAAKyF,QAAQoB,IAUjB,IARA,IAAIU,EAA0B9K,EAA4BiB,0BAA0B8J,4BAA4BxH,KAAMiG,EAAWC,EAAyBW,EAAWF,EAAW5J,GAK5K0K,GAAiB,IAAI9H,EAAa+H,YAAaC,mBAAmBtB,EAAmBkB,GAGhFK,EAAI,EAAGA,EAAIH,EAAehJ,OAAQmJ,IAAK,CAC5C,IAAIC,EAAW,IAAItL,EAAMY,SACzB0K,EAASzK,SAAWqK,EAAeG,GAAGvK,KAAI,SAAUyK,GAChD,OAAOzB,EAAkBjJ,SAAS0K,MAEtC,IAAIC,EAAc,IAAIxL,EAAMyL,KAAKH,EAAU,IAAItL,EAAM0L,kBAAkB,CACnE/J,OAAO,EAAI0B,EAAiBsI,gBAAgBC,EAAG,YAEnDJ,EAAYlH,SAAStC,GAAK,IAE1ByB,KAAKyF,QAAQsC,GAEjB,GAAIhL,EAAQqL,8BAA+B,CAEvC,IAAIC,EAAgB,IAAI9L,EAAMY,SAC9BkL,EAAcjL,SAAWmK,EACzB,IAAIe,EAAY,IAAI/L,EAAMyL,KAAKK,EAAe,IAAI9L,EAAM0L,kBAAkB,CACtE/J,MAAO,WAEXoK,EAAUzH,SAAStC,GAAK,IACxB+J,EAAUzH,SAASC,GAAK,GACxBd,KAAKyF,QAAQ6C,GAIjB,IADA,IAAIC,EAAyB,GACpBJ,EAAI,EAAGA,EAAIV,EAAehJ,OAAQ0J,IAAK,CAC5C,IAAIK,EAAwB/L,EAA4BiB,0BAA0B+K,uBAAuBzI,KAAMqG,EAAmBoB,EAAeU,GAAIpL,GACrJwL,EAAuBrD,KAAKsD,GAGxBzL,EAAQ2L,iBACR,EAAIhJ,EAAkBiJ,iBAAiBtC,EAAmBmC,EAAuB3I,EAAY+I,MAC7F,EAAIlJ,EAAkBiJ,iBAAiBnC,EAAoBgC,EAAuB3I,EAAY+I,MAGtG,GAAI7L,EAAQ8L,cAAe,CACvBxC,EAAkByC,eAAgB,EAElCzC,EAAkB0C,mBAAoB,EACtC1C,EAAkBpJ,uBAClB,IAAI+L,EAAiB,IAAIzM,EAAM8C,KAAKgH,EAAmBI,GAKvD,GAJAuC,EAAenI,SAAStC,GAAK,IAC7ByK,EAAenI,SAASC,GAAK,GAC7BkI,EAAepD,SAAuB,cAAI,EAC1C5F,KAAKyF,QAAQuD,GACTjM,EAAQ8I,YAAa,CACrB,IAAIC,EAAW,IAAIvG,EAAsBwG,oBAAoBiD,EAAgBjM,EAAQiJ,cAAe,OACpGhG,KAAKM,MAAMc,IAAI0E,GACf9F,KAAKoC,WAAW8C,KAAKY,IAG7B,GAAI/I,EAAQkM,eAAgB,CACxBzC,EAAmBsC,eAAgB,EAEnCtC,EAAmBuC,mBAAoB,EACvCvC,EAAmBvJ,uBACnB,IAAIiM,EAAkB,IAAI3M,EAAM8C,KAAKmH,EAAoBC,GAKzD,GAJAyC,EAAgBrI,SAAStC,GAAK,IAC9B2K,EAAgBrI,SAASC,EAAI,GAC7BoI,EAAgBtD,SAAuB,cAAI,EAC3C5F,KAAKyF,QAAQyD,GACTnM,EAAQ8I,YAAa,CACjBC,EAAW,IAAIvG,EAAsBwG,oBAAoBmD,EAAiBnM,EAAQiJ,cAAe,OACrGhG,KAAKM,MAAMc,IAAI0E,GACf9F,KAAKoC,WAAW8C,KAAKY,IAI7B9F,KAAKqC,eAAexC,EAAYsJ,sBAAwBhD,EACxDnG,KAAKqC,eAAexC,EAAYuJ,yBAA2B/C,EAC3DrG,KAAKqC,eAAexC,EAAYwJ,uBAAyB9C,EACzDvG,KAAKqC,eAAexC,EAAYyJ,0BAA4B9C,EAC5DxG,KAAKqC,eAAexC,EAAY0J,+BAAiChC,EACjEvH,KAAKqC,eAAexC,EAAY2J,oCAAsCjB,GA2F1EjJ,EAAgBsD,UAAU6C,QAAU,SAAUgE,GAC1CA,EAAKvC,SAASxI,EAAIyI,KAAKC,GACvBpH,KAAKM,MAAMc,IAAIqI,GACfzJ,KAAKoC,WAAW8C,KAAKuE,IAEzBnK,EAAgBsD,UAAUY,uBAAyB,WAC/C,IAAK,IAAI2E,EAAI,EAAGA,EAAInI,KAAKoC,WAAW3D,OAAQ0J,IAAK,CAC7C,IAAIuB,EAAM1J,KAAKoC,WAAW+F,GAG1BnI,KAAKM,MAAMqJ,OAAOD,GAGdA,aAAenN,EAAM8C,OACrBqK,EAAI7B,SAAS+B,UACbF,EAAI5M,SAAS8M,WAGrB5J,KAAKoC,WAAa,IAOtB9C,EAAgBsD,UAAUiH,YAAc,SAAU9M,EAAS+M,GAEvD,IAAIC,EAAY,GAEhB,IAAK,IAAI5B,KAAKnI,KAAKoC,WACf,IAAoD,IAAhDpC,KAAKoC,WAAW+F,GAAGvC,SAAuB,aAAY,CACtD,IAAIoE,EAAUF,EAASG,MAAMjK,KAAKoC,WAAW+F,IAC7C4B,EAAU7E,KAAK8E,GAGW,mBAAvBjN,EAAQmN,WACfnN,EAAQmN,WAAWH,EAAUI,KAAK,SAGlC/L,QAAQgM,KAAK,qEAGd9K,EAjbyB,GAmbpClD,EAAQkD,gBAAkBA,G,oBChc1B,IACQ+K,EADJC,EAAatK,MAAQA,KAAKsK,YACtBD,EAAgB,SAAUE,EAAGC,GAI7B,OAHAH,EAAgBnO,OAAOuO,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUJ,EAAGC,GAAKD,EAAEG,UAAYF,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAI5C,KAAK4C,EAAOtO,OAAO0G,UAAUgI,eAAeC,KAAKL,EAAG5C,KAAI2C,EAAE3C,GAAK4C,EAAE5C,KACzFyC,EAAcE,EAAGC,IAErB,SAAUD,EAAGC,GAChB,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIM,UAAU,uBAAyBC,OAAOP,GAAK,iCAE7D,SAASQ,IAAOhL,KAAKiL,YAAcV,EADnCF,EAAcE,EAAGC,GAEjBD,EAAE3H,UAAkB,OAAN4H,EAAatO,OAAOgP,OAAOV,IAAMQ,EAAGpI,UAAY4H,EAAE5H,UAAW,IAAIoI,KAGvF9O,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ4H,cAAgB5H,EAAQ+O,oBAAiB,EAOjD,IAAIC,EAAoB,EAAQ,KAC5B7O,EAAQ,EAAQ,KAChBE,EAA8B,EAAQ,KAEtC4O,EAAsB,EAAQ,IAC9BC,EAAc,EAAQ,KACtBC,EAAapE,KAAKC,GAAK,IAKvB+D,EACA,WACInL,KAAK5C,SAAW,GAChB4C,KAAKwL,MAAQ,GACbxL,KAAKyL,cAAgB,CAAC,KAI9BrP,EAAQ+O,eAAiBA,EAEzB,IAAInH,EAA+B,SAAU0H,GAYzC,SAAS1H,EAAcjH,GACnB,IAAI4O,EAAQD,EAAOb,KAAK7K,OAASA,KAkCjC,OAjCAzD,EAAMY,SAAS0N,KAAKc,GACpBA,EAAMnN,aAAe,GACrBmN,EAAMC,UAAY,EAClBD,EAAME,aAAe,EACrBF,EAAM5G,cAAgB,GACtB4G,EAAMG,eAAiB,GACvBH,EAAMI,eAAiB,GACvBJ,EAAMK,gBAAkB,KACxBL,EAAMM,gBAAkB,GACxBN,EAAMO,iBAAmB,GACzBP,EAAMQ,wBAA0B,GAChCR,EAAMS,yBAA2B,GACjCT,EAAMU,eAAiB,KAEvBV,EAAMW,4BAA8B,GACpCX,EAAMY,qBAAuB,GAC7BZ,EAAMa,aAAe,GACrBb,EAAMc,eAAe1P,GACrB4O,EAAMe,YAAY3P,GAClB4O,EAAMgB,gBAAgB5P,GAMlBA,EAAQuB,aACJvB,EAAQ6P,eACRjB,EAAMkB,eAAe9P,EAAQ6P,gBAG7BxO,QAAQgM,KAAK,uFAGduB,EA2uBX,OAzxBArB,EAAUtG,EAAe0H,GAgEzB1H,EAAcpB,UAAUkK,aAAe,SAAUlJ,EAAWmJ,EAAeC,EAAaC,EAAYC,EAASC,EAAWC,EAAWC,EAAWC,GAI1I,IAHA,IAAIC,GAAeR,EAAcS,IAAI9O,EAAIsO,EAAYtO,GAAKqO,EAAclK,MAG/DsF,EAAI,EAAGA,EAAIvE,EAAUxG,SAASqB,OAAQ0J,IAAK,CAChD,IAAIsF,EAAY7J,EAAUxG,SAAS+K,GACnC,GAAIgF,EAAW,CACX,IAAIO,EAAO,IAAInR,EAAMsI,QAAQ4I,EAAU/O,EAAI6O,EAAa,EAAGE,EAAUlP,EAAIgP,GAEzEI,EAAYD,EAAMJ,EAAiB,EAAG,GACtCtN,KAAK4N,YAAYF,EAAMN,EAAWC,EAAWH,GAC7CQ,EAAKnP,GAAKwO,EAAcS,IAAIjP,MAE3B,CACGmP,EAAO,IAAInR,EAAMsI,QAAQ4I,EAAU/O,EAAI6O,EAAaP,EAAYzO,EAAGkP,EAAUlP,EAAIgP,GAErFI,EAAYD,EAAMJ,EAAiB,EAAG,GAE1CtN,KAAKxB,aAAayO,GAAY9E,GAAKnI,KAAK5C,SAASqB,OACjDuB,KAAK5C,SAAS8H,KAAKwI,GACD,GAAdT,IACS,GAAL9E,GACOuF,EAAKnP,EACZ4J,EAAI,GAAKvE,EAAUxG,SAASqB,QACrBiP,EAAKnP,KAmB5ByF,EAAcpB,UAAUiL,aAAe,SAAUC,EAAaf,EAAeC,EAAaE,EAASC,EAAWC,EAAWC,GACrH,IAAIE,GAAeR,EAAcS,IAAI9O,EAAIsO,EAAYtO,GAAKqO,EAAclK,MAEpEoC,EAAY6I,EAAYrQ,QAC5B,GAAI0P,EAAW,CACX,IAAIO,EAAO,IAAInR,EAAMsI,QAAQI,EAAUvG,EAAI6O,EAAa,EAAGtI,EAAU1G,EAAIgP,GACzEvN,KAAK4N,YAAYF,EAAMN,EAAWC,EAAWH,GAC7CQ,EAAKnP,GAAKwO,EAAcS,IAAIjP,OAGxBmP,EAAO,IAAInR,EAAMsI,QAAQI,EAAUvG,EAAI6O,EAAaP,EAAYzO,EAAG0G,EAAU1G,EAAIgP,GAEzFvN,KAAK+E,cAAcG,KAAKwI,IAgB5B1J,EAAcpB,UAAUmL,aAAe,SAAUnK,EAAWmJ,EAAeC,EAC3EgB,EAAmBd,EAASC,EAAWC,EAAWC,EAAWY,EAAyBjI,GAGlF,IAFA,IAAIuH,GAAeR,EAAcS,IAAI9O,EAAIsO,EAAYtO,GAAKqO,EAAclK,MACpEqL,EAAc,CAAC,EAAG/G,KAAKgH,MAAMvK,EAAUxG,SAASqB,OAAS,IACpD2P,EAAI,EAAGA,EAAIF,EAAYzP,OAAQ2P,IAAK,CACzC,IAAIjG,EAAI+F,EAAYE,GAChBX,EAAY7J,EAAUxG,SAAS+K,GACnC,GAAIgF,EAAW,CACX,IAAIO,EAAO,IAAInR,EAAMsI,QAAQ4I,EAAU/O,EAAI6O,EAAa,EAAGE,EAAUlP,EAAIgP,GACzEvN,KAAK4N,YAAYF,EAAMN,EAAWC,EAAWH,GAC7CQ,EAAKnP,GAAKwO,EAAcS,IAAIjP,OAGxBmP,EAAO,IAAInR,EAAMsI,QAAQ4I,EAAU/O,EAAI6O,EAAaP,EAAYzO,EAAGkP,EAAUlP,EAAIgP,GAEzF,IAAIc,EAAiB,IAAI9R,EAAMsI,QAAQmI,EAAYtO,EAAIsP,EAAkBtP,EAAGsO,EAAYzO,EAAIyP,EAAkBzP,EAAG,GAEjH,GAAS,GAAL4J,EACA,IAAImG,EAAU,IAAI/R,EAAMsI,QAAQ6I,EAAKhP,EAAIsP,EAAkBtP,EAAGgP,EAAKnP,EAAIyP,EAAkBzP,EAAG,QAExF+P,EAAU,IAAI/R,EAAMsI,QAAQ6I,EAAKhP,EAAIsP,EAAkBtP,EAAGgP,EAAKnP,EAAIyP,EAAkBzP,EAAG,GAChGgQ,EAAWD,EAASlB,EAAYF,EAASQ,EAAKhP,EAAGgP,EAAKnP,GACtD,IAAIiQ,EAAgBd,EAAKjQ,QACzB+Q,EAAc9P,GAAK2P,EAAe3P,EAClC8P,EAAcjQ,GAAK8P,EAAe9P,EAClCiQ,EAAc1N,GAAKuN,EAAevN,EAC9BmN,GACAxR,EAA4BiB,0BAA0B+Q,kBAAkBf,EAAMY,EAAStI,GAElF,GAALmC,EACAnI,KAAK8L,eAAe5G,KAAK,IAAI3I,EAAMmS,MAAMhB,EAAMY,IAG/CtO,KAAK+L,eAAe7G,KAAK,IAAI3I,EAAMmS,MAAMhB,EAAMY,MA0H3DtK,EAAcpB,UAAU+L,uBAAyB,SAAUC,GASvD5O,KAAKgM,gBAAkB,IAAIZ,EAAkByD,QAAQ7O,KAAK8O,8BAA6B,IAAO,GAC9F9O,KAAKqM,eAAiBrM,KAAKgM,gBAAgBrI,YAE3C,IAAK,IAAIwE,EAAI,EAAGA,EAAInI,KAAKgM,gBAAgB5O,SAASqB,OAAQ0J,IAAK,CAC3D,IAAI4G,EAAY/O,KAAK5C,SAASqB,OAC9BuB,KAAKiM,gBAAgB/G,KAAK6J,GAC1B/O,KAAK5C,SAAS8H,KAAK,IAAI3I,EAAMsI,QAAQ7E,KAAKgM,gBAAgB5O,SAAS+K,GAAGzJ,EAAGsB,KAAKgM,gBAAgB5O,SAAS+K,GAAG5J,EAAGqQ,IACnG,IAANzG,GAAWA,EAAI,IAAMnI,KAAKgM,gBAAgB5O,SAASqB,QAAU0J,EAAI,IAAMnI,KAAKgM,gBAAgB5O,SAASqB,QAErGuB,KAAKsM,4BAA4BpH,KAAK6J,GAG9C,IAAS5G,EAAI,EAAGA,EAAInI,KAAKgM,gBAAgB5O,SAASqB,OAAQ0J,IAAK,CACvD4G,EAAY/O,KAAK5C,SAASqB,OAC9BuB,KAAKkM,iBAAiBhH,KAAK6J,GAC3B/O,KAAK5C,SAAS8H,KAAK,IAAI3I,EAAMsI,QAAQ7E,KAAKgM,gBAAgB5O,SAAS+K,GAAGzJ,EAAGsB,KAAKgM,gBAAgB5O,SAAS+K,GAAG5J,GAAIqQ,IACpG,IAANzG,GAAWA,EAAI,IAAMnI,KAAKgM,gBAAgB5O,SAASqB,QAAU0J,EAAI,IAAMnI,KAAKgM,gBAAgB5O,SAASqB,QAErGuB,KAAKsM,4BAA4BpH,KAAK6J,KAWlD/K,EAAcpB,UAAUoM,oBAAsB,WAiB1C,IAVA,IAAI1M,EAAQtC,KAERiP,EAAkBjP,KAAKiM,gBAAgB5O,KAAI,SAAU6R,GACrD,OAAO5M,EAAMlF,SAAS8R,MAEtBC,EAAc1S,EAA4BiB,0BAA0B0R,mBAAmBH,GAEvFI,GAAkB,EAAIhE,EAAoBiE,QAAQH,GAG7ChH,EAAI,EAAGA,EAAI,EAAIkH,EAAgB5Q,OAAQ0J,GAAK,EAAG,CACpD,IAAIoH,EAAIF,EAAgBlH,GACpBqC,EAAI6E,EAAgBlH,EAAI,GACxBqH,EAAIH,EAAgBlH,EAAI,GAC5B1L,EAA4BiB,0BAA0B+R,UAAUzP,KAAMA,KAAKiM,gBAAgBsD,GAAIvP,KAAKiM,gBAAgBzB,GAAIxK,KAAKiM,gBAAgBuD,IAC7IxP,KAAKmM,wBAAwBjH,KAAK,CAAClF,KAAKiM,gBAAgBsD,GAAIvP,KAAKiM,gBAAgBzB,GAAIxK,KAAKiM,gBAAgBuD,KAE9G,IAASrH,EAAI,EAAGA,EAAI,EAAIkH,EAAgB5Q,OAAQ0J,GAAK,EAAG,CAChDoH,EAAIF,EAAgBlH,GACpBqC,EAAI6E,EAAgBlH,EAAI,GACxBqH,EAAIH,EAAgBlH,EAAI,GAC5B1L,EAA4BiB,0BAA0B+R,UAAUzP,KAAMA,KAAKkM,iBAAiBqD,GAAIvP,KAAKkM,iBAAiBsD,GAAIxP,KAAKkM,iBAAiB1B,IAChJxK,KAAKoM,yBAAyBlH,KAAK,CAAClF,KAAKkM,iBAAiBqD,GAAIvP,KAAKkM,iBAAiB1B,GAAIxK,KAAKkM,iBAAiBsD,OAGtHxL,EAAcpB,UAAUkM,6BAA+B,SAAUY,EAAmBC,GAGhF,IADA,IAAIV,EAAkB,GACb9G,EAAI,EAAGA,EAAInI,KAAK+L,eAAetN,OAAQ0J,IAC5C8G,EAAgB/J,KAAKyK,EAAW3P,KAAK+L,eAAe5D,GAAGvK,MAAQoC,KAAK+L,eAAe5D,GAAG3K,KAG1F,IAAS2K,EAAInI,KAAK8L,eAAerN,OAAS,EAAG0J,GAAK,EAAGA,IACjD8G,EAAgB/J,KAAKyK,EAAW3P,KAAK8L,eAAe3D,GAAGvK,MAAQoC,KAAK8L,eAAe3D,GAAG3K,KAM1F,OAHIkS,GACAT,EAAgB/J,KAAKlF,KAAK5C,SAAS4C,KAAK6L,cAErCoD,GAEXjL,EAAcpB,UAAUgN,0BAA4B,WAGhD,IADA,IAAIC,EAAY,GACP1H,EAAI,EAAGA,EAAInI,KAAK+L,eAAetN,OAAQ0J,IAC5C0H,EAAU3K,KAAKlF,KAAK+L,eAAe5D,IAGvC,IAASA,EAAInI,KAAK8L,eAAerN,OAAS,EAAG0J,GAAK,EAAGA,IACjD0H,EAAU3K,KAAKlF,KAAK8L,eAAe3D,IAEvC,OAAO0H,GAWX7L,EAAcpB,UAAUkN,cAAgB,SAAU/C,EAAeI,EAAWC,EAAWC,GACnF,GAAIF,EAAW,CACX,IAAI4C,EAAW,IAAIxT,EAAMsI,QAAQ,EAAG,EAAG,GAGvC,OAFA7E,KAAK4N,YAAYmC,EAAU3C,EAAWC,EAAW,GACjD0C,EAASxR,GAAKwO,EAAcS,IAAIjP,EACzBwR,EAGP,OAAO,IAAIxT,EAAMsI,QAAQ,EAAGkI,EAAciD,IAAIzR,EAAG,IAUzDyF,EAAcpB,UAAUqN,iBAAmB,SAAUlD,GAMjD,OALkB,IAAIxQ,EAAMsI,QAAQ,EAAGkI,EAAcS,IAAIjP,EAAG,IAehEyF,EAAcpB,UAAUgL,YAAc,SAAUF,EAAMN,EAAWC,EAAWH,GACxE,IAAIgD,EAAO,IAAI3T,EAAMsI,QAAQ,EAAG,EAAG,GAC/BsL,EAAQ/C,EAAYF,EAGxBQ,EAAKhP,GAAK2O,EACVK,EAAK0C,eAAeF,EAAMC,GAC1BzC,EAAKhP,GAAK2O,GA4DdrJ,EAAcpB,UAAUyN,aAAe,SAAUC,GAE7C,IAAK,IAAInI,EAAI,EAAGA,EAAInI,KAAKxB,aAAaC,OAAQ0J,IAC1C,IAAK,IAAIiG,EAAI,EAAGA,EAAIpO,KAAKxB,aAAa2J,GAAG1J,OAAQ2P,IAC7C,KAAIzP,EAAYqB,KAAKxB,aAAa2J,GAAGiG,GACxBpO,KAAK5C,SAASuB,KASvCqF,EAAcpB,UAAU8J,YAAc,SAAU3P,GAC5C,IAAI6G,EAAY7G,EAAQ6G,UACpB2M,EAAsBxT,EAAQwT,oBAC9BC,EAAWC,QAAQ1T,EAAQyT,UAC3BE,EAAcD,QAAQ1T,EAAQ2T,aAC9BC,EAAaF,QAAQ1T,EAAQ4T,YAC7BC,EAAwBhN,EAAUxG,SAASqB,OAC/CuB,KAAKyL,cAAc,GAAK,GACxB,IAAK,IAAIoF,EAAI,EAAGA,EAAIN,EAAqBM,IACrC,IAAK,IAAI1I,EAAI,EAAGA,EAAIyI,EAAuBzI,IACnC0I,EAAI,GACA1I,EAAI,IACJnI,KAAK8Q,kBAAkBD,EAAG1I,EAAI,EAAG0I,EAAI,EAAG1I,EAAGwI,GACvCxI,EAAI,GAAKvE,EAAUxG,SAASqB,QAE5BuB,KAAK8Q,kBAAkBD,EAAG1I,EAAG0I,EAAI,EAAG,EAAGF,IAMvDA,IACA3Q,KAAKgP,sBACLhP,KAAK+Q,wBAELL,IACIC,EACA3Q,KAAKgR,0BAELhR,KAAKiR,eAAejR,KAAK6L,YAAa,EAAG+E,GAAuB,IAEpEJ,GACAxQ,KAAKiR,eAAejR,KAAK4L,SAAU5L,KAAKxB,aAAaC,OAAS,EAAGmS,EAAuBD,IAGhG3M,EAAcpB,UAAUoO,wBAA0B,WAwB9C,IAvBA,IAqBI3B,EArBA/M,EAAQtC,KACRkR,EAAelR,KAAKsM,4BAA4BjP,KAAI,SAAU8T,GAC9D,OAAO7O,EAAMlF,SAAS+T,MAEtBC,EAAuB,SAAU1D,GAKjC,IAHA,IAEI2D,EAFAC,EAAQ,EACRC,EAAWC,OAAOC,UAEbtJ,EAAI,EAAGA,EAAI+I,EAAazS,OAAQ0J,IAAK,CAC1C,IAAIuJ,EAAWpP,EAAMgK,4BAA4BnE,IAC5CkJ,EAAUH,EAAa/I,GAAGwJ,WAAWjE,IAAS6D,IAC/CD,EAAQI,EACRH,EAAWF,GAGnB,OAAOC,GAGPM,EAAI5R,KAAKxB,aAAa,GAAGC,OACzBoT,EAAYT,EAAqBpR,KAAK5C,SAASwU,EAAI,IAG9CzJ,EAAI,EAAGA,EAAIyJ,EAAGzJ,IAAK,CACxB,IAAI2J,EAAWV,EAAqBpR,KAAK5C,SAAS4C,KAAKxB,aAAa,GAAG2J,KAEvEkH,EAAkB,CAACwC,EAAW7R,KAAKxB,aAAa,GAAQ,GAAL2J,EAASyJ,EAAI,EAAIzJ,EAAI,GAAInI,KAAKxB,aAAa,GAAG2J,IACjGnI,KAAKwL,MAAMtG,KAAK,IAAI3I,EAAMwV,MAAM1C,EAAgB,GAAIA,EAAgB,GAAIA,EAAgB,KACxFrP,KAAKuM,qBAAqBrH,KAAKmK,GAC3BwC,IAAcC,IAEdzC,EAAkB,CAACyC,EAAUD,EAAW7R,KAAKxB,aAAa,GAAG2J,IAC7DnI,KAAKwL,MAAMtG,KAAK,IAAI3I,EAAMwV,MAAM1C,EAAgB,GAAIA,EAAgB,GAAIA,EAAgB,KACxFrP,KAAKuM,qBAAqBrH,KAAKmK,IAEnCwC,EAAYC,IAYpB9N,EAAcpB,UAAUqO,eAAiB,SAAUe,EAAgBC,EAAYrB,EAAuBsB,GAElG,IAAK,IAAI/J,EAAI,EAAGA,EAAIyI,EAAuBzI,IACvC1L,EAA4BiB,0BAA0B+R,UAAUzP,KAAMA,KAAKxB,aAAayT,GAAY9J,EAAI,GAAI6J,EAAgBhS,KAAKxB,aAAayT,GAAY9J,GAAI+J,GAC1J/J,EAAI,GAAKyI,GACTnU,EAA4BiB,0BAA0B+R,UAAUzP,KAAMA,KAAKxB,aAAayT,GAAY9J,GAAI6J,EAAgBhS,KAAKxB,aAAayT,GAAY,GAAIC,IAStKlO,EAAcpB,UAAUmO,qBAAuB,WAE3C,IAAK,IAAI5I,EAAI,EAAGA,EAAI,EAAInI,KAAKgM,gBAAgB5O,SAASqB,OAAQ0J,IAC1D1L,EAA4BiB,0BAA0ByU,UAAUnS,KAAMA,KAAKiM,gBAAgB9D,GAAInI,KAAKiM,gBAAgB9D,EAAI,GAAInI,KAAKkM,iBAAiB/D,GAAInI,KAAKkM,iBAAiB/D,EAAI,KAWxLnE,EAAcpB,UAAU+J,gBAAkB,SAAU5P,GAQhD,IAPA,IAAI6G,EAAY7G,EAAQ6G,UACpB2M,EAAsBxT,EAAQwT,oBAC9BK,EAAwBhN,EAAUxG,SAASqB,OAC3C+R,EAAWC,QAAQ1T,EAAQyT,UAC3BE,EAAcD,QAAQ1T,EAAQ2T,aAC9BC,EAAaF,QAAQ1T,EAAQ4T,YAExBE,EAAI,EAAGA,EAAIN,EAAqBM,IACrC,IAAK,IAAI1I,EAAI,EAAGA,EAAIvE,EAAUxG,SAASqB,OAAQ0J,IAC3C1L,EAA4BiB,0BAA0B0U,gBAAgBpS,KAAM6Q,EAAG1I,EAAI,EAAG0I,EAAI,EAAG1I,EAAGoI,EAAqBK,EAAuBD,GACxIxI,EAAI,GAAKvE,EAAUxG,SAASqB,QAE5BhC,EAA4BiB,0BAA0B0U,gBAAgBpS,KAAM6Q,EAAG1I,EAAI,EAAG0I,EAAI,EAAG1I,EAAGoI,EAAqBK,EAAuBD,GAIxJ,GAAIA,EAAY,CAGZ,IAASxI,EAAI,EAAGA,EAAInI,KAAKmM,wBAAwB1N,OAAQ0J,IAAK,CAC1D,IAAIkK,EAAQrS,KAAKmM,wBAAwBhE,GAAG,GACxCmK,EAAQtS,KAAKmM,wBAAwBhE,GAAG,GACxCoK,EAAQvS,KAAKmM,wBAAwBhE,GAAG,GAC5CmD,EAAYkH,UAAUC,oBAAoBzS,KAAMA,KAAKqM,eAAgBgG,EAAOC,EAAOC,GAGvF,IAASpK,EAAI,EAAGA,EAAInI,KAAKoM,yBAAyB3N,OAAQ0J,IAAK,CAG3D,IAAIuK,EAAS1S,KAAKoM,yBAAyBjE,GAAG,GAC1CwK,EAAS3S,KAAKoM,yBAAyBjE,GAAG,GAC1CyK,EAAS5S,KAAKoM,yBAAyBjE,GAAG,GAC9CmD,EAAYkH,UAAUC,oBAAoBzS,KAAMA,KAAKqM,eAAgBqG,EAAQC,EAAQC,GAGzF,IAASzK,EAAI,EAAGA,EAAI,EAAInI,KAAKgM,gBAAgB5O,SAASqB,OAAQ0J,IAAK,CAC/D,IAAI0K,GAAU1K,EAAI,IAAMnI,KAAKgM,gBAAgB5O,SAASqB,OAAS,GAC3DqU,EAAS3K,GAAKnI,KAAKgM,gBAAgB5O,SAASqB,OAAS,GACzDuB,KAAKyL,cAAc,GAAGvG,KAAK,CACvB,IAAI3I,EAAMwW,QAAQ,EAAKD,GACvB,IAAIvW,EAAMwW,QAAQ,EAAKF,GACvB,IAAItW,EAAMwW,QAAQ,EAAKD,KAE3B9S,KAAKyL,cAAc,GAAGvG,KAAK,CACvB,IAAI3I,EAAMwW,QAAQ,EAAKF,GACvB,IAAItW,EAAMwW,QAAQ,EAAKF,GACvB,IAAItW,EAAMwW,QAAQ,EAAKD,MAKnC,GAAIpC,EACA,GAAIC,EACAqC,EAAoBhT,KAAMA,KAAKsM,4BAA6BtM,KAAKuM,2BAGjE,IAASpE,EAAI,EAAGA,EAAIyI,EAAuBzI,IACvC1L,EAA4BiB,0BAA0BuV,oBAAoBjT,KAAMmI,EAAI,EAAGyI,GACnFzI,EAAI,GAAKyI,GAETnU,EAA4BiB,0BAA0BuV,oBAAoBjT,KAAMmI,EAAI,EAAGyI,GAMvG,GAAIJ,EACA,KAAIqB,EAAYtB,EAAsB,EACtC,IAASpI,EAAI,EAAGA,EAAIyI,EAAuBzI,IACvC1L,EAA4BiB,0BAA0BuV,oBAAoBjT,KAAMmI,EAAI,EAAGyI,GACnFzI,EAAI,GAAKyI,GAETnU,EAA4BiB,0BAA0BuV,oBAAoBjT,KAAM6R,EAAWjB,GAIvG5Q,KAAK8I,eAAgB,GAoBzB9E,EAAcpB,UAAUkO,kBAAoB,SAAUvB,EAAG/E,EAAGgF,EAAGjF,EAAG2H,GAC9DzV,EAA4BiB,0BAA0ByU,UAAUnS,KAAMA,KAAKxB,aAAa+Q,GAAG/E,GAAIxK,KAAKxB,aAAagR,GAAGhF,GAAIxK,KAAKxB,aAAa+Q,GAAGhF,GAAIvK,KAAKxB,aAAagR,GAAGjF,GAAI2H,IAO9KlO,EAAcpB,UAAU6J,eAAiB,SAAU1P,GAqB/C,IApBA,IAAI6G,EAAY7G,EAAQ6G,UACpBF,EAAU3G,EAAQ2G,QAClB6M,EAAsBxT,EAAQwT,oBAC9BI,EAAaF,QAAQ1T,EAAQ4T,YAC7BuC,EAAgBnW,EAAQqQ,UAAY,IAAOjG,KAAKC,GAChD+L,EAAkBpW,EAAQoW,gBAC1BC,EAAarW,EAAQqW,WAAa7H,EAClC0C,EAA0BwC,QAAQ1T,EAAQkR,yBAC1CjI,OAAiD,IAA1BjJ,EAAQiJ,cAAgCjJ,EAAQiJ,cAAgB,GACvF+G,EAAgBrJ,EAAQC,YACxB0P,EAActG,EAAc9J,OAC5BqQ,EAAc1P,EAAUD,YACxBmK,EAAcwF,EAAYC,YAE1BlG,EADYgG,EACYH,EACxB/F,EAAYpQ,EAAQoQ,YACnBqG,MAAMnG,IACPA,IAAcmE,OAAOiC,mBACrBpG,IAAcmE,OAAOkC,mBACrBvM,KAAKwM,IAAIT,GAAgB,IACpBrC,EAAI,EAAGA,EAAIN,EAAqBM,IAAK,CAC1C,IAAI+C,EAAIzM,KAAK6I,IAAI,EAAK7I,KAAKqG,IAAI,EAAKqD,GAAKN,EAAsB,KAC/DvQ,KAAKxB,aAAaqS,GAAK,GACvB,IAAI7D,EAActJ,EAAQmQ,WAAWD,GACjC5F,EAAoBtK,EAAQoQ,mBAAmBF,GAC/C1G,GAAWH,EAAcS,IAAIjP,EAAIyO,EAAYzO,GAAK8U,EAClDU,EAAWlD,GAAKN,EAAsB,GAC1CvQ,KAAK8M,aAAalJ,EAAWmJ,EAAeC,EAAa6D,EAAG3D,EAASC,EAAW+F,EAAc7F,EAAW+F,EAAaW,GACtH/T,KAAK6N,aAAaC,EAAaf,EAAeC,EAAaE,EAASC,EAAW+F,EAAc7F,GAC7FrN,KAAK+N,aAAanK,EAAWmJ,EAAeC,EAAagB,EAAmBd,EAASC,EAAW+F,EAAc7F,EAAWY,EAAyBjI,GAetJ,IAAIgO,EAAYhU,KAAK8P,cAAc/C,EAAeI,EAAW+F,EAAc7F,GACvE4G,EAAejU,KAAKiQ,iBAAiBlD,GACzC/M,KAAK4L,SAAW5L,KAAK5C,SAASqB,OAC9BuB,KAAK5C,SAAS8H,KAAK8O,GACnBhU,KAAK6L,YAAc7L,KAAK5C,SAASqB,OACjCuB,KAAK5C,SAAS8H,KAAK+O,GACftD,GAEA3Q,KAAK2O,uBAAuBxH,KAAKqG,IAAI8F,EAAYzQ,MAAOyQ,EAAYrQ,QAAU,EAAMkQ,IAG5FnP,EAAcpB,UAAUiK,eAAiB,SAAUD,GAE/C,IADA,IACSzE,EAAI,EAAGA,EAAInI,KAAKxB,aAAaC,OAAQ0J,IAC1C,IAAK,IAAIiG,EAAI,EAAGA,EAAIpO,KAAKxB,aAAa2J,GAAG1J,OAAQ2P,OAMlDpK,EA1xBuB,CA2xBhCmH,GACF/O,EAAQ4H,cAAgBA,EAExB,IAAIuK,EAAa,SAAUb,EAAMyC,EAAO+D,EAASC,GAC7C,IAAIjE,EAAO,IAAI3T,EAAMsI,QAAQ,EAAG,EAAG,GAMnC,OALA6I,EAAKhP,GAAKwV,EACVxG,EAAKnP,GAAK4V,EACVzG,EAAK0C,eAAeF,EAAMC,GAC1BzC,EAAKhP,GAAKwV,EACVxG,EAAKnP,GAAK4V,EACHzG,GAYPC,EAAc,SAAUD,EAAMyC,EAAO+D,EAASE,GAC9C,IAAIlE,EAAO,IAAI3T,EAAMsI,QAAQ,EAAG,EAAG,GAMnC,OALA6I,EAAKhP,GAAKwV,EACVxG,EAAK5M,GAAKsT,EACV1G,EAAK0C,eAAeF,EAAMC,GAC1BzC,EAAKhP,GAAKwV,EACVxG,EAAK5M,GAAKsT,EACH1G,GAuCPsF,EAAsB,SAAUqB,EAAcC,EAA0BC,GAUxE,IARA,IAAIC,EAAgBpJ,EAAkBqJ,OAAOC,oBAAoBJ,EAAyBjX,KAAI,SAAUsB,GACpG,OAAO,IAAIyM,EAAkBuJ,OAAON,EAAajX,SAASuB,GAAWD,EAAG2V,EAAajX,SAASuB,GAAWmC,OAEzG8T,EAAc,SAAUlH,GAExB,OAAO,IAAInR,EAAMwW,SAASrF,EAAKhP,EAAI8V,EAAcxE,IAAItR,GAAK8V,EAAc3R,OAAQ6K,EAAK5M,EAAI0T,EAAcxE,IAAIzR,GAAKiW,EAAcvR,SAGzH2Q,EAAI,EAAGA,EAAIW,EAAU9V,OAAQmV,IAAK,CACvC,IAAIiB,EAAQR,EAAajX,SAASmX,EAAUX,GAAG,IAC3CkB,EAAQT,EAAajX,SAASmX,EAAUX,GAAG,IAC3CmB,EAAQV,EAAajX,SAASmX,EAAUX,GAAG,IAC/CS,EAAa5I,cAAc,GAAGvG,KAAK,CAAC0P,EAAYC,GAAQD,EAAYE,GAAQF,EAAYG,Q,cCx5BhG7Y,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQsI,oBAAiB,EACzB,IAKQsQ,EACAtQ,EANJnI,EAAQ,EAAQ,KACpBH,EAAQsI,gBAIAsQ,EAAe,IAAIC,IACnBvQ,EAAiB,CAUjBC,mBAAoB,SAAUT,EAAiBO,EAAWN,EAAkBC,GACxE,OAAOF,EACD,IAAI3H,EAAM2Y,oBAAoB,CAC5BhX,MAAO,SACPuG,UAAWA,EAEX0Q,WAAW,EACXnO,QAAS,EAETC,KAAM7C,EACNgR,SAAS,EACTC,SAAU,EACVC,aAAc,EACdC,gBAAiB,IACjBlY,IAAKqH,EAAe8Q,iBAAiBrR,KAEvC,IAAI5H,EAAMkZ,kBAAkB,CAC1BvX,MAAO,QACPuG,UAAWA,EACXiR,aAAa,EACbP,WAAW,EACXnO,QAAS,EAETC,KAAM7C,EACNgR,SAAS,EACTC,SAAU,EACVC,aAAc,EACdC,gBAAiB,IACjBlY,IAAK,QAGjBqJ,oBAAqB,SAAUxC,EAAiBO,EAAWN,GACvD,OAAIM,EACO,IAAIlI,EAAMuK,kBAAkB,CAAErC,WAAW,IAIzC,IAAIlI,EAAM2Y,oBAAoB,CACjChX,MAAOgG,EAAkB,QAAW,UACpCO,WAAW,EAEX0Q,WAAW,EACXnO,QAAS,EACTC,KAAM1K,EAAM+H,WAEZ8Q,SAAS,EACTC,SAAU,EACVC,aAAc,EACdC,gBAAiB,IACjBlY,IAAK6G,EAAkBQ,EAAe8Q,iBAAiBrR,GAAoB,KAC3EwR,cAAc,KAU1BH,iBAAkB,SAAUI,GACxB,IAAIC,EAAUb,EAAac,IAAIF,GAO/B,OANKC,IAGDA,GADa,IAAItZ,EAAMwZ,eACNC,KAAKJ,GACtBZ,EAAa/T,IAAI2U,EAAMC,IAEpBA,M,cCtFnB3Z,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQsB,+BAA4B,EACpC,IAAInB,EAAQ,EAAQ,KAEhB8O,EAAsB,EAAQ,IAC9BD,EAAoB,EAAQ,KAE5B6K,EAAsC,EAAQ,KAC9CC,EAA0B,EAAQ,KAClCC,EAA4B,EAAQ,KACpC7K,EAAc,EAAQ,KACtBzL,EAAc,EAAQ,KAC1BzD,EAAQsB,0BAA4B,CAYhC+R,UAAW,SAAU5H,EAAUuO,EAAYC,EAAYC,EAAYpE,GAC3DA,EACArK,EAAS2D,MAAMtG,KAAK,IAAI3I,EAAMwV,MAAMuE,EAAYD,EAAYD,IAG5DvO,EAAS2D,MAAMtG,KAAK,IAAI3I,EAAMwV,MAAMqE,EAAYC,EAAYC,KAsBpEnE,UAAW,SAAUtK,EAAUuO,EAAYC,EAAYC,EAAYC,EAAYrE,GACvEA,GAEA9V,EAAQsB,0BAA0B+R,UAAU5H,EAAUuO,EAAYE,EAAYD,GAAY,GAC1Fja,EAAQsB,0BAA0B+R,UAAU5H,EAAUyO,EAAYC,EAAYF,GAAY,KAG1Fja,EAAQsB,0BAA0B+R,UAAU5H,EAAUuO,EAAYC,EAAYC,GAAY,GAC1Fla,EAAQsB,0BAA0B+R,UAAU5H,EAAUwO,EAAYE,EAAYD,GAAY,KAelGlE,gBAAiB,SAAUvK,EAAU0H,EAAG/E,EAAGgF,EAAGjF,EAAGgG,EAAqBK,EAAuBsB,GACrFA,GAGArK,EAAS4D,cAAc,GAAGvG,KAAK,CAC3B,IAAI3I,EAAMwW,QAAQxD,EAAIgB,EAAqB/F,EAAIoG,GAC/C,IAAIrU,EAAMwW,QAAQxD,EAAIgB,EAAqBhG,EAAIqG,GAC/C,IAAIrU,EAAMwW,QAAQvD,EAAIe,EAAqB/F,EAAIoG,KAEnD/I,EAAS4D,cAAc,GAAGvG,KAAK,CAC3B,IAAI3I,EAAMwW,QAAQxD,EAAIgB,EAAqBhG,EAAIqG,GAC/C,IAAIrU,EAAMwW,QAAQvD,EAAIe,EAAqBhG,EAAIqG,GAC/C,IAAIrU,EAAMwW,QAAQvD,EAAIe,EAAqB/F,EAAIoG,OAInD/I,EAAS4D,cAAc,GAAGvG,KAAK,CAC3B,IAAI3I,EAAMwW,QAAQxD,EAAIgB,EAAqB/F,EAAIoG,GAC/C,IAAIrU,EAAMwW,QAAQvD,EAAIe,EAAqB/F,EAAIoG,GAC/C,IAAIrU,EAAMwW,QAAQxD,EAAIgB,EAAqBhG,EAAIqG,KAEnD/I,EAAS4D,cAAc,GAAGvG,KAAK,CAC3B,IAAI3I,EAAMwW,QAAQvD,EAAIe,EAAqB/F,EAAIoG,GAC/C,IAAIrU,EAAMwW,QAAQvD,EAAIe,EAAqBhG,EAAIqG,GAC/C,IAAIrU,EAAMwW,QAAQxD,EAAIgB,EAAqBhG,EAAIqG,OAW3DqC,oBAAqB,SAAUpL,EAAU0H,EAAGqB,GAExC,IAAI4F,EAAS,EAAkD,EAA5CrP,KAAKwM,IAAI,GAAMpE,EAAIqB,GAClC6F,EAAS,EAAwD,EAAlDtP,KAAKwM,IAAI,IAAOpE,EAAI,GAAKqB,GAC5C/I,EAAS4D,cAAc,GAAGvG,KAAK,CAAC,IAAI3I,EAAMwW,QAAQyD,EAAQ,GAAI,IAAIja,EAAMwW,QAAQ,GAAK,GAAI,IAAIxW,EAAMwW,QAAQ0D,EAAQ,MASvHrH,mBAAoB,SAAUsH,GAG1B,IADA,IAAIC,EAAc,GACTxO,EAAI,EAAGA,EAAIuO,EAAWjY,OAAQ0J,IACnCwO,EAAYzR,KAAKwR,EAAWvO,GAAGzJ,EAAGgY,EAAWvO,GAAG5J,GAEpD,OAAOoY,GAUX9S,kBAAmB,SAAU+S,EAAQC,EAAYC,QACjB,IAAjBA,IACPA,EAAe,GAInB,IAFA,IACIC,EADA3Z,EAAW,GAEN+K,EAAI,EAAGA,EAAI0O,EAAY1O,IAC5B4O,EAAgB,EAAV5P,KAAKC,IAAUe,EAAI0O,GACzBzZ,EAAS8H,KAAK,IAAIkG,EAAkBuJ,OAAOxN,KAAK6P,IAAID,GAAOH,EAASE,EAAc3P,KAAK8P,IAAIF,GAAOH,IAEtG,OAAO,IAAIxL,EAAkByD,QAAQzR,GAAU,IAcnDkJ,UAAW,SAAU4Q,EAAoBC,GAGrC,IAIIC,GAAiB,EAAInB,EAAoCoB,eAAeH,EAAoBC,GAJ/E,GAiBjB,OATAC,EAAeE,gBAEfF,EAAeG,qBAORH,GAWX5P,4BAA6B,SAAUgQ,EAAe/N,EAAMyN,EAC5DO,EACAC,EAEA3a,GAGI,IAEI4a,GAFwB,IAAIzB,EAAwB0B,uBAETC,sBAAsBpO,EAAMyN,EAAoBO,EAAeC,GAE1GI,GAA2B,EAAI3B,EAA0B4B,yBAAyBJ,EAD5E,MAENtP,EAAgB,IAAI9L,EAAMY,SAC9BkL,EAAcjL,SAAW0a,EACzB,IAAIE,EAAiB,IAAIzb,EAAMyB,eAAe,CAC1CC,KAAM,IACNC,MAAO,QAEP+Z,EAAa,IAAI1b,EAAMwB,OAAOsK,EAAe2P,GAC7Cjb,EAAQmb,iBACRD,EAAWpX,SAAStC,GAAK,IACzB0Z,EAAWpX,SAASC,GAAK,GACzB0W,EAAc/R,QAAQwS,IAU1B,IANA,IAAI9I,EAAc/S,EAAQsB,0BAA0B0R,mBAAmB0I,GAEnEzI,GAAkB,EAAIhE,EAAoBiE,QAAQH,GAGlDgJ,EAAmB,IAAI5b,EAAMY,SACxBgL,EAAI,EAAGA,EAAI2P,EAAyBrZ,OAAQ0J,IACjDgQ,EAAiB/a,SAAS8H,KAAK4S,EAAyB3P,GAAG1K,SAE/D,IAAS0K,EAAI,EAAGA,EAAI,EAAIkH,EAAgB5Q,OAAQ0J,GAAK,EAAG,CACpD,IAAIoH,EAAIF,EAAgBlH,GACpBqC,EAAI6E,EAAgBlH,EAAI,GACxBqH,EAAIH,EAAgBlH,EAAI,GAC5B/L,EAAQsB,0BAA0B+R,UAAU0I,EAAkB5I,EAAG/E,EAAGgF,GAExE,GAAIzS,EAAQqb,+BAAgC,CAGxC,IAAIC,EAAe,IAAI9b,EAAM8C,KAAK8Y,EAAkB,IAAI5b,EAAM0L,kBAAkB,CAC5E/J,MAAO,YAEXma,EAAaxX,SAAStC,GAAK,IAC3B8Z,EAAaxX,SAASC,GAAK,GAC3B0W,EAAc/R,QAAQ4S,GAU1B,OANItb,EAAQub,8BACRlc,EAAQsB,0BAA0B6a,mCAAmCf,EAAeN,GAEpFna,EAAQyb,6BACRpc,EAAQsB,0BAA0B+a,kCAAkCjB,EAAeN,GAEhFY,GAGXS,mCAAoC,SAAUf,EAAeN,GACzD,IAAIS,EAAqBT,EAAmBpI,8BAA6B,GAAM,GAC3EzG,EAAgB,IAAI9L,EAAMY,SAC9BkL,EAAcjL,SAAWua,EAczB,IAbA,IAAIK,EAAiB,IAAIzb,EAAMuK,kBAAkB,CAC7CrC,WAAW,EACXvG,MAAO,SACP8I,QAAS,GACTC,KAAM1K,EAAM+H,WACZyC,aAAa,IAGboI,EAAc/S,EAAQsB,0BAA0B0R,mBAAmBuI,GAEnEtI,GAAkB,EAAIhE,EAAoBiE,QAAQH,GAG7ChH,EAAI,EAAGA,EAAI,EAAIkH,EAAgB5Q,OAAQ0J,GAAK,EAAG,CACpD,IAAIoH,EAAIF,EAAgBlH,GACpBqC,EAAI6E,EAAgBlH,EAAI,GACxBqH,EAAIH,EAAgBlH,EAAI,GAC5B/L,EAAQsB,0BAA0B+R,UAAUpH,EAAekH,EAAG/E,EAAGgF,GAErE,IAAIyI,EAAa,IAAI1b,EAAM8C,KAAKgJ,EAAe2P,GAC/CC,EAAWpX,SAAStC,GAAK,IACzB0Z,EAAWpX,SAASC,EAAI,GACxBmX,EAAWrS,SAAuB,cAAI,EACtC4R,EAAc/R,QAAQwS,IAG1BQ,kCAAmC,SAAUjB,EAAeN,GAGxD,IAFA,IAAI7O,EAAgB,IAAI9L,EAAMY,SAC1B0S,EAAYqH,EAAmBtH,4BAC1BzH,EAAI,EAAGA,EAAI0H,EAAUpR,OAAQ0J,IAAK,CACvC,IAAIuQ,EAAa7I,EAAU1H,GAAGvK,MAC1B+a,EAAa9I,EAAU1H,GAAG3K,IAC9B6K,EAAcjL,SAAS8H,KAAKwT,EAAYC,GACxC,IAAIha,EAAY0J,EAAcjL,SAASqB,OACnC0J,EAAI,IACJE,EAAcmD,MAAMtG,KAAK,IAAI3I,EAAMwV,MAAMpT,EAAY,EAAGA,EAAY,EAAGA,EAAY,IACnF0J,EAAcmD,MAAMtG,KAAK,IAAI3I,EAAMwV,MAAMpT,EAAY,EAAGA,EAAY,EAAGA,EAAY,KAG3F,IAAIqZ,EAAiB,IAAIzb,EAAMuK,kBAAkB,CAC7CrC,WAAW,EACXvG,MAAO,SACP8I,QAAS,GACTC,KAAM1K,EAAM+H,WACZyC,aAAa,IAEbkR,EAAa,IAAI1b,EAAM8C,KAAKgJ,EAAe2P,GAC/CC,EAAWpX,SAAStC,GAAK,IACzB0Z,EAAWpX,SAASC,GAAK,GACzBmX,EAAWrS,SAAuB,cAAI,EACtC4R,EAAc/R,QAAQwS,IAQ1B9S,SAAU,SAAUqS,EAAe1S,GAC/B,IAAI8T,EAAY,IAAIrc,EAAMsc,aAAa/T,EAAe,IAAIvI,EAAM0L,kBAAkB,CAC9E/J,MAAO,YAEX0a,EAAU/X,SAAStC,GAAK,IACxBiZ,EAAc/R,QAAQmT,IAS1BvT,sBAAuB,SAAUmS,EAAesB,GAC5C1c,EAAQsB,0BAA0Bqb,qBAAqBvB,EAAesB,EAAwBhN,eAAgB,UAC9G1P,EAAQsB,0BAA0Bqb,qBAAqBvB,EAAesB,EAAwB/M,eAAgB,QAUlHgN,qBAAsB,SAAUvB,EAAe3H,EAAWmJ,GACtD,IAAIC,EAAoB,IAAI1c,EAAMY,SAClC0S,EAAU7K,SAAQ,SAAUkU,GACxBD,EAAkB7b,SAAS8H,KAAKgU,EAAStb,MAAMH,SAC/Cwb,EAAkB7b,SAAS8H,KAAKgU,EAAS1b,IAAIC,YAEjD,IAAI0b,EAAgB,IAAI5c,EAAMsc,aAAaI,EAAmB,IAAI1c,EAAM0L,kBAAkB,CACtF/J,MAAO8a,KAEXG,EAActY,SAAStC,GAAK,IAC5BiZ,EAAc/R,QAAQ0T,IAS1B1Q,uBAAwB,SAAU2Q,EAAW/B,EAAegC,EAAetc,GAEvE,IAAIuc,EAAoBD,EAAcE,QAAO,SAAUC,EAAa7a,GAChE,IAAI+O,EAAO2J,EAAcja,SAASuB,GAElC,OADA6a,EAAYtU,KAAKwI,EAAKhP,EAAGgP,EAAKnP,GACvBib,IACR,IAECjF,GAAY,EAAIlJ,EAAoBiE,QAAQgK,GAE5CG,EAAoB,IAAIld,EAAMY,SAIlCsc,EAAkBrc,SAAWic,EAAchc,KAAI,SAAUyK,GACrD,OAAOuP,EAAcja,SAAS0K,MAIlC,IADA,IAAIuE,EAAiBjB,EAAkBqJ,OAAOC,oBAAoB+E,EAAkBrc,SAASC,KAAI,SAAUqc,GAAW,OAAO,IAAItO,EAAkBuJ,OAAO+E,EAAQhb,EAAGgb,EAAQnb,OACpKqV,EAAI,EAAGA,EAAIW,EAAU9V,OAAQmV,GAAK,EAAG,CAC1C,IAAIrE,EAAIgF,EAAUX,GACdpJ,EAAI+J,EAAUX,EAAI,GAClBpE,EAAI+E,EAAUX,EAAI,GACtB6F,EAAkBjO,MAAMtG,KAAK,IAAI3I,EAAMwV,MAAMxC,EAAG/E,EAAGgF,IAEnDlE,EAAYkH,UAAUC,oBAAoBgH,EAAmBpN,EAAgBkD,EAAG/E,EAAGgF,GAEvFiK,EAAkB3Q,eAAgB,EAElC2Q,EAAkB1Q,mBAAoB,EACtC0Q,EAAkBxc,uBAClB,IAAI0c,EAAgB,IAAIpd,EAAM8C,KAAKoa,EAAmB,IAAIld,EAAMuK,kBAAkB,CAC9E5I,MAAO,MACP6I,aAAa,EACbC,QAAS,IACTC,KAAM1K,EAAM+H,cAShB,OAPAqV,EAAc9Y,SAAStC,GAAK,IAE5Bob,EAAc/T,SAAuB,cAAI,EACzCwT,EAAU/W,eAAexC,EAAY+Z,sCAAwCH,EACzE1c,EAAQ8c,6BACRT,EAAU3T,QAAQkU,GAEfF,GAUXhL,kBAAmB,SAAUqL,EAAMC,EAAQC,GACvC,IAAIC,EAAYF,EAAOrb,EAAIob,EAAKpb,EAA5Bub,EAAkCF,EAAOxb,EAAIub,EAAKvb,EAElD2b,EAAQF,EADC7S,KAAKgT,KAAKF,EAASA,EAASA,EAASA,GAElDF,EAAOrb,EAAIob,EAAKpb,EAAIub,EAASC,EAC7BH,EAAOxb,EAAIub,EAAKvb,EAAI0b,EAASC,GAUjCvc,mBAAoB,SAAUmc,EAAMC,EAAQC,GACxC,IAAIC,EAAYF,EAAOrb,EAAIob,EAAKpb,EAA5Bub,EAAkCF,EAAOxb,EAAIub,EAAKvb,EAAlD0b,EAAwDF,EAAOjZ,EAAIgZ,EAAKhZ,EAExEoZ,EAAQF,EADC7S,KAAKgT,KAAKF,EAASA,EAASA,EAASA,EAASA,EAASA,GAEpEF,EAAOrb,EAAIob,EAAKpb,EAAIub,EAASC,EAC7BH,EAAOxb,EAAIub,EAAKvb,EAAI0b,EAASC,EAC7BH,EAAOjZ,EAAIgZ,EAAKhZ,EAAImZ,EAASC,GAOjCE,oBAAqB,SAAUC,GAC3B,KAAOA,EAASC,WACZD,EAASE,YAAYF,EAASC,YAWtCE,MAAO,SAAU5I,EAAG5B,EAAKxC,GACrB,OAAOrG,KAAKqG,IAAIrG,KAAK6I,IAAI4B,EAAGpE,GAAMwC,M,YC7crB,IACbyK,EAHRve,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQse,gBAAa,EACrBte,EAAQse,YACAD,EAAW,IAAIxF,IACP,CACR0F,SAAU,SAAU/E,EAAM1L,GAEtB,IAAI0Q,EAAQH,EAAS3E,IAAIF,GASzB,OARKgF,IACDA,EAAQ1a,SAAS2a,cAAc,OAC/BJ,EAASxZ,IAAI2U,EAAMgF,GACnBA,EAAME,OAAS,WACX5Q,EAAW0Q,IAEfA,EAAMxX,aAAa,MAAOwS,IAEvBgF,GAEXG,cAAe,SAAUH,GACrB,OAAOA,EAAMI,UAAoC,IAAxBJ,EAAMK,oBAA+CC,IAAxBN,EAAMK,kB,aCZxE/e,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQsL,gBAAa,EAErB,IAAI7H,EAAc,EAAQ,KACtB6H,EAA4B,WAM5B,SAASA,EAAWyT,GAChBnb,KAAKob,gBAAkB,IAAIC,IAC3Brb,KAAKsb,qBAAuB,IAAID,IAChCrb,KAAKub,mBAAqB,EAC1Bvb,KAAKmb,aAA6B,IAAZA,GAA2BA,GAAW,EAAIA,EAAUtb,EAAY+I,IAyJ1F,OA3IAlB,EAAW9E,UAAU+E,mBAAqB,SAAUuP,EAAoBsE,GACpE,IAAIC,EAAiB,GACrBzb,KAAKob,gBAAgBM,QACrB1b,KAAKsb,qBAAqBI,QAM1B,IAAIC,EAAkBC,EAA6B1E,EAAoBsE,EAAcxb,KAAKmb,SACtFvJ,EAAI+J,EAAgBld,OAOxB,IALAuB,KAAKsb,qBAAuB,IAAID,IAAIM,EAAgBte,KAAI,SAAUwe,EAAWvK,GACzE,OAAOA,MAIJtR,KAAKub,mBAAqB3J,GAAG,CAChC,IAAIkK,EAAqB9b,KAAKsb,qBAAqBS,SAASC,OAAO3f,MAE/DuZ,EAAO5V,KAAKic,mBAAmB/E,EAAoByE,EAAiBG,GACxEL,EAAevW,KAAK0Q,GAGxB,OAAO5V,KAAKkc,qBAAqBT,EAAgBvE,IAerDxP,EAAW9E,UAAUqZ,mBAAqB,SAAU/E,EAAoByE,EAAiBQ,GACrF,IAMIC,EANAxG,EAAO,CAACuG,GAOZ,IANAnc,KAAKob,gBAAgBha,IAAI+a,GACzBnc,KAAKsb,qBAAqBe,OAAOF,GACjCnc,KAAKub,sBAIwG,KAArGa,EAAoBpc,KAAKsc,iBAAiBpF,EAAoByE,EAAiBQ,KAEnFvG,EAAK1Q,KAAKkX,GACVpc,KAAKob,gBAAgBha,IAAIgb,GACzBpc,KAAKsb,qBAAqBe,OAAOD,GACjCpc,KAAKub,qBACLY,EAAiBC,EAErB,OAAOxG,GAaXlO,EAAW9E,UAAU0Z,iBAAmB,SAAUpF,EAAoByE,EAAiBQ,GAEnF,IADA,IAAII,EAAYrF,EAAmB1L,MAAM/M,OAChC+d,EAAI,EAAGA,EAAID,EAAWC,IAC3B,GAAIC,EAAiBvF,EAAoBsF,EAAGL,GAGxC,IAAK,IAAIhU,EAAI,EAAGA,EAAIwT,EAAgBld,OAAQ0J,IAAK,CAC7C,IAAIuU,EAAgBf,EAAgBxT,GACpC,GAAIuU,IAAkBP,IAGlBnc,KAAK2c,UAAUD,GAAnB,CAGA,IAAK1c,KAAK2c,UAAUD,IAAkBD,EAAiBvF,EAAoBsF,EAAGE,GAC1E,OAAOA,EAEX,GAAID,EAAiBvF,EAAoBsF,EAAGE,GACxC,OAAOA,GAMvB,OAAQ,GASZhV,EAAW9E,UAAU+Z,UAAY,SAAUhe,GACvC,OAAOqB,KAAKob,gBAAgBwB,IAAIje,IAUpC+I,EAAW9E,UAAUsZ,qBAAuB,SAAUT,EAAgBvE,GAMlE,IALA,IAAI2F,EAAc,GAEdC,EAAwB,IAAIzB,IAAII,EAAepe,KAAI,SAAU0f,EAAOzL,GACpE,OAAOA,MAEJwL,EAAsB7e,KAAO,GAAG,CACnC,IAAI+e,EAAmBF,EAAsBf,SAASC,OAAO3f,MAC7DygB,EAAsBT,OAAOW,GAC7B,IAAIC,EAAcxB,EAAeuB,GAC7BE,EAAW,KACf,KACIA,EAAWC,EAAiB1B,EAAgBwB,EAAYA,EAAYxe,OAAS,GAAIqe,EAAuB5F,KACvF+F,EAAYxe,OAAS,IAElCwe,EAAcA,EAAYG,UAC1BF,EAAWC,EAAiB1B,EAAgBwB,EAAYA,EAAYxe,OAAS,GAAIqe,EAAuB5F,IAExGgG,IACAD,EAAcA,EAAYI,OAAOH,UAEhCA,GAETL,EAAY3X,KAAK+X,GAErB,OAAOJ,GAEJnV,EAnKoB,GAqK/BtL,EAAQsL,WAAaA,EAUrB,IAAI+U,EAAmB,SAAUvF,EAAoBoG,EAAWxV,GAC5D,IAAIyV,EAAOrG,EAAmB1L,MAAM8R,GACpC,OAAOC,EAAKhO,IAAMzH,GAAuByV,EAAK/S,IAAM1C,GAAuByV,EAAK/N,IAAM1H,GActF8T,EAA+B,SAAU1E,EAAoBsE,EAAcL,GAE3E,IADA,IAAIQ,EAAkB,GACbxT,EAAI,EAAGA,EAAIqT,EAAa/c,OAAQ0J,IAAK,CAI1C,IAHA,IAAIqV,EAAWhC,EAAarT,GACxBsV,GAAc,EACdC,EAAYvC,EACP/M,EAAI,EAAGA,EAAI8I,EAAmB9Z,SAASqB,OAAQ2P,IAAK,CACzD,IAAIuP,EAAUzG,EAAmB9Z,SAASgR,GAAGuD,WAAW6L,GACpDG,GAAWD,KAES,IAAhBD,IAEiB,IAAhBA,GAAqBvG,EAAmB9Z,SAASqgB,GAAY9L,WAAW6L,IAAaG,GAAWF,EAAarP,KAC9GqP,EAAarP,EACbsP,EAAYC,IAIJ,IAAhBF,EACArf,QAAQgM,KAAK,oGACTjC,EACA,+CAIJwT,EAAgBzW,KAAKuY,GAG7B,OAAO9B,GAsBPwB,EAAmB,SAAU1B,EAAgBmC,EAAkBd,EAAuB5F,GACtF,IAAK,IAAIsF,EAAI,EAAGA,EAAItF,EAAmB1L,MAAM/M,OAAQ+d,IACjD,GAAIC,EAAiBvF,EAAoBsF,EAAGoB,GAExC,IAAK,IAAIhW,EAAI,EAAGA,EAAI6T,EAAehd,OAAQmJ,IACvC,GAAKkV,EAAsBF,IAAIhV,GAA/B,CAIA,IAAIsV,EAAWzB,EAAe7T,GAC9B,GAAI6U,EAAiBvF,EAAoBsF,EAAGU,EAAS,IAGjD,OADAJ,EAAsBT,OAAOzU,GACtBsV,EAEN,GAAIT,EAAiBvF,EAAoBsF,EAAGU,EAASA,EAASze,OAAS,IAGxE,OADAqe,EAAsBT,OAAOzU,GACtBsV,EAASE,a,cCvQpClhB,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQwb,2BAAwB,EAChC,IAAIrb,EAAQ,EAAQ,KAChBqb,EAIA,WACI,IAAIjM,EAAQ3L,KASZA,KAAK6X,sBAAwB,SAAUpO,EAAM5B,EAAUsP,EAAOO,GAE1D/L,EAAMkS,qBAAuB,GAC7B,IAAIC,EAAY,IAAIvhB,EAAM6J,MAK1B+Q,EAAM4G,aAAapS,EAAMqS,YAAYC,KAAKvG,EAAkBta,SAASsa,EAAkBlM,MAAM,GAAG+D,KAChG4H,EAAM4G,aAAapS,EAAMuS,YAAYD,KAAKvG,EAAkBta,SAASsa,EAAkBlM,MAAM,GAAGhB,KAChG2M,EAAM4G,aAAapS,EAAMwS,YAAYF,KAAKvG,EAAkBta,SAASsa,EAAkBlM,MAAM,GAAGgE,KAChGsO,EAAUM,sBAAsBzS,EAAMqS,YAAarS,EAAMuS,YAAavS,EAAMwS,aAC5E,IAAI7b,EAAQqJ,EAYZ,OAXA9D,EAAS2D,MAAMxG,SAAQ,SAAUuY,GAC7B9T,EAAKsU,aAAazb,EAAMiN,EAAE0O,KAAKpW,EAASzK,SAASmgB,EAAKhO,KACtD9F,EAAKsU,aAAazb,EAAMkI,EAAEyT,KAAKpW,EAASzK,SAASmgB,EAAK/S,KACtDf,EAAKsU,aAAazb,EAAMkN,EAAEyO,KAAKpW,EAASzK,SAASmgB,EAAK/N,KACtDlN,EAAM+b,OAAS,IAAI9hB,EAAMmS,MAAMpM,EAAMiN,EAAGjN,EAAMkI,GAC9ClI,EAAMgc,OAAS,IAAI/hB,EAAMmS,MAAMpM,EAAMkI,EAAGlI,EAAMkN,GAC9ClN,EAAMic,OAAS,IAAIhiB,EAAMmS,MAAMpM,EAAMkN,EAAGlN,EAAMiN,GAC9CjN,EAAMkc,yBAAyBlc,EAAM+b,OAAQP,GAC7Cxb,EAAMkc,yBAAyBlc,EAAMgc,OAAQR,GAC7Cxb,EAAMkc,yBAAyBlc,EAAMic,OAAQT,MAE1CnS,EAAMkS,sBAEjB7d,KAAKwe,yBAA2B,SAAUC,EAAMtH,GAC5C,IAAIuH,EAAoBvH,EAAMwH,cAAcF,EAAMze,KAAK4e,qBACnDF,GACA1e,KAAK6d,qBAAqB3Y,KAAKwZ,EAAkBjhB,UAIzDuC,KAAK6d,qBAAuB,GAC5B7d,KAAKuP,EAAI,IAAIhT,EAAMsI,QACnB7E,KAAKwK,EAAI,IAAIjO,EAAMsI,QACnB7E,KAAKwP,EAAI,IAAIjT,EAAMsI,QACnB7E,KAAKge,YAAc,IAAIzhB,EAAMsI,QAC7B7E,KAAKke,YAAc,IAAI3hB,EAAMsI,QAC7B7E,KAAKme,YAAc,IAAI5hB,EAAMsI,QAC7B7E,KAAKqe,OAAS,IAAI9hB,EAAMmS,MACxB1O,KAAKse,OAAS,IAAI/hB,EAAMmS,MACxB1O,KAAKue,OAAS,IAAIhiB,EAAMmS,MACxB1O,KAAK4e,oBAAsB,IAAIriB,EAAMsI,SAI7CzI,EAAQwb,sBAAwBA,G,cCtEhC1b,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQoW,eAAY,EACpB,IAAIjW,EAAQ,EAAQ,KACpBH,EAAQoW,UAAY,CAUhBC,oBAAqB,SAAU4B,EAC/Bf,EAAa8C,EAAYC,EAAYC,GACjC,IAAIzB,EAAQR,EAAajX,SAASgZ,GAC9BtB,EAAQT,EAAajX,SAASiZ,GAC9BtB,EAAQV,EAAajX,SAASkZ,GAE9B1B,EAAc,SAAUlH,GACxB,OAAO,IAAInR,EAAMwW,SAASrF,EAAKhP,EAAI4U,EAAYtD,IAAItR,GAAK4U,EAAYzQ,OAAQ6K,EAAKnP,EAAI+U,EAAYtD,IAAIzR,GAAK+U,EAAYrQ,SAE1HoR,EAAa5I,cAAc,GAAGvG,KAAK,CAAC0P,EAAYC,GAAQD,EAAYE,GAAQF,EAAYG,Q,YCtBhG7Y,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ2b,6BAA0B,EAuBlC3b,EAAQ2b,wBAZsB,SAAU3a,EAAU+d,QACvB,IAAZA,IACPA,EAZE,MAeN,IADA,IAAI0D,EAAS,GACJ1W,EAAI,EAAGA,EAAI/K,EAASqB,OAAQ0J,IAC5B2W,EAAoB1hB,EAAUA,EAAS+K,GAAIA,EAAI,EAAGgT,IACnD0D,EAAO3Z,KAAK9H,EAAS+K,IAG7B,OAAO0W,GAWX,IAYIC,EAAsB,SAAU1hB,EAAUwB,EAAQmgB,EAAW5D,GAC7D,IAAK,IAAIhT,EAAI4W,EAAW5W,EAAI/K,EAASqB,OAAQ0J,IACzC,GAdkB0M,EAcJzX,EAAS+K,GAdE2M,EAcElW,EAdKogB,EAcG7D,EAbhCtG,EAAMlD,WAAWmD,GAASkK,EAczB,OAAO,EAfH,IAAUnK,EAAOC,EAAOkK,EAkBpC,OAAO,I,cC3CX9iB,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQa,0BAAuB,EAC/B,IAAIV,EAAQ,EAAQ,KA2CpBH,EAAQa,qBAjCmB,SAAUia,EAAoBta,GAerD,IAbA,IAAIqiB,EAAgBriB,EAAiBsiB,aAAa,UAU9CC,EAAuBxU,MAAMuM,EAAmB1L,MAAM/M,QAGjD+d,EAAI,EAAGA,EAAItF,EAAmB1L,MAAM/M,OAAQ+d,IAAK,CACtD,IAAIe,EAAOrG,EAAmB1L,MAAMgR,GAChC4C,EAAc,IAAI7iB,EAAMsI,QAAQoa,EAAcI,MAAU,EAAJ7C,EAAQ,GAAIyC,EAAcI,MAAU,EAAJ7C,EAAQ,GAAIyC,EAAcI,MAAU,EAAJ7C,EAAQ,IAC5H8C,EAAc,IAAI/iB,EAAMsI,QAAQoa,EAAcI,MAAU,EAAJ7C,EAAQ,GAAIyC,EAAcI,MAAU,EAAJ7C,EAAQ,GAAIyC,EAAcI,MAAU,EAAJ7C,EAAQ,IAC5H+C,EAAc,IAAIhjB,EAAMsI,QAAQoa,EAAcI,MAAU,EAAJ7C,EAAQ,GAAIyC,EAAcI,MAAU,EAAJ7C,EAAQ,GAAIyC,EAAcI,MAAU,EAAJ7C,EAAQ,IAChIgD,EAAgBL,EAAsB5B,EAAKhO,EAAG6P,GAC9CI,EAAgBL,EAAsB5B,EAAK/S,EAAG8U,GAC9CE,EAAgBL,EAAsB5B,EAAK/N,EAAG+P,GAIlD,IADA,IAAIE,EAAU,IAAI9U,MAAMuM,EAAmB9Z,SAASqB,QAC3C0J,EAAI,EAAGA,EAAI+O,EAAmB9Z,SAASqB,OAAQ0J,IAAK,CACzD,IAAIuX,EAAgBC,EAAqBR,EAAqBhX,IAC9DuX,EAActe,IAAI8V,EAAmB9Z,SAAS+K,IAC9CsX,EAAQtX,GAAK,IAAI5L,EAAMmS,MAAMwI,EAAmB9Z,SAAS+K,GAAIuX,GAEjE,OAAOD,GAaX,IAAID,EAAkB,SAAUI,EAAQjhB,EAAWkhB,IAC3ClhB,GAAaihB,EAAOnhB,aAAuC,IAAtBmhB,EAAOjhB,MAC5CihB,EAAOjhB,GAAa,IAExBihB,EAAOjhB,GAAWuG,KAAK2a,IAQvBF,EAAuB,SAAUG,GACjC,IAAIC,EAAM,IAAIxjB,EAAMsI,QAAQ,EAAG,EAAG,GAOlC,OANIib,IACAA,EAAQ9a,SAAQ,SAAUgb,GACtBD,EAAI3e,IAAI4e,MAEZD,EAAIE,aAAaH,EAAQrhB,SAEtBshB,I,YCrFX7jB,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQoN,mCAAqCpN,EAAQwd,qCAAuCxd,EAAQmN,8BAAgCnN,EAAQiL,oBAAsBjL,EAAQiN,sBAAwBjN,EAAQ+M,qBAAuB/M,EAAQkN,yBAA2BlN,EAAQgN,wBAA0BhN,EAAQmP,WAAanP,EAAQwM,SAAM,EACzUxM,EAAQwM,IAAM,KACdxM,EAAQmP,WAAapE,KAAKC,GAAK,IAC/BhL,EAAQgN,wBAA0B,0BAClChN,EAAQkN,yBAA2B,2BACnClN,EAAQ+M,qBAAuB,uBAC/B/M,EAAQiN,sBAAwB,wBAChCjN,EAAQiL,oBAAsB,sBAC9BjL,EAAQmN,8BAAgC,gCACxCnN,EAAQwd,qCAAuC,uCAC/Cxd,EAAQoN,mCAAqC,sC,YChB7CtN,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ8jB,yBAAsB,EAE9B9jB,EAAQ8jB,oBAER,sjD,cCHAC,WAAWC,KAAO,U,YCIlBlkB,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQikB,yBAAsB,EAuB9BjkB,EAAQikB,oBAZkB,SAAUC,EAAW1hB,EAAQuc,GAGnD,IAFA,IAAIoF,EAAc/O,OAAOiC,kBACrB+M,GAAgB,EACXrY,EAAI,EAAGA,EAAImY,EAAU7hB,OAAQ0J,IAAK,CACvC,IAAIsY,EAAOH,EAAUnY,GAAGwJ,WAAW/S,IACb,IAAlB4hB,GAAuBC,EAAOF,GAAeE,EAAOtF,IACpDqF,EAAerY,EACfoY,EAAcE,GAGtB,OAAOD,I,cClBXtkB,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQskB,oBAAsBtkB,EAAQuM,qBAAkB,EACxD,IAAIpM,EAAQ,EAAQ,KAEhBokB,EAAwB,EAAQ,KAqCpCvkB,EAAQuM,gBAvBc,SAAUiY,EAAcC,EAAe1F,QAClC,IAAZA,IACPA,EAfE,MAkBN,IADA,IAAI2F,GAAY,EAAI1kB,EAAQskB,qBAAqBE,EAAcC,EAAe1F,GACrEqB,EAAI,EAAGA,EAAIqE,EAAcrV,MAAM/M,OAAQ+d,IAAK,CACjD,IAAIe,EAAOsD,EAAcrV,MAAMgR,GAC3BjN,EAAIuR,EAAUvD,EAAKhO,GACnB/E,EAAIsW,EAAUvD,EAAK/S,GACnBgF,EAAIsR,EAAUvD,EAAK/N,GAKvB,GADAoR,EAAapV,MAAMtG,KAAK,IAAI3I,EAAMwV,MAAMxC,EAAG/E,EAAGgF,IAC1CqR,EAAcpV,cAAchN,OAAS,GAAK+d,EAAIqE,EAAcpV,cAAc,GAAGhN,OAAQ,CACrF,IAAIsiB,EAASF,EAAcpV,cAAc,GAAG+Q,GAC5CoE,EAAanV,cAAc,GAAGvG,KAAK,CAAC6b,EAAO,GAAGtjB,QAASsjB,EAAO,GAAGtjB,QAASsjB,EAAO,GAAGtjB,eAGpFmjB,EAAanV,cAAc,GAAGvG,KAAK,CAAC,IAAI3I,EAAMwW,QAAQ,EAAK,GAAM,IAAIxW,EAAMwW,QAAQ,EAAK,GAAM,IAAIxW,EAAMwW,QAAQ,EAAK,QAmCjI3W,EAAQskB,oBAjBkB,SAAUE,EAAcC,EAAe1F,GAE7D,IADA,IAAI2F,EAAY,GACPE,EAAI,EAAGA,EAAIH,EAAczjB,SAASqB,OAAQuiB,IAAK,CACpD,IAAIC,EAAYJ,EAAczjB,SAAS4jB,GACnCE,GAAc,EAAIP,EAAsBN,qBAAqBO,EAAaxjB,SAAU6jB,EAAW9F,IAC9E,IAAjB+F,GAGAJ,EAAU5b,KAAK0b,EAAaxjB,SAASqB,QACrCmiB,EAAaxjB,SAAS8H,KAAK+b,EAAUxjB,UAGrCqjB,EAAU5b,KAAKgc,GAGvB,OAAOJ,I,cCtEX1kB,EAAQ,OAAO,EACf,IAAI+kB,EAAa,EAAQ,KACrBC,EAAe,EAAQ,KACvBC,EAAoB,EAAQ,KAChCjlB,EAAQ,EAAO,CACX8jB,oBAAqBiB,EAAWjB,oBAChC5gB,gBAAiB+hB,EAAkB/hB,gBACnCob,WAAY0G,EAAa1G,a,cCL7Bxe,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ8L,oBAAiB,EACzB,IAAIoZ,EAAuB,EAAQ,KAC/BC,EAAsB,EAAQ,KAC9BC,EAAc,EAAQ,KAkC1BplB,EAAQ8L,eAzBa,SAAUoJ,EAAOmQ,GAClC,QAAqB,IAAVnQ,EAAuB,CAC9B,IAAIoQ,EAASva,KAAKqG,SAAuD,IAA5C8T,EAAqBK,mBAAqCL,EAAqBK,mBAAmBljB,OAAS,OAAoD,IAA1C8iB,EAAoBK,kBAAoCL,EAAoBK,kBAAkBnjB,OAAS,OAAoC,IAA1B+iB,EAAYK,UAA4BL,EAAYK,UAAUpjB,OAAS,GAC1U6S,EAAQnK,KAAK2a,MAAM3a,KAAK4a,SAAWL,GAEvC,OAAQD,GACJ,IAAK,YACD,QAAuD,IAA5CH,EAAqBK,mBAC5B,OAAOL,EAAqBK,mBAAmBrQ,EAAQgQ,EAAqBK,mBAAmBljB,QAAQujB,SAGvG5jB,QAAQgM,KAAK,oGAErB,IAAK,QACD,QAAqD,IAA1CmX,EAAoBK,kBAC3B,OAAOL,EAAoBK,kBAAkBtQ,EAAQiQ,EAAoBK,kBAAkBnjB,QAAQujB,SAGnG5jB,QAAQgM,KAAK,mGAGrB,QACI,OAAOoX,EAAYK,UAAUvQ,EAAQkQ,EAAYK,UAAUpjB,QAAQujB,Y,gfCzCxE,MAAMC,EACTC,cACI,MAAO,GAAGD,EAAaE,WAG/BF,EAAaE,QAAU,ECQhB,MAAMC,EAUTnX,cAKI,IAAK,IAAIoX,KAJTriB,KAAKsiB,WAAY,EACjBtiB,KAAKuiB,YAAa,EAClBviB,KAAKwiB,YAAa,EAClBxiB,KAAKoV,SAAU,EACCgN,EAAWK,MACvBziB,KAAKqiB,GAAOD,EAAWK,MAAMJ,IAUzCD,EAAWK,MAAQ,CACfH,WAAW,EACXC,YAAY,EACZC,YAAY,EACZpN,SAAS,GC/BN,MAAMsN,EAQTzX,YAAYrM,GACRoB,KAAK2iB,MAAQ,GACb3iB,KAAK4iB,KAAO,GACZ5iB,KAAK6iB,UAAY,GACjB7iB,KAAK8iB,QAAU,GACf9iB,KAAKpB,OAASA,EAYlBmkB,iBAAiBC,GAEb,OADAN,EAAgBO,aAAajjB,KAAK2iB,MAAOK,GAClChjB,KAiBXkjB,oBAAoBF,GAEhB,OADAhjB,KAAK2iB,MAAQD,EAAgBS,gBAAgBnjB,KAAK2iB,MAAOK,GAClDhjB,KAiBXojB,gBAAgBJ,GAEZ,OADAN,EAAgBO,aAAajjB,KAAK4iB,KAAMI,GACjChjB,KAiBXqjB,mBAAmBL,GAEf,OADAhjB,KAAK4iB,KAAOF,EAAgBS,gBAAgBnjB,KAAK4iB,KAAMI,GAChDhjB,KAYXsjB,qBAAqBN,GAEjB,OADAN,EAAgBO,aAAajjB,KAAK6iB,UAAWG,GACtChjB,KAiBXujB,wBAAwBP,GAEpB,OADAhjB,KAAK6iB,UAAYH,EAAgBS,gBAAgBnjB,KAAK6iB,UAAWG,GAC1DhjB,KAYXwjB,mBAAmBR,GAGf,OADAN,EAAgBO,aAAajjB,KAAK8iB,QAASE,GACpChjB,KAiBXyjB,sBAAsBT,GAGlB,OADAhjB,KAAK8iB,QAAUJ,EAAgBS,gBAAgBnjB,KAAK8iB,QAASE,GACtDhjB,KAaX0jB,eAAeC,GACXjB,EAAgBkB,WAAW5jB,KAAMA,KAAK2iB,MAAOgB,GAajDE,cAAcF,GACVjB,EAAgBkB,WAAW5jB,KAAMA,KAAK4iB,KAAMe,GAahDG,mBAAmBH,GACfjB,EAAgBkB,WAAW5jB,KAAMA,KAAK6iB,UAAWc,GAarDI,iBAAiBJ,GACbjB,EAAgBkB,WAAW5jB,KAAMA,KAAK8iB,QAASa,GAMnDzB,kBAAkB5f,EAAO0hB,EAAWL,GAChC,MAAMM,EAAKN,EAKX,IAAK,IAAIxb,UAJe,IAAb8b,EAAGC,OACVD,EAAGC,OAAS,CAAEtlB,OAAQ0D,EAAM1D,QAE5BqlB,EAAGC,OAAOtlB,OAAS0D,EAAM1D,OACfolB,EACVA,EAAU7b,GAAG8b,GAOrB/B,oBAAoB8B,EAAWG,GAC3B,IAAK,IAAIhc,KAAK6b,EACV,GAAIA,EAAU7b,IAAMgc,EAChB,OAAO,EAGf,OADAH,EAAU9e,KAAKif,IACR,EAMXjC,uBAAuB8B,EAAWI,GAC9B,IAAK,IAAIjc,EAAI,EAAGA,EAAI6b,EAAUvlB,OAAQ0J,IAClC,GAAI6b,EAAU7b,IAAMic,EAChB,OAAOJ,EAAUK,OAAOlc,EAAG,GAEnC,OAAO6b,GC1NR,MAAMrP,EAST1J,YAAYvM,EAAGH,GAMX,GAFAyB,KAAKskB,UAAY,SACjBtkB,KAAKukB,IAAMtC,EAAajG,YACR,IAALtd,EACPsB,KAAKtB,EAAI,EACTsB,KAAKzB,EAAI,OAER,GAAgB,iBAALG,GAA6B,iBAALH,EACpCyB,KAAKtB,EAAIA,EACTsB,KAAKzB,EAAIA,MAER,CACD,MAAMimB,EAAQ9lB,EACQ,iBAAX8lB,EAAM9lB,GAAmC,iBAAX8lB,EAAMjmB,GAC3CyB,KAAKtB,EAAI8lB,EAAM9lB,EACfsB,KAAKzB,EAAIimB,EAAMjmB,IAIXyB,KAAKtB,EADO,iBAALA,EACEA,OACQ,IAALA,EACH,EAEA+lB,IAETzkB,KAAKzB,EADO,iBAALA,EACEA,OACQ,IAALA,EACH,EAEAkmB,KAGrBzkB,KAAK0kB,KAAO,IAAItC,EAChBpiB,KAAKgkB,UAAY,IAAItB,EAAgB1iB,MAYzCiB,IAAIvC,EAAGH,GACH,GAAgB,iBAALG,GAA6B,iBAALH,EAC/ByB,KAAKtB,EAAIA,EACTsB,KAAKzB,EAAIA,MAER,CACD,MAAMimB,EAAQ9lB,EACQ,iBAAX8lB,EAAM9lB,GAAmC,iBAAX8lB,EAAMjmB,GAC3CyB,KAAKtB,EAAI8lB,EAAM9lB,EACfsB,KAAKzB,EAAIimB,EAAMjmB,IAIXyB,KAAKtB,EADO,iBAALA,EACEA,OACQ,IAALA,EACH,EAEA+lB,IAETzkB,KAAKzB,EADO,iBAALA,EACEA,OACQ,IAALA,EACH,EAEAkmB,KAGrB,OAAOzkB,KAWX2kB,KAAKjmB,GAED,OADAsB,KAAKtB,EAAIA,EACFsB,KAWX4kB,KAAKrmB,GAED,OADAyB,KAAKzB,EAAIA,EACFyB,KAUX6kB,OAEI,OADA7kB,KAAKtB,GAAKsB,KAAKtB,EACRsB,KAUX8kB,OAEI,OADA9kB,KAAKzB,GAAKyB,KAAKzB,EACRyB,KAeXoB,IAAI1C,EAAGH,GACH,GAAgB,iBAALG,GAA6B,iBAALH,EAC/ByB,KAAKtB,GAAKA,EACVsB,KAAKzB,GAAKA,MAET,CACD,MAAMimB,EAAQ9lB,EACd,GAAsB,iBAAX8lB,EAAM9lB,GAAmC,iBAAX8lB,EAAMjmB,EAC3CyB,KAAKtB,GAAK8lB,EAAM9lB,EAChBsB,KAAKzB,GAAKimB,EAAMjmB,MAEf,CACD,GAAgB,iBAALG,EAGP,KAAM,qBAAqBA,4BAC/B,GAHIsB,KAAKtB,GAAKA,EAGE,iBAALH,EAGP,KAAM,qBAAqBA,4BAF3ByB,KAAKzB,GAAKA,GAKtB,OAAOyB,KAYX+kB,MAAMC,EAASC,GAGX,OAFAjlB,KAAKtB,GAAKsmB,EACVhlB,KAAKzB,GAAK0mB,EACHjlB,KAWXklB,KAAKF,GAED,OADAhlB,KAAKtB,GAAKsmB,EACHhlB,KAWXmlB,KAAKF,GAED,OADAjlB,KAAKzB,GAAK0mB,EACHjlB,KAeXolB,IAAI1mB,EAAGH,GACH,GAAgB,iBAALG,GAA6B,iBAALH,EAC/ByB,KAAKtB,GAAKA,EACVsB,KAAKzB,GAAKA,MAET,CACD,MAAMimB,EAAQ9lB,EACd,GAAsB,iBAAX8lB,EAAM9lB,GAAmC,iBAAX8lB,EAAMjmB,EAC3CyB,KAAKtB,GAAK8lB,EAAM9lB,EAChBsB,KAAKzB,GAAKimB,EAAMjmB,MAEf,CACD,GAAgB,iBAALG,EAGP,KAAM,qBAAqBA,4BAC/B,GAHIsB,KAAKtB,GAAKA,EAGE,iBAALH,EAGP,KAAM,qBAAqBA,4BAF3ByB,KAAKzB,GAAKA,GAKtB,OAAOyB,KAaXqlB,OAAOzmB,GACH,IAAI0mB,EAAMne,KAAKwM,IAAI3T,KAAKtB,EAAIE,EAAOF,GAAKiW,EAAO4Q,QAC3CC,EAAMre,KAAKwM,IAAI3T,KAAKzB,EAAIK,EAAOL,GAAKoW,EAAO4Q,QAE/C,OADaD,GAAOE,EAWxB/nB,QACI,OAAO,IAAIkX,EAAO3U,KAAKtB,EAAGsB,KAAKzB,GAWnCgT,SAAS7D,GACL,OAAOvG,KAAKgT,KAAKhT,KAAKse,IAAI/X,EAAKhP,EAAIsB,KAAKtB,EAAG,GAAKyI,KAAKse,IAAI/X,EAAKnP,EAAIyB,KAAKzB,EAAG,IAW9E4R,MAAMuV,GACF,MAAMnW,OAAsB,IAAXmW,EACXve,KAAKC,GAAK,EAAID,KAAKwe,MAAM3lB,KAAKtB,EAAGsB,KAAKzB,GACtC4I,KAAKC,GAAK,EAAID,KAAKwe,MAAMD,EAAOhnB,EAAIsB,KAAKtB,EAAGgnB,EAAOnnB,EAAIyB,KAAKzB,GAElE,OAAOgR,EAAI,EAAc,EAAVpI,KAAKC,GAASmI,EAAIA,EAarCqW,WAAWlY,GACP,OAAO,IAAIiH,EAAOjH,EAAKhP,EAAIsB,KAAKtB,EAAGgP,EAAKnP,EAAIyB,KAAKzB,GAarDsnB,MAAMC,EAAQC,GAKV,OAJKA,QAA4B,IAAXA,IAClBA,EAAS,IAAIpR,EAAO,EAAG,IAC3B3U,KAAKtB,EAAIqnB,EAAOrnB,GAAKsB,KAAKtB,EAAIqnB,EAAOrnB,GAAKonB,EAC1C9lB,KAAKzB,EAAIwnB,EAAOxnB,GAAKyB,KAAKzB,EAAIwnB,EAAOxnB,GAAKunB,EACnC9lB,KAaXgmB,OAAO7V,EAAO4V,GACLA,QAA4B,IAAXA,IAClBA,EAAS,CAAErnB,EAAG,EAAGH,EAAG,IAExByB,KAAKolB,IAAIW,GACT5V,GAAShJ,KAAKwe,MAAM3lB,KAAKzB,EAAGyB,KAAKtB,GACjC,IAAIunB,EAAMjmB,KAAKuR,SAASoD,EAAOuR,MAI/B,OAHAlmB,KAAKtB,EAAIunB,EAAM9e,KAAK6P,IAAI7G,GACxBnQ,KAAKzB,EAAI0nB,EAAM9e,KAAK8P,IAAI9G,GACxBnQ,KAAKoB,IAAI2kB,GACF/lB,KAcXkB,eAAeilB,GAGX,OAFAnmB,KAAKtB,GAAKynB,EACVnmB,KAAKzB,GAAK4nB,EACHnmB,KAUX8hB,QAGI,OAFA9hB,KAAKtB,EAAIyI,KAAK2a,MAAM9hB,KAAKtB,GACzBsB,KAAKzB,EAAI4I,KAAK2a,MAAM9hB,KAAKzB,GAClByB,KAUXomB,MAGI,OAFApmB,KAAKtB,GAAKsB,KAAKtB,EACfsB,KAAKzB,GAAKyB,KAAKzB,EACRyB,KAUXqmB,WACI,MAAO,IAAMrmB,KAAKtB,EAAI,IAAMsB,KAAKzB,EAAI,IAYzC+nB,YAAYvpB,GACRA,EAAUA,GAAW,GACrB,IAAI6iB,EAAS,GAQb,OAPAA,EAAO1a,KAAK,WACRnI,EAAQunB,WACR1E,EAAO1a,KAAK,WAAanI,EAAQunB,UAAY,KACjD1E,EAAO1a,KAAK,QAAUlF,KAAKtB,EAAI,KAC/BkhB,EAAO1a,KAAK,QAAUlF,KAAKzB,EAAI,KAC/BqhB,EAAO1a,KAAK,UACZ0a,EAAO1a,KAAK,OACL0a,EAAOzV,KAAK,IASvB+X,oBAAoBqE,GAChB,OAAO,IAAI5R,EAAO4R,EAASvW,IAAItR,EAAIyI,KAAK4a,UAAYwE,EAAS/Y,IAAI9O,EAAI6nB,EAASvW,IAAItR,GAAI6nB,EAASvW,IAAIzR,EAAI4I,KAAK4a,UAAYwE,EAAS/Y,IAAIjP,EAAIgoB,EAASvW,IAAIzR,KAG9JoW,EAAOuR,KAAO,IAAIvR,EAAO,EAAG,GAO5BA,EAAO4Q,QAAU,KACjB5Q,EAAO6R,MAAQ,CA2BXC,eAAgB,CAACC,EAAIC,EAAIC,EAASC,EAAQC,KAEtC,IAAI3W,EAAQhJ,KAAKwe,OAAOgB,EAAGpoB,EAAImoB,EAAGnoB,GAAKuoB,GAASH,EAAGjoB,EAAIgoB,EAAGhoB,GAAKmoB,GAC3DzpB,EAAW,GAKf,OAJAA,EAAS8H,KAAK,IAAIyP,EAAOgS,EAAGjoB,EAAImoB,EAASD,EAAUzf,KAAK6P,IAAI7G,GAAQwW,EAAGpoB,EAAIuoB,EAASF,EAAUzf,KAAK8P,IAAI9G,KACvG/S,EAAS8H,KAAK,IAAIyP,EAAOgS,EAAGjoB,EAAImoB,EAAmB,KAAVD,EAAiBzf,KAAK6P,IAAI7G,EAAQhJ,KAAKC,GAAK,GAAIuf,EAAGpoB,EAAIuoB,EAAmB,KAAVF,EAAiBzf,KAAK8P,IAAI9G,EAAQhJ,KAAKC,GAAK,KACrJhK,EAAS8H,KAAK,IAAIyP,EAAOgS,EAAGjoB,EAAImoB,EAAQF,EAAGpoB,EAAIuoB,IAC/C1pB,EAAS8H,KAAK,IAAIyP,EAAOgS,EAAGjoB,EAAImoB,EAAmB,KAAVD,EAAiBzf,KAAK6P,IAAI7G,EAAQhJ,KAAKC,GAAK,GAAIuf,EAAGpoB,EAAIuoB,EAAmB,KAAVF,EAAiBzf,KAAK8P,IAAI9G,EAAQhJ,KAAKC,GAAK,KAC9IhK,IChfR,MAAMyR,EAST5D,YAAY7N,EAAU2pB,GAIlB/mB,KAAKskB,UAAY,UACjBtkB,KAAKukB,IAAMtC,EAAajG,YACD,IAAZ5e,IACPA,EAAW,IACf4C,KAAK5C,SAAWA,EAChB4C,KAAK+mB,OAASA,EAWlBC,UAAUtZ,GACN1N,KAAK5C,SAAS8H,KAAKwI,GAmBvBuZ,YAAY3V,GACR,OAAIA,EAAQ,EACDtR,KAAK5C,SAAS4C,KAAK5C,SAASqB,OAAU0I,KAAKwM,IAAIrC,GAAStR,KAAK5C,SAASqB,QAEtEuB,KAAK5C,SAASkU,EAAQtR,KAAK5C,SAASqB,QAYnDyoB,KAAKxZ,GACD,IAAK,IAAIvF,KAAKnI,KAAK5C,SACf4C,KAAK5C,SAAS+K,GAAG/G,IAAIsM,GAEzB,OAAO1N,KAeXmnB,aAAazZ,GAIT,IADA,IAAI0Z,GAAS,EACJjf,EAAI,EAAGiG,EAAIpO,KAAK5C,SAASqB,OAAS,EAAG0J,EAAInI,KAAK5C,SAASqB,OAAQ2P,EAAIjG,IAAK,CAC7E,IAAIkf,EAAKrnB,KAAK5C,SAAS+K,GAAGzJ,EAAG4oB,EAAKtnB,KAAK5C,SAAS+K,GAAG5J,EAC/CgpB,EAAKvnB,KAAK5C,SAASgR,GAAG1P,EAAG8oB,EAAKxnB,KAAK5C,SAASgR,GAAG7P,EACjC+oB,EAAK5Z,EAAKnP,GAAOipB,EAAK9Z,EAAKnP,GACrCmP,EAAKhP,GAAK6oB,EAAKF,IAAO3Z,EAAKnP,EAAI+oB,IAAOE,EAAKF,GAAMD,IAErDD,GAAUA,GAElB,OAAOA,EAaXK,OACI,OAAO5Y,EAAQ2X,MAAMiB,KAAKznB,KAAK5C,UAYnCsqB,aACI,OAAO7Y,EAAQ2X,MAAMkB,WAAW1nB,KAAK5C,UAWzCuqB,cACI,OAAO9Y,EAAQ2X,MAAMkB,WAAW1nB,KAAK5C,UAAY,EAarDyoB,MAAMC,EAAQC,GACV,IAAK,IAAI5d,KAAKnI,KAAK5C,SACsB,mBAA1B4C,KAAK5C,SAAS+K,GAAG0d,MACxB7lB,KAAK5C,SAAS+K,GAAG0d,MAAMC,EAAQC,GAE/B3nB,QAAQC,IAAI,mCAAoC2B,KAAK5C,SAAS+K,IAEtE,OAAOnI,KAaXgmB,OAAO7V,EAAO4V,GACV,IAAK,IAAI5d,KAAKnI,KAAK5C,SACf4C,KAAK5C,SAAS+K,GAAG6d,OAAO7V,EAAO4V,GAEnC,OAAO/lB,KAWX2D,YACI,OAAO8Q,EAAOC,oBAAoB1U,KAAK5C,UAe3CwqB,wBACI,GAAI5nB,KAAK5C,SAASqB,OAAS,EACvB,MAAO,GACX,IAAIopB,EAAU,GACVC,EAAM9nB,KAAK5C,SAAS,GACpB2qB,EAAM/nB,KAAK5C,SAAS,GACpB4qB,EAAa,IAAIrT,EAAOmT,EAAIppB,GAAKqpB,EAAIrpB,EAAIopB,EAAIppB,GAAK,EAAGopB,EAAIvpB,GAAKwpB,EAAIxpB,EAAIupB,EAAIvpB,GAAK,GACnFspB,EAAQ3iB,KAAK8iB,GAEb,IADA,IAAIC,EAAQjoB,KAAK+mB,OAAS/mB,KAAK5C,SAASqB,OAASuB,KAAK5C,SAASqB,OAAS,EAC/DmV,EAAI,EAAGA,EAAIqU,EAAOrU,IAAK,CAC5BkU,EAAM9nB,KAAK5C,SAASwW,EAAI5T,KAAK5C,SAASqB,QACtCspB,EAAM/nB,KAAK5C,UAAUwW,EAAI,GAAK5T,KAAK5C,SAASqB,QACxCupB,EAAa,IAAIrT,EAAOmT,EAAIppB,GAAKqpB,EAAIrpB,EAAIopB,EAAIppB,GAAK,EAAGopB,EAAIvpB,GAAKwpB,EAAIxpB,EAAIupB,EAAIvpB,GAAK,GACnFspB,EAAQ3iB,KAAK4iB,GACbD,EAAQ3iB,KAAK8iB,GACbF,EAAMC,EAEV,OAAOF,EAWXK,6BACI,IAAIC,EAAQnoB,KAAK4nB,wBACjB,GAAoB,GAAhBO,EAAM1pB,OACN,MAAO,GAEX,IADA,IAAImhB,EAAS,CAAC,KAAOuI,EAAM,GAAGzpB,EAAI,IAAMypB,EAAM,GAAG5pB,GACxC4J,EAAI,EAAGA,EAAIggB,EAAM1pB,OAAQ0J,GAAK,EACnCyX,EAAO1a,KAAK,KAAOijB,EAAMhgB,GAAGzJ,EAAI,IAAMypB,EAAMhgB,GAAG5J,EAAI,KAAO4pB,EAAMhgB,EAAI,GAAGzJ,EAAI,IAAMypB,EAAMhgB,EAAI,GAAG5J,GAElG,OAAOqhB,EAAOzV,KAAK,KAkBvBie,kBAAkBC,GAGd,QAFwB,IAAbA,IACPA,EAAY,GACZroB,KAAK5C,SAASqB,OAAS,EACvB,MAAO,GACX,IAAI6pB,EAAU,GACV/Y,EAAIvP,KAAK5C,SAAS,GAClBoN,EAAIxK,KAAK5C,SAAS,GAClB4qB,EAAa,IAAIrT,EAAOpF,EAAE7Q,GAAK8L,EAAE9L,EAAI6Q,EAAE7Q,GAAK,EAAG6Q,EAAEhR,GAAKiM,EAAEjM,EAAIgR,EAAEhR,GAAK,GACvE+pB,EAAQpjB,KAAK8iB,GAEb,IADA,IAAIC,EAAQjoB,KAAK+mB,OAAS/mB,KAAK5C,SAASqB,OAAS,EAAIuB,KAAK5C,SAASqB,OAC1DmV,EAAI,EAAGA,EAAIqU,EAAOrU,IAAK,CACxBrE,EAAIvP,KAAK5C,SAASwW,EAAI5T,KAAK5C,SAASqB,QACpC+L,EAAIxK,KAAK5C,UAAUwW,EAAI,GAAK5T,KAAK5C,SAASqB,QAD9C,IAEI+Q,EAAIxP,KAAK5C,UAAUwW,EAAI,GAAK5T,KAAK5C,SAASqB,QAC1C8pB,EAAU,IAAI5T,EAAOpF,EAAE7Q,GAAK8L,EAAE9L,EAAI6Q,EAAE7Q,GAAK,EAAG6Q,EAAEhR,GAAKiM,EAAEjM,EAAIgR,EAAEhR,GAAK,GAChEiqB,EAAU,IAAI7T,EAAOnK,EAAE9L,GAAK8Q,EAAE9Q,EAAI8L,EAAE9L,GAAK,EAAG8L,EAAEjM,GAAKiR,EAAEjR,EAAIiM,EAAEjM,GAAK,GAChEkqB,EAAK,IAAI9T,EAAO4T,EAAQ7pB,GAAK8L,EAAE9L,EAAI6pB,EAAQ7pB,GAAK2pB,EAAWE,EAAQhqB,GAAKiM,EAAEjM,EAAIgqB,EAAQhqB,GAAK8pB,GAC3FK,EAAK,IAAI/T,EAAO6T,EAAQ9pB,GAAK8L,EAAE9L,EAAI8pB,EAAQ9pB,GAAK2pB,EAAWG,EAAQjqB,GAAKiM,EAAEjM,EAAIiqB,EAAQjqB,GAAK8pB,GAC/FC,EAAQpjB,KAAKujB,GACbH,EAAQpjB,KAAKwjB,GACbJ,EAAQpjB,KAAKsjB,GAEjB,OAAOF,EAWXK,uBAAuBN,GACnB,IAAIF,EAAQnoB,KAAKooB,kBAAkBC,GACnC,GAAoB,GAAhBF,EAAM1pB,OACN,MAAO,GAEX,IADA,IAAImhB,EAAS,CAAC,KAAOuI,EAAM,GAAGzpB,EAAI,IAAMypB,EAAM,GAAG5pB,GACxC4J,EAAI,EAAGA,EAAIggB,EAAM1pB,OAAQ0J,GAAK,EACnCyX,EAAO1a,KAAK,KAAOijB,EAAMhgB,GAAGzJ,EAAI,IAAMypB,EAAMhgB,GAAG5J,EAAI,KAAO4pB,EAAMhgB,EAAI,GAAGzJ,EAAI,IAAMypB,EAAMhgB,EAAI,GAAG5J,EAAI,KAAO4pB,EAAMhgB,EAAI,GAAGzJ,EAAI,IAAMypB,EAAMhgB,EAAI,GAAG5J,GAEjJ,OAAOqhB,EAAOzV,KAAK,KAYvBye,kBAAkBP,GAId,IAHA,IAAIF,EAAQnoB,KAAKooB,kBAAkBC,GAE/BQ,EAAW,GACN1gB,EAAI,EAAGA,EAAI,EAAIggB,EAAM1pB,OAAQ0J,GAAK,EACvC0gB,EAAS3jB,KAAK,CAACijB,EAAMhgB,GAAIggB,EAAMhgB,EAAI,GAAIggB,EAAMhgB,EAAI,GAAIggB,EAAMhgB,EAAI,KAEnE,OAAO2gB,EAAWC,UAAUF,GAahCvC,YAAYvpB,GACRA,EAAUA,GAAW,GACrB,IAAI6iB,EAAS,GAKb,GAJAA,EAAO1a,KAAK,SACRnI,EAAQunB,WACR1E,EAAO1a,KAAK,WAAanI,EAAQunB,UAAY,KACjD1E,EAAO1a,KAAK,QACRlF,KAAK5C,SAASqB,OAAS,EAAG,CAC1BmhB,EAAO1a,KAAK,MACZ0a,EAAO1a,KAAKlF,KAAK5C,SAAS,GAAGsB,EAAE2nB,YAC/BzG,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAKlF,KAAK5C,SAAS,GAAGmB,EAAE8nB,YAC/B,IAAK,IAAIle,EAAI,EAAGA,EAAInI,KAAK5C,SAASqB,OAAQ0J,IACtCyX,EAAO1a,KAAK,OACZ0a,EAAO1a,KAAKlF,KAAK5C,SAAS+K,GAAGzJ,EAAE2nB,YAC/BzG,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAKlF,KAAK5C,SAAS+K,GAAG5J,EAAE8nB,YAE9BrmB,KAAK+mB,QACNnH,EAAO1a,KAAK,MAIpB,OADA0a,EAAO1a,KAAK,QACL0a,EAAOzV,KAAK,KAI3B0E,EAAQ2X,MAAQ,CASZiB,KAAKrqB,GAGD,IAAI4rB,EAAQ,EACZ,IAAK,IAAI7gB,EAAI,EAAG8gB,EAAI7rB,EAASqB,OAAQ0J,EAAI8gB,EAAG9gB,IAAK,CAK7C6gB,GAJa5rB,EAAS+K,GAAGzJ,EACZtB,GAAU+K,EAAI,GAAK8gB,GAAG1qB,EAGX,GACxByqB,GAHa5rB,GAAU+K,EAAI,GAAK8gB,GAAGvqB,EACtBtB,EAAS+K,GAAG5J,EAED,GAE5B,OAAO4I,KAAKwM,IAAIqV,IASpBtB,WAAWtqB,GACP,IAAI8rB,EAAM,EACV,MAAMtX,EAAIxU,EAASqB,OACnB,IAAK,IAAI0J,EAAI,EAAGA,EAAIyJ,EAAGzJ,IAAK,CACxB,MAAMiG,GAAKjG,EAAI,GAAKyJ,EACpBsX,IAAQ9rB,EAASgR,GAAG1P,EAAItB,EAAS+K,GAAGzJ,IAAMtB,EAAS+K,GAAG5J,EAAInB,EAASgR,GAAG7P,GAE1E,OAAO2qB,IC9ZR,MAAMzU,EASTxJ,YAAY+E,EAAKxC,GACbxN,KAAKgQ,IAAMA,EACXhQ,KAAKwN,IAAMA,EACXxN,KAAK6C,MAAQ2K,EAAI9O,EAAIsR,EAAItR,EACzBsB,KAAKiD,OAASuK,EAAIjP,EAAIyR,EAAIzR,EAU9B4qB,YACI,OAAO,IAAIta,EAAQ,CAAC,IAAI8F,EAAO3U,KAAKgQ,KAAM,IAAI2E,EAAO3U,KAAKwN,IAAI9O,EAAGsB,KAAKgQ,IAAIzR,GAAI,IAAIoW,EAAO3U,KAAKwN,KAAM,IAAImH,EAAO3U,KAAKgQ,IAAItR,EAAGsB,KAAKwN,IAAIjP,KAAK,GAE7IgV,YACI,OAAO,IAAIoB,EAAO3U,KAAKgQ,IAAItR,GAAKsB,KAAKwN,IAAI9O,EAAIsB,KAAKgQ,IAAItR,GAAK,EAAKsB,KAAKgQ,IAAIzR,GAAKyB,KAAKwN,IAAIjP,EAAIyB,KAAKgQ,IAAIzR,GAAK,GAa7G2jB,2BAA2B9kB,GACvB,GAAuB,GAAnBA,EAASqB,OACT,OAAO,IAAIgW,EAAO,IAAIE,EAAO,EAAG,GAAI,IAAIA,EAAO,EAAG,IACtD,IAIIjH,EAJA0b,EAAOhsB,EAAS,GAAGsB,EACnB2qB,EAAOjsB,EAAS,GAAGsB,EACnB4qB,EAAOlsB,EAAS,GAAGmB,EACnBgrB,EAAOnsB,EAAS,GAAGmB,EAEvB,IAAK,IAAI4J,KAAK/K,EACVsQ,EAAOtQ,EAAS+K,GAChBihB,EAAOjiB,KAAK6I,IAAIoZ,EAAM1b,EAAKhP,GAC3B2qB,EAAOliB,KAAKqG,IAAI6b,EAAM3b,EAAKhP,GAC3B4qB,EAAOniB,KAAK6I,IAAIsZ,EAAM5b,EAAKnP,GAC3BgrB,EAAOpiB,KAAKqG,IAAI+b,EAAM7b,EAAKnP,GAE/B,OAAO,IAAIkW,EAAO,IAAIE,EAAOyU,EAAME,GAAO,IAAI3U,EAAO0U,EAAME,KCpD5D,MAAMC,EASTve,YAAYsE,EAAG/E,EAAGif,GACdzpB,KAAKukB,IAAMtC,EAAajG,OACxBhc,KAAKuP,EAAIA,EACTvP,KAAKwK,EAAIA,EACTxK,KAAKypB,QAAUA,EASnBhrB,SACI,OAAO0I,KAAKgT,KAAKhT,KAAKse,IAAIzlB,KAAKwK,EAAE9L,EAAIsB,KAAKuP,EAAE7Q,EAAG,GAAKyI,KAAKse,IAAIzlB,KAAKwK,EAAEjM,EAAIyB,KAAKuP,EAAEhR,EAAG,IAYtFmrB,UAAUjrB,GACN,OAAOuB,KAAK6lB,MAAMpnB,EAASuB,KAAKvB,UAYpC2mB,IAAIuE,GAGA,OAFA3pB,KAAKuP,EAAE6V,IAAIuE,GACX3pB,KAAKwK,EAAE4a,IAAIuE,GACJ3pB,KAYXoB,IAAIuoB,GAGA,OAFA3pB,KAAKuP,EAAEnO,IAAIuoB,GACX3pB,KAAKwK,EAAEpJ,IAAIuoB,GACJ3pB,KAWX4pB,YAEI,OADA5pB,KAAKwK,EAAEvJ,IAAIjB,KAAKuP,EAAE7Q,GAAKsB,KAAKwK,EAAE9L,EAAIsB,KAAKuP,EAAE7Q,GAAKsB,KAAKvB,SAAUuB,KAAKuP,EAAEhR,GAAKyB,KAAKwK,EAAEjM,EAAIyB,KAAKuP,EAAEhR,GAAKyB,KAAKvB,UAC9FuB,KAYX6lB,MAAMC,GAEF,OADA9lB,KAAKwK,EAAEvJ,IAAIjB,KAAKuP,EAAE7Q,GAAKsB,KAAKwK,EAAE9L,EAAIsB,KAAKuP,EAAE7Q,GAAKonB,EAAQ9lB,KAAKuP,EAAEhR,GAAKyB,KAAKwK,EAAEjM,EAAIyB,KAAKuP,EAAEhR,GAAKunB,GAClF9lB,KAYX6pB,OAAOC,GACH,IAAI7P,EAAOja,KAAKuP,EAAEqW,WAAWkE,GAG7B,OAFA9pB,KAAKuP,EAAEnO,IAAI6Y,GACXja,KAAKwK,EAAEpJ,IAAI6Y,GACJja,KAYXmQ,MAAMsO,GACU,MAARA,QAA+B,IAARA,IACvBA,EAAOze,KAAKypB,QAAQ,IAAI9U,EAAO,EAAG,GAAI,IAAIA,EAAO,IAAK,KAG1D,MAAMoV,EAAK/pB,KAAKwK,EAAE/M,QAAQ2nB,IAAIplB,KAAKuP,GAC7Bya,EAAKvL,EAAKjU,EAAE/M,QAAQ2nB,IAAI3G,EAAKlP,GAGnC,OAAOpI,KAAKwe,MAAMqE,EAAGtrB,EAAGsrB,EAAGzrB,GAAK4I,KAAKwe,MAAMoE,EAAGrrB,EAAGqrB,EAAGxrB,GAexD0rB,OAAOrW,GACH,OAAO,IAAIe,EAAO3U,KAAKuP,EAAE7Q,GAAKsB,KAAKwK,EAAE9L,EAAIsB,KAAKuP,EAAE7Q,GAAKkV,EAAG5T,KAAKuP,EAAEhR,GAAKyB,KAAKwK,EAAEjM,EAAIyB,KAAKuP,EAAEhR,GAAKqV,GAc/FsW,YAAYzL,GAER,OAASA,EAAKjU,EAAEjM,EAAIkgB,EAAKlP,EAAEhR,IAAMyB,KAAKwK,EAAE9L,EAAIsB,KAAKuP,EAAE7Q,IAAQ+f,EAAKjU,EAAE9L,EAAI+f,EAAKlP,EAAE7Q,IAAMsB,KAAKwK,EAAEjM,EAAIyB,KAAKuP,EAAEhR,GAczG4rB,SAAS1L,GACL,OAAOtX,KAAKwM,IAAI3T,KAAKkqB,YAAYzL,IAAS9J,EAAO4Q,QAerD6E,YAAYxiB,GACR,IAAIyiB,EAAKb,EAAUc,QAAQC,MAAMvqB,KAAKuP,EAAGvP,KAAKwK,GAC9C,OAAW,IAAP6f,EACO,IACDziB,EAAElJ,EAAIsB,KAAKuP,EAAE7Q,IAAMsB,KAAKwK,EAAE9L,EAAIsB,KAAKuP,EAAE7Q,IAAMkJ,EAAErJ,EAAIyB,KAAKuP,EAAEhR,IAAMyB,KAAKwK,EAAEjM,EAAIyB,KAAKuP,EAAEhR,IAAM8rB,EAkBpGG,SAASC,EAAOC,GACZ,MAAM9W,EAAI5T,KAAKoqB,YAAYK,GAE3B,QAAgC,IAArBC,GAAoCA,EAAkB,CAE7D,OADiBvjB,KAAKgT,KAAKqP,EAAUc,QAAQC,MAAME,EAAOzqB,KAAKiqB,OAAOrW,KACpDe,EAAO4Q,SAAW3R,GAAK,GAAKA,GAAK,EAGnD,OAAOA,GAAK,GAAKA,GAAK,EAY9B+W,gBAAgB/iB,GACZ,IAAIgM,EAAI5T,KAAKoqB,YAAYxiB,GACzB,OAAO5H,KAAKiqB,OAAOrW,GAYvBgX,cAAchjB,GAGV,OAAOT,KAAKgT,KAAKqP,EAAUc,QAAQC,MAAM3iB,EAAG5H,KAAKiqB,OAAOjqB,KAAKoqB,YAAYxiB,MAW7EnK,QACI,OAAOuC,KAAKypB,QAAQzpB,KAAKuP,EAAE9R,QAASuC,KAAKwK,EAAE/M,SAW/C4oB,WACI,MAAO,SAAWrmB,KAAKuP,EAAE8W,WAAa,SAAWrmB,KAAKwK,EAAE6b,WAAa,MAO7EmD,EAAUc,QAAU,CAChBC,MAAO,CAACvJ,EAAG6J,KACC7J,EAAEtiB,EAAImsB,EAAEnsB,IAAMsiB,EAAEtiB,EAAImsB,EAAEnsB,IAAMsiB,EAAEziB,EAAIssB,EAAEtsB,IAAMyiB,EAAEziB,EAAIssB,EAAEtsB,ICtR3D,MAAMusB,UAAetB,EAUxBve,YAAY4J,EAAOC,GACfiW,MAAMlW,EAAOC,GAAO,CAACvF,EAAG/E,IAAM,IAAIsgB,EAAOvb,EAAG/E,KAI5CxK,KAAKskB,UAAY,SASrB0G,OACI,IAAIhK,EAAIhhB,KAAKvC,QAKb,OAJAujB,EAAEoE,IAAIplB,KAAKuP,IACXyR,EAAI,IAAI8J,EAAO,IAAInW,EAAU,IAAIA,GAAQqM,EAAExW,EAAEjM,EAAGyiB,EAAExW,EAAE9L,KAClD6Q,EAAEnO,IAAIpB,KAAKuP,GACbyR,EAAExW,EAAEpJ,IAAIpB,KAAKuP,GACNyR,EAUXiK,UACI,IAAIC,EAAMlrB,KAAKuP,EAGf,OAFAvP,KAAKuP,EAAIvP,KAAKwK,EACdxK,KAAKwK,EAAI0gB,EACFlrB,KAQXomB,MAGI,OAFApmB,KAAKwK,EAAE9L,EAAIsB,KAAKuP,EAAE7Q,GAAKsB,KAAKwK,EAAE9L,EAAIsB,KAAKuP,EAAE7Q,GACzCsB,KAAKwK,EAAEjM,EAAIyB,KAAKuP,EAAEhR,GAAKyB,KAAKwK,EAAEjM,EAAIyB,KAAKuP,EAAEhR,GAClCyB,KAYXmrB,aAAa1M,GACT,IAAIyL,EAAclqB,KAAKkqB,YAAYzL,GACnC,GAAmB,GAAfyL,EACA,OAAO,KACX,IAAI3a,EAAIvP,KAAKuP,EAAEhR,EAAIkgB,EAAKlP,EAAEhR,EACtBiM,EAAIxK,KAAKuP,EAAE7Q,EAAI+f,EAAKlP,EAAE7Q,EACtB0sB,GAAe3M,EAAKjU,EAAE9L,EAAI+f,EAAKlP,EAAE7Q,GAAK6Q,GAAOkP,EAAKjU,EAAEjM,EAAIkgB,EAAKlP,EAAEhR,GAAKiM,EACpE6gB,GAAerrB,KAAKwK,EAAE9L,EAAIsB,KAAKuP,EAAE7Q,GAAK6Q,GAAOvP,KAAKwK,EAAEjM,EAAIyB,KAAKuP,EAAEhR,GAAKiM,EAMxE,OALA+E,EAAI6b,EAAalB,EACjB1f,EAAI6gB,EAAanB,EAIV,IAAIvV,EAAO3U,KAAKuP,EAAE7Q,EAAK6Q,GAAKvP,KAAKwK,EAAE9L,EAAIsB,KAAKuP,EAAE7Q,GAAKsB,KAAKuP,EAAEhR,EAAKgR,GAAKvP,KAAKwK,EAAEjM,EAAIyB,KAAKuP,EAAEhR,IAcjG+nB,YAAYvpB,GACRA,EAAUA,GAAW,GACrB,IAAI6iB,EAAS,GACTxiB,EAAW0tB,EAAOtE,MAAMC,eAAezmB,KAAKuP,EAAGvP,KAAKwK,EAAG,EAAG,EAAK,GACnEoV,EAAO1a,KAAK,MACRnI,EAAQunB,WACR1E,EAAO1a,KAAK,WAAanI,EAAQunB,UAAY,KACjD1E,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAK,YACZ0a,EAAO1a,KAAK,QAAUlF,KAAKuP,EAAE7Q,EAAI,KACjCkhB,EAAO1a,KAAK,QAAUlF,KAAKuP,EAAEhR,EAAI,KACjCqhB,EAAO1a,KAAK,QAAU9H,EAAS,GAAGsB,EAAI,KACtCkhB,EAAO1a,KAAK,QAAU9H,EAAS,GAAGmB,EAAI,KACtCqhB,EAAO1a,KAAK,OAEZ0a,EAAO1a,KAAK,wBACZ,IAAK,IAAIiD,EAAI,EAAGA,EAAI/K,EAASqB,OAAQ0J,IAC7BA,EAAI,GACJyX,EAAO1a,KAAK,KAChB0a,EAAO1a,KAAU9H,EAAS+K,GAAGzJ,EAAI,IAAMtB,EAAS+K,GAAG5J,GAIvD,OAFAqhB,EAAO1a,KAAK,OACZ0a,EAAO1a,KAAK,QACL0a,EAAOzV,KAAK,KAI3B2gB,EAAOtE,MAAQ,CA0BXC,eAAgB,CAACC,EAAIC,EAAIC,EAASC,EAAQC,KACtC,IAAI3W,EAAQhJ,KAAKwe,OAAOgB,EAAGpoB,EAAImoB,EAAGnoB,GAAKuoB,GAASH,EAAGjoB,EAAIgoB,EAAGhoB,GAAKmoB,GAC3DzpB,EAAW,GAKf,OAJAA,EAAS8H,KAAK,IAAIyP,EAAOgS,EAAGjoB,EAAImoB,EAAS,EAAY1f,KAAK6P,IAAI7G,GAAQwW,EAAGpoB,EAAIuoB,EAAS,EAAY3f,KAAK8P,IAAI9G,KAC3G/S,EAAS8H,KAAK,IAAIyP,EAAOgS,EAAGjoB,EAAImoB,EAAoB,KAAVD,EAAkBzf,KAAK6P,IAAI7G,EAAQhJ,KAAKC,GAAK,GAAIuf,EAAGpoB,EAAIuoB,EAAoB,KAAVF,EAAkBzf,KAAK8P,IAAI9G,EAAQhJ,KAAKC,GAAK,KACzJhK,EAAS8H,KAAK,IAAIyP,EAAOgS,EAAGjoB,EAAImoB,EAAQF,EAAGpoB,EAAIuoB,IAC/C1pB,EAAS8H,KAAK,IAAIyP,EAAOgS,EAAGjoB,EAAImoB,EAAoB,KAAVD,EAAkBzf,KAAK6P,IAAI7G,EAAQhJ,KAAKC,GAAK,GAAIuf,EAAGpoB,EAAIuoB,EAAoB,KAAVF,EAAkBzf,KAAK8P,IAAI9G,EAAQhJ,KAAKC,GAAK,KAClJhK,IC9IR,MAAMkuB,EAWTrgB,YAAYsgB,EAAYhuB,EAAUiuB,EAAmBC,GAEjDzrB,KAAK0rB,YAAcJ,EAAiBI,YAEpC1rB,KAAK2rB,oBAAsBL,EAAiBK,oBAE5C3rB,KAAK4rB,kBAAoBN,EAAiBM,kBAE1C5rB,KAAK6rB,UAAYP,EAAiBO,UAClC7rB,KAAKukB,IAAMtC,EAAajG,OACxBhc,KAAKurB,WAAaA,EAClBvrB,KAAKwrB,kBAAoBA,EACzBxrB,KAAKzC,SAAWA,EAChByC,KAAKyrB,gBAAkBA,EACvBzrB,KAAK8rB,eAAiB,GAEtB9rB,KAAK+rB,aAAe,GAEpB/rB,KAAKgsB,eAAiB,GAEtBhsB,KAAKisB,UAAY,KACjBjsB,KAAKksB,mBAgBTC,eAAeC,EAASC,EAAYC,EAAkBJ,GAC9CE,GAAWpsB,KAAK0rB,aAChB1rB,KAAKusB,gBAAgBnrB,IAAIirB,GACrBC,GACAtsB,KAAKwsB,uBAAuBprB,IAAIirB,IAE/BD,GAAWpsB,KAAK2rB,oBACrB3rB,KAAKwsB,uBAAuBprB,IAAIirB,GAE3BD,GAAWpsB,KAAK4rB,kBACrB5rB,KAAKysB,qBAAqBrrB,IAAIirB,GAEzBD,GAAWpsB,KAAK6rB,WACrB7rB,KAAK0sB,cAActrB,IAAIirB,GACnBC,GACAtsB,KAAKysB,qBAAqBrrB,IAAIirB,IAGlCjuB,QAAQC,IAAI,8CAA8C+tB,eAE1DF,GACAlsB,KAAKksB,mBAYbS,UAAUhD,GAKN,OAJA3pB,KAAKurB,WAAWnqB,IAAIuoB,GACpB3pB,KAAKwrB,kBAAkBpqB,IAAIuoB,GAC3B3pB,KAAKyrB,gBAAgBrqB,IAAIuoB,GACzB3pB,KAAKzC,SAAS6D,IAAIuoB,GACX3pB,KAYXod,UACI,IAAI8N,EAAMlrB,KAAKurB,WAMf,OALAvrB,KAAKurB,WAAavrB,KAAKzC,SACvByC,KAAKzC,SAAW2tB,EAChBA,EAAMlrB,KAAKwrB,kBACXxrB,KAAKwrB,kBAAoBxrB,KAAKyrB,gBAC9BzrB,KAAKyrB,gBAAkBP,EAChBlrB,KAkBX4sB,YACI,OAAO5sB,KAAKisB,UAehBC,mBACI,IAAIW,EAAS7sB,KAAKurB,WAAW9tB,QACzBqvB,EAAS,IAAInY,EAAO,EAAG,GACvBoY,EAAY,EAAM/sB,KAAK8rB,eAE3B9rB,KAAK+rB,aAAe,GAEpB/rB,KAAK+rB,aAAa7mB,KAAKlF,KAAKurB,YAC5BvrB,KAAKgsB,eAAiB,GACtB,IAAIgB,EAAY,EAChB,IAAIpZ,EAAI,EACR,IAAIqZ,EACJ,KAAOrZ,GAAK,GACRkZ,EAAS9sB,KAAK6T,WAAWD,GAEzB5T,KAAK+rB,aAAa7mB,KAAK4nB,GAEvBG,EAAYJ,EAAOtb,SAASub,GAC5B9sB,KAAKgsB,eAAe9mB,KAAK+nB,GACzBD,GAAaC,EACbJ,EAASC,EACTlZ,GAAKmZ,EAET/sB,KAAKisB,UAAYe,EAarB5C,YAAYxiB,GAER,IACIiX,EAAS,CAAEjL,EAAG,EAAGsZ,MAAO,EAAKC,MAAO,GACpCC,EAAY,EAChB,GACIvO,EAAS7e,KAAKqtB,yBAAyBzlB,EAAGiX,EAAOqO,MAAOrO,EAAOsO,MAAOntB,KAAK8rB,gBAC3EsB,UAEKA,EAAY,GAAKptB,KAAK6T,WAAWgL,EAAOqO,OAAO3b,SAASvR,KAAK6T,WAAWgL,EAAOsO,QAPnE,GAQrB,OAAOtO,EAAOjL,EAiBlByZ,yBAAyBzlB,EAAG0lB,EAAQC,EAAMC,GACtC,IAAIC,GAAY,EACZC,EAAU,EACV9Z,EAAI,EACR,MAAM+Z,EAAQJ,EAAOD,EACrB,IAAK,IAAInlB,EAAI,EAAGA,GAAKqlB,EAAWrlB,IAAK,CACjCyL,EAAI0Z,EAASK,GAASxlB,EAAIqlB,GAC1B,IACI/M,EADOzgB,KAAK6T,WAAWD,GACXrC,SAAS3J,KACR,GAAb6lB,GAAkBhN,EAAOiN,KACzBD,EAAWtlB,EACXulB,EAAUjN,GAGlB,MAAO,CAAE7M,EAAG0Z,EAASK,GAASF,EAAWD,GACrCN,MAAOI,EAASK,GAASxmB,KAAKqG,IAAI,EAAGigB,EAAW,GAAKD,GACrDL,MAAOG,EAASK,GAASxmB,KAAK6I,IAAIwd,EAAWC,EAAW,GAAKD,IAYrE7pB,YACI,IAAIqM,EAAM,IAAI2E,EAAOnD,OAAOiC,kBAAmBjC,OAAOiC,mBAClDjG,EAAM,IAAImH,EAAOnD,OAAOkC,kBAAmBlC,OAAOkC,mBACtD,IAAIsN,EACJ,IAAK,IAAI7Y,EAAI,EAAGA,EAAInI,KAAK+rB,aAAattB,OAAQ0J,IAC1C6Y,EAAIhhB,KAAK+rB,aAAa5jB,GACtB6H,EAAItR,EAAIyI,KAAK6I,IAAIA,EAAItR,EAAGsiB,EAAEtiB,GAC1BsR,EAAIzR,EAAI4I,KAAK6I,IAAIA,EAAIzR,EAAGyiB,EAAEziB,GAC1BiP,EAAI9O,EAAIyI,KAAKqG,IAAIA,EAAI9O,EAAGsiB,EAAEtiB,GAC1B8O,EAAIjP,EAAI4I,KAAKqG,IAAIA,EAAIjP,EAAGyiB,EAAEziB,GAE9B,OAAO,IAAIkW,EAAOzE,EAAKxC,GAa3B+e,gBACI,OAAOvsB,KAAKurB,WAahBmB,cACI,OAAO1sB,KAAKzC,SAahBivB,uBACI,OAAOxsB,KAAKwrB,kBAahBiB,qBACI,OAAOzsB,KAAKyrB,gBAYhBmC,aAAaC,GACT,GAAIA,GAAM7tB,KAAK0rB,YACX,OAAO1rB,KAAKurB,WAChB,GAAIsC,GAAM7tB,KAAK6rB,UACX,OAAO7rB,KAAKzC,SAChB,GAAIswB,GAAM7tB,KAAK2rB,oBACX,OAAO3rB,KAAKwrB,kBAChB,GAAIqC,GAAM7tB,KAAK4rB,kBACX,OAAO5rB,KAAKyrB,gBAChB,MAAM,IAAIqC,MAAM,qBAAqBD,OAezCha,WAAWD,GAEP,MAAMlV,EAAIsB,KAAKurB,WAAW7sB,EAAIyI,KAAKse,IAAI,EAAM7R,EAAG,GAAgC,EAA3B5T,KAAKwrB,kBAAkB9sB,EAAQkV,EAAIzM,KAAKse,IAAI,EAAM7R,EAAG,GAC3E,EAAzB5T,KAAKyrB,gBAAgB/sB,EAAQyI,KAAKse,IAAI7R,EAAG,IAAM,EAAMA,GAAK5T,KAAKzC,SAASmB,EAAIyI,KAAKse,IAAI7R,EAAG,GACxFrV,EAAIyB,KAAKurB,WAAWhtB,EAAI4I,KAAKse,IAAI,EAAM7R,EAAG,GAAgC,EAA3B5T,KAAKwrB,kBAAkBjtB,EAAQqV,EAAIzM,KAAKse,IAAI,EAAM7R,EAAG,GAC3E,EAAzB5T,KAAKyrB,gBAAgBltB,EAAQ4I,KAAKse,IAAI7R,EAAG,IAAM,EAAMA,GAAK5T,KAAKzC,SAASgB,EAAI4I,KAAKse,IAAI7R,EAAG,GAC9F,OAAO,IAAIe,EAAOjW,EAAGH,GAezBwvB,SAASC,GACL,OAAOhuB,KAAK6T,WAAWma,EAAIhuB,KAAKisB,WAcpCgC,aAAara,GACT,MAAMrE,EAAIvP,KAAKusB,gBACT/hB,EAAIxK,KAAKwsB,uBACThd,EAAIxP,KAAKysB,qBACTliB,EAAIvK,KAAK0sB,cAETwB,EAAKta,EAAIA,EAETua,EAAM,EAAI,EAAIva,EAAIsa,EAClBE,GAAM,EAAI7e,EAAE7Q,EAAIyvB,EAClB3jB,EAAE9L,GAAK,EAAIyvB,EAAM,GAAKva,EAAIsa,IAC1B1e,EAAE9Q,GAAK,GAAKkV,EAAIsa,GAAM,EAAIA,GAC1B,EAAI3jB,EAAE7L,EAAIwvB,EACRG,GAAM,EAAI9e,EAAEhR,EAAI4vB,EAClB3jB,EAAEjM,GAAK,EAAI4vB,EAAM,GAAKva,EAAIsa,IAC1B1e,EAAEjR,GAAK,GAAKqV,EAAIsa,GAAM,EAAIA,GAC1B,EAAI3jB,EAAEhM,EAAI2vB,EAEd,OAAO,IAAIvZ,EAAOyZ,EAAIC,GAe1BC,cAAchB,EAAQC,GAClB,MAAMgB,EAAW,IAAIzD,EAAO9qB,KAAK6T,WAAWyZ,GAASttB,KAAKiuB,aAAaX,IACjEkB,EAAS,IAAI1D,EAAO9qB,KAAK6T,WAAW0Z,GAAOvtB,KAAKiuB,aAAaV,GAAMnH,OASzE,OAPAmI,EAAS/jB,EAAEpJ,IAAImtB,EAAShf,GACxBif,EAAOhkB,EAAEpJ,IAAIotB,EAAOjf,GAEpBgf,EAAS1I,MAAM,WAAc0H,EAAOD,IACpCkB,EAAO3I,MAAM,WAAc0H,EAAOD,IAG3B,IAAIhC,EAAiBiD,EAAShf,EAAGif,EAAOjf,EAAGgf,EAAS/jB,EAAGgkB,EAAOhkB,GAYzEikB,WAAWT,GACP,OAAO7mB,KAAKqG,IAAI,EAAKrG,KAAK6I,IAAI,EAAMge,EAAIhuB,KAAKisB,YAcjDyC,WAAWV,GACP,OAAOhuB,KAAKiuB,aAAajuB,KAAKyuB,WAAWT,IAc7CW,iBAAiBX,GACb,OAAOhuB,KAAK8T,mBAAmB9T,KAAKyuB,WAAWT,IAcnDla,mBAAmBF,GACf,MAAMgb,EAAgB5uB,KAAKiuB,aAAara,GACxC,OAAO,IAAIe,EAAOia,EAAcrwB,GAAIqwB,EAAclwB,GAWtDjB,QACI,OAAO,IAAI6tB,EAAiBtrB,KAAKusB,gBAAgB9uB,QAASuC,KAAK0sB,cAAcjvB,QAASuC,KAAKwsB,uBAAuB/uB,QAASuC,KAAKysB,qBAAqBhvB,SAgBzJ4nB,OAAOwJ,GAGH,QAAKA,OAEAA,EAAMtD,YACNsD,EAAMtxB,UACNsxB,EAAMrD,mBACNqD,EAAMpD,mBAEJzrB,KAAKurB,WAAWlG,OAAOwJ,EAAMtD,aAC7BvrB,KAAKzC,SAAS8nB,OAAOwJ,EAAMtxB,WAC3ByC,KAAKwrB,kBAAkBnG,OAAOwJ,EAAMrD,oBACpCxrB,KAAKyrB,gBAAgBpG,OAAOwJ,EAAMpD,mBAa7CvJ,kBAAkB4M,GAad,OAAOA,aAAexD,EAgB1ByD,gBACI,IAAInP,EAAS,GAiBb,OAhBAA,EAAO1a,KAAK,MACZ0a,EAAO1a,KAAKlF,KAAKurB,WAAW7sB,EAAE2nB,YAC9BzG,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAKlF,KAAKurB,WAAWhtB,EAAE8nB,YAC9BzG,EAAO1a,KAAK,OACZ0a,EAAO1a,KAAKlF,KAAKwrB,kBAAkB9sB,EAAE2nB,YACrCzG,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAKlF,KAAKwrB,kBAAkBjtB,EAAE8nB,YACrCzG,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAKlF,KAAKyrB,gBAAgB/sB,EAAE2nB,YACnCzG,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAKlF,KAAKyrB,gBAAgBltB,EAAE8nB,YACnCzG,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAKlF,KAAKzC,SAASmB,EAAE2nB,YAC5BzG,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAKlF,KAAKzC,SAASgB,EAAE8nB,YACrBzG,EAAOzV,KAAK,IAYvB6kB,OAAOC,GAYH,MAXiB,MACZA,EAAe,OAAS,IACzB,mBAAuBjvB,KAAKusB,gBAAgB7tB,EAAI,IAAMsB,KAAKusB,gBAAgBhuB,EAAI,OAC9E0wB,EAAe,OAAS,IACzB,iBAAqBjvB,KAAK0sB,cAAchuB,EAAI,IAAMsB,KAAK0sB,cAAcnuB,EAAI,OACxE0wB,EAAe,OAAS,IACzB,yBAA6BjvB,KAAKwsB,uBAAuB9tB,EAAI,IAAMsB,KAAKwsB,uBAAuBjuB,EAAI,OAClG0wB,EAAe,OAAS,IACzB,wBAA4BjvB,KAAKysB,qBAAqB/tB,EAAI,IAAMsB,KAAKysB,qBAAqBluB,EAAI,KAC7F0wB,EAAe,OAAS,IACzB,KAcR/M,gBAAgBgN,GACZ,IAAIJ,EAAMK,KAAKllB,MAAMilB,GACrB,OAAO5D,EAAiB8D,WAAWN,GAavC5M,kBAAkB4M,GACd,GAAmB,iBAARA,EACP,KAAM,8BACV,IAAKA,EAAIvD,WACL,KAAM,sCACV,IAAKuD,EAAIvxB,SACL,KAAM,oCACV,IAAKuxB,EAAItD,kBACL,KAAM,6CACV,IAAKsD,EAAIrD,gBACL,KAAM,2CACV,OAAO,IAAIH,EAAiB,IAAI3W,EAAOma,EAAIvD,WAAW,GAAIuD,EAAIvD,WAAW,IAAK,IAAI5W,EAAOma,EAAIvxB,SAAS,GAAIuxB,EAAIvxB,SAAS,IAAK,IAAIoX,EAAOma,EAAItD,kBAAkB,GAAIsD,EAAItD,kBAAkB,IAAK,IAAI7W,EAAOma,EAAIrD,gBAAgB,GAAIqD,EAAIrD,gBAAgB,KAYvPvJ,iBAAiBmN,GACb,IAAK1kB,MAAM2kB,QAAQD,GACf,KAAM,8BACV,GAAkB,GAAdA,EAAI5wB,OACJ,KAAM,gDACV,OAAO,IAAI6sB,EAAiB+D,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAIA,EAAI,KAKhE/D,EAAiBI,YAAc,EAE/BJ,EAAiBK,oBAAsB,EAEvCL,EAAiBM,kBAAoB,EAErCN,EAAiBO,UAAY,ECnpBtB,MAAM/C,EAaT7d,YAAYskB,GAIRvvB,KAAKskB,UAAY,aAEjBtkB,KAAK0rB,YAAc,EAEnB1rB,KAAK2rB,oBAAsB,EAE3B3rB,KAAK4rB,kBAAoB,EAEzB5rB,KAAK6rB,UAAY,EACjB7rB,KAAKukB,IAAMtC,EAAajG,OACnBuT,IACDA,EAAa,IACjBvvB,KAAKwvB,eAAiB,EAGtBxvB,KAAKyvB,gBAAiB,EACtBzvB,KAAK0vB,aAAe,GAWxBC,SAASd,GACL,GAAa,MAATA,QAAiC,IAATA,EACxB,KAAM,wCACV7uB,KAAK0vB,aAAaxqB,KAAK2pB,GACnB7uB,KAAK0vB,aAAajxB,OAAS,GAC3BowB,EAAMtD,WAAavrB,KAAK0vB,aAAa1vB,KAAK0vB,aAAajxB,OAAS,GAAGlB,SACnEyC,KAAK4vB,4BAA4B5vB,KAAK0vB,aAAajxB,OAAS,GAC5D,GACA,IAIAuB,KAAKwvB,gBAAkBX,EAAMjC,YAYrCiD,wBAAwBpF,GAEpB,IAAK,IAAItiB,EAAI,EAAGA,EAAInI,KAAK0vB,aAAajxB,OAAQ0J,IAC1C,GAAInI,KAAK0vB,aAAavnB,GAAGojB,WAAWlG,OAAOoF,GACvC,OAAOtiB,EAEf,OAAQ,EAWZ2nB,sBAAsBrF,GAElB,IAAK,IAAItiB,EAAI,EAAGA,EAAInI,KAAK0vB,aAAajxB,OAAQ0J,IAC1C,GAAInI,KAAK0vB,aAAavnB,GAAG5K,SAAS8nB,OAAOoF,GACrC,OAAOtiB,EAEf,OAAQ,EAWZ4nB,+BAA+BtF,GAE3B,IAAK,IAAItiB,EAAI,EAAGA,EAAInI,KAAK0vB,aAAajxB,OAAQ0J,IAC1C,GAAInI,KAAK0vB,aAAavnB,GAAGqjB,kBAAkBnG,OAAOoF,GAC9C,OAAOtiB,EAEf,OAAQ,EAQZ6nB,6BAA6BvF,GAEzB,IAAK,IAAItiB,EAAI,EAAGA,EAAInI,KAAK0vB,aAAajxB,OAAQ0J,IAC1C,GAAInI,KAAK0vB,aAAavnB,GAAGsjB,gBAAgBpG,OAAOoF,GAC5C,OAAOtiB,EAEf,OAAQ,EAaZykB,YACI,OAAO5sB,KAAKwvB,eAehBtD,mBACIlsB,KAAKwvB,eAAiB,EACtB,IAAK,IAAIrnB,EAAI,EAAGA,EAAInI,KAAK0vB,aAAajxB,OAAQ0J,IAC1CnI,KAAK0vB,aAAavnB,GAAG+jB,mBACrBlsB,KAAKwvB,gBAAkBxvB,KAAK0vB,aAAavnB,GAAGykB,YAWpDqD,gBACI,OAAOjwB,KAAK0vB,aAAajxB,OAW7ByxB,WAAWC,GACP,OAAOnwB,KAAK0vB,aAAaS,GA6N7BxD,UAAUhD,GACN,IAAK,IAAIxhB,EAAI,EAAGA,EAAInI,KAAK0vB,aAAajxB,OAAQ0J,IAAK,EAC3C0mB,EAAQ7uB,KAAK0vB,aAAavnB,IACxBokB,gBAAgBnrB,IAAIuoB,GAC1BkF,EAAMrC,uBAAuBprB,IAAIuoB,GACjCkF,EAAMpC,qBAAqBrrB,IAAIuoB,GAGnC,IAAIkF,EAGJ,OAHIA,EAAQ7uB,KAAK0vB,aAAa1vB,KAAK0vB,aAAajxB,OAAS,IACnDiuB,cAActrB,IAAIuoB,GACxB3pB,KAAKksB,mBACElsB,KAYX6lB,MAAMuK,EAAQC,GACV,IAAK,IAAIloB,EAAI,EAAGA,EAAInI,KAAK0vB,aAAajxB,OAAQ0J,IAAK,CAC/C,IAAI0mB,EAAQ7uB,KAAK0vB,aAAavnB,GAC9B0mB,EAAMtC,gBAAgB1G,MAAMwK,EAASD,GACrCvB,EAAMrC,uBAAuB3G,MAAMwK,EAASD,GAC5CvB,EAAMpC,qBAAqB5G,MAAMwK,EAASD,GAU9C,OAJIpwB,KAAK0vB,aAAajxB,OAAS,IAAMuB,KAAKyvB,gBACtCzvB,KAAK0vB,aAAa1vB,KAAK0vB,aAAajxB,OAAS,GAAGiuB,cAAc7G,MAAMwK,EAASD,GAEjFpwB,KAAKksB,mBACElsB,KAYXgmB,OAAO7V,EAAO4V,GACV,IAAK,IAAI5d,EAAI,EAAGA,EAAInI,KAAK0vB,aAAajxB,OAAQ0J,IAAK,CAC/C,IAAI0mB,EAAQ7uB,KAAK0vB,aAAavnB,GAC9B0mB,EAAMtC,gBAAgBvG,OAAO7V,EAAO4V,GACpC8I,EAAMrC,uBAAuBxG,OAAO7V,EAAO4V,GAC3C8I,EAAMpC,qBAAqBzG,OAAO7V,EAAO4V,GAMzC/lB,KAAK0vB,aAAajxB,OAAS,IAAMuB,KAAKyvB,gBACtCzvB,KAAK0vB,aAAa1vB,KAAK0vB,aAAajxB,OAAS,GAAGiuB,cAAc1G,OAAO7V,EAAO4V,GASpFqE,YAAYxiB,GAQR,IANA,IAAI6lB,GAAY,EACZC,EAAU,EACVjN,EAAO,EACP6P,EAAS,EACTC,EAAO,EACPvC,EAAI,EACC7lB,EAAI,EAAGA,EAAInI,KAAK0vB,aAAajxB,OAAQ0J,IAC1CmoB,EAAStwB,KAAK0vB,aAAavnB,GAAGiiB,YAAYxiB,GAC1C6Y,EAAOzgB,KAAK0vB,aAAavnB,GAAG0L,WAAWyc,GAAQ/e,SAAS3J,KACvC,GAAb6lB,GAAkBhN,EAAOiN,KACzBD,EAAWtlB,EACXulB,EAAUjN,EACV8P,EAAOvC,EAAIsC,EAAStwB,KAAK0vB,aAAavnB,GAAGykB,aAE7CoB,GAAKhuB,KAAK0vB,aAAavnB,GAAGykB,YAE9B,OAAOzlB,KAAKqG,IAAI,EAAKrG,KAAK6I,IAAI,EAAKugB,EAAOvwB,KAAKwvB,iBAWnDzB,SAASC,IACDA,EAAI,GAAKA,EAAIhuB,KAAKwvB,kBAClBpxB,QAAQgM,KAAK,gDAAkD4jB,EAAI,KACnEA,EAAI7mB,KAAK6I,IAAIhQ,KAAKwvB,eAAgBroB,KAAKqG,IAAIwgB,EAAG,KAKlD,IAFA,IAAI7lB,EAAI,EACJqoB,EAAQ,EACLroB,EAAInI,KAAK0vB,aAAajxB,QAAU+xB,EAAQxwB,KAAK0vB,aAAavnB,GAAGykB,YAAcoB,GAC9EwC,GAASxwB,KAAK0vB,aAAavnB,GAAGykB,YAC9BzkB,IAIJ,GAAIA,GAAKnI,KAAK0vB,aAAajxB,OACvB,OAAOuB,KAAK0vB,aAAa1vB,KAAK0vB,aAAajxB,OAAS,GAAGiuB,cAAcjvB,QACzE,IACIgzB,EAAYzC,EAAIwC,EACpB,OAFaxwB,KAAK0vB,aAAavnB,GAEjB4lB,SAAS0C,GAW3B5c,WAAWD,GACP,OAAO5T,KAAK+tB,SAASna,EAAI5T,KAAKwvB,gBAalCvB,aAAara,GACT,OAAO5T,KAAK0uB,WAAW9a,EAAI5T,KAAKwvB,gBAapCd,WAAWV,IACHA,EAAI,GAAKA,EAAIhuB,KAAKwvB,kBAClBpxB,QAAQgM,KAAK,kDAAoD4jB,EAAI,KAErEA,EAAI7mB,KAAK6I,IAAIhQ,KAAKwvB,eAAgBroB,KAAKqG,IAAI,EAAGwgB,KAKlD,IAFA,IAAI7lB,EAAI,EACJqoB,EAAQ,EACLroB,EAAInI,KAAK0vB,aAAajxB,QAAU+xB,EAAQxwB,KAAK0vB,aAAavnB,GAAGykB,YAAcoB,GAC9EwC,GAASxwB,KAAK0vB,aAAavnB,GAAGykB,YAC9BzkB,IAEJ,IACIsoB,EAAYzC,EAAIwC,EACpB,OAFaxwB,KAAK0vB,aAAavnB,GAEjBumB,WAAW+B,GAa7B3c,mBAAmBF,GACf,OAAO5T,KAAK2uB,iBAAiB/a,EAAI5T,KAAKwvB,gBAa1Cb,iBAAiBX,IACTA,EAAI,GAAKA,EAAIhuB,KAAKwvB,kBAClBpxB,QAAQC,IAAI,wDAA0D2vB,EAAI,KAC1EA,EAAI7mB,KAAK6I,IAAIhQ,KAAKwvB,eAAgBroB,KAAKqG,IAAI,EAAGwgB,KAGlD,IAAI0C,EAAU5H,EAAW6H,cAAc3wB,KAAMguB,GACzC4C,EAAS5wB,KAAK0vB,aAAagB,EAAQvoB,GACnCsoB,EAAYzC,EAAI0C,EAAQG,MAC5B,OAAOD,EAAOjC,iBAAiB8B,GAcnCvO,qBAAqBtM,EAAMoY,GAIvB,IAHA,IAAI7lB,EAAI,EACJqoB,EAAQ,EACRM,EAAU,EACP3oB,EAAIyN,EAAK8Z,aAAajxB,QAAU+xB,EAAQ5a,EAAK8Z,aAAavnB,GAAGykB,YAAcoB,GAC9EwC,GAAS5a,EAAK8Z,aAAavnB,GAAGykB,YAC1BzkB,EAAI,EAAIyN,EAAK8Z,aAAajxB,SAC1BqyB,GAAWlb,EAAK8Z,aAAavnB,GAAGykB,aACpCzkB,IAEJ,MAAO,CAAEA,EAAGA,EAAG0oB,MAAOL,EAAOM,QAASA,GAoB1CC,aAAaC,EAAQC,GACjBD,EAAS7pB,KAAKqG,IAAI,EAAGwjB,GACrBC,EAAO9pB,KAAK6I,IAAI,EAAKihB,GACrB,IAAIC,EAASF,EAAShxB,KAAKwvB,eACvB2B,EAAOF,EAAOjxB,KAAKwvB,eACvB,IAAI4B,EAAetI,EAAW6H,cAAc3wB,KAAMkxB,GAC9CG,EAAavI,EAAW6H,cAAc3wB,KAAMmxB,GAC5CG,GAAUJ,EAASE,EAAaN,SAAW9wB,KAAK0vB,aAAa0B,EAAajpB,GAAGykB,YACjF,GAAIwE,EAAajpB,GAAKkpB,EAAWlpB,EAAG,CAEhC,IAAIopB,GAASJ,EAAOE,EAAWP,SAAW9wB,KAAK0vB,aAAa2B,EAAWlpB,GAAGykB,YACtE4E,EAAaxxB,KAAK0vB,aAAa0B,EAAajpB,GAAGmmB,cAAcgD,EAAQC,GACzE,OAAOzI,EAAWC,UAAU,CAACyI,IAG7B,IAAIC,EAAS,GACb,GAAIL,EAAajpB,EAAIkpB,EAAWlpB,EAAG,CAE3BqpB,EAAaxxB,KAAK0vB,aAAa0B,EAAajpB,GAAGmmB,cAAcgD,EAAQ,GACzEG,EAAOvsB,KAAKssB,GACZ,IAAK,IAAIrpB,EAAIipB,EAAajpB,EAAI,EAAGA,EAAIkpB,EAAWlpB,EAAGA,IAC/CspB,EAAOvsB,KAAKlF,KAAK0vB,aAAavnB,GAAG1K,QAAQ2f,WAEzCmU,GAASJ,EAAOE,EAAWP,SAAW9wB,KAAK0vB,aAAa2B,EAAWlpB,GAAGykB,YAC1E6E,EAAOvsB,KAAKlF,KAAK0vB,aAAa2B,EAAWlpB,GAAGmmB,cAAc,EAAKiD,QAE9D,CAEGC,EAAaxxB,KAAK0vB,aAAa0B,EAAajpB,GAAGmmB,cAAcgD,EAAQ,GACzEG,EAAOvsB,KAAKssB,GACZ,IAASrpB,EAAIipB,EAAajpB,EAAI,EAAGA,EAAIkpB,EAAWlpB,GAAKA,EAAInI,KAAK0vB,aAAajxB,OAAQ0J,IAC/EspB,EAAOvsB,KAAKlF,KAAK0vB,aAAavnB,GAAG1K,SAEjC8zB,GAASJ,EAAOE,EAAWP,SAAW9wB,KAAK0vB,aAAa2B,EAAWlpB,GAAGykB,YAC1E6E,EAAOvsB,KAAKlF,KAAK0vB,aAAa2B,EAAWlpB,GAAGmmB,cAAc,EAAGiD,IAEjE,OAAOzI,EAAWC,UAAU0I,GAkBpCtF,eAAegE,EAAY/D,EAASC,GAOhC,GANarsB,KAAKkwB,WAAWC,GACtBhE,eAAeC,EAASC,GAAY,GAC3C,GAIID,GAAWpsB,KAAK0rB,cAAgByE,EAAa,GAAKnwB,KAAKyvB,gBAErCzvB,KAAKkwB,WAAWC,EAAa,EAAI,EAAInwB,KAAK0vB,aAAajxB,QAAU0xB,EAAa,GAAKA,EAAa,GACtGhE,eAAensB,KAAK4rB,kBAAmBS,GAAY,GAC/D,QAGC,GAAID,GAAWpsB,KAAK6rB,YAAcsE,EAAa,EAAInwB,KAAK0vB,aAAajxB,QAAUuB,KAAKyvB,gBAAiB,CAEtFzvB,KAAKkwB,YAAYC,EAAa,GAAKnwB,KAAK0vB,aAAajxB,QAC3D0tB,eAAensB,KAAK2rB,oBAAqBU,GAAY,GAC/D,QAGKD,GAAWpsB,KAAK2rB,qBAAuBwE,EAAa,EACzDnwB,KAAK0xB,8BAA8BvB,GAAY,GAC/C,GAGK/D,GAAWpsB,KAAK4rB,mBAAqBuE,EAAa,EAAInwB,KAAKiwB,iBAChEjwB,KAAK4vB,4BAA4BO,GAAY,GAC7C,GAKJnwB,KAAKksB,mBAcTwF,8BAA8BvB,EAAYwB,EAAoBzF,GAC1D,GAAKlsB,KAAKyvB,kBAAkBU,GAAc,GAA1C,CAEA,IAAIyB,EAAY5xB,KAAKkwB,WAAWC,GAC5B0B,EAAiB7xB,KAAKkwB,WAAWC,EAAa,EAAI,EAAInwB,KAAKiwB,iBAAmBE,EAAa,GAAKA,EAAa,GACjHrH,EAAWgJ,4BAA4BF,EAAWC,EAAgBD,EAAUrF,gBAC5EqF,EAAUpF,uBACVqF,EAAenF,cACfmF,EAAepF,qBACfkF,EAAoBzF,IAcxB0D,4BAA4BO,EAAYwB,EAAoBzF,GACxD,GAAKlsB,KAAKyvB,kBAAkBU,EAAa,EAAInwB,KAAKiwB,iBAAlD,CAEA,IAAI2B,EAAY5xB,KAAKkwB,WAAWC,GAC5B0B,EAAiB7xB,KAAKkwB,YAAYC,EAAa,GAAKnwB,KAAKiwB,iBAChDnH,EAAWgJ,4BAA4BF,EAAWC,EAAgBD,EAAUlF,cACzFkF,EAAUnF,qBACVoF,EAAetF,gBACfsF,EAAerF,uBACfmF,EAAoBzF,IAmBxBhK,mCAAmC6P,EACnCF,EAAgBG,EAAWC,EAAkBC,EAAgBC,EAAuBC,EAAqBC,GAGrG,IAAIC,EAAmB,IAAI3d,EAAOsd,EAAiBvzB,EAAIszB,EAAUtzB,EAAGuzB,EAAiB1zB,EAAIyzB,EAAUzzB,GAC/Fg0B,EAAwB,IAAI5d,EAAOwd,EAAsBzzB,EAAIwzB,EAAexzB,EAAGyzB,EAAsB5zB,EAAI2zB,EAAe3zB,GACxHi0B,EAAmBrrB,KAAKgT,KAAKhT,KAAKse,IAAI6M,EAAiB5zB,EAAG,GAAKyI,KAAKse,IAAI6M,EAAiB/zB,EAAG,IAC5Fk0B,EAAwBtrB,KAAKgT,KAAKhT,KAAKse,IAAI8M,EAAsB7zB,EAAG,GAAKyI,KAAKse,IAAI8M,EAAsBh0B,EAAG,IAC3Gi0B,GAAoB,KAGpBJ,EACAD,EAAsBlxB,IAAIixB,EAAexzB,EAAI4zB,EAAiB5zB,GAAK+zB,EAAwBD,GAAmBN,EAAe3zB,EAAI+zB,EAAiB/zB,GAAKk0B,EAAwBD,IAG/KL,EAAsBlxB,IAAIixB,EAAexzB,EAAI4zB,EAAiB5zB,EAAGwzB,EAAe3zB,EAAI+zB,EAAiB/zB,GAEzGszB,EAAe3F,oBAUnBvoB,YACI,MAAMqM,EAAM,IAAI2E,EAAOnD,OAAOiC,kBAAmBjC,OAAOiC,mBAClDjG,EAAM,IAAImH,EAAOnD,OAAOkC,kBAAmBlC,OAAOkC,mBAExD,IADA,IAAIlJ,EACKrC,EAAI,EAAGA,EAAInI,KAAK0vB,aAAajxB,OAAQ0J,IAC1CqC,EAAIxK,KAAK0vB,aAAavnB,GAAGxE,YACzBqM,EAAItR,EAAIyI,KAAK6I,IAAIA,EAAItR,EAAG8L,EAAEwF,IAAItR,GAC9BsR,EAAIzR,EAAI4I,KAAK6I,IAAIA,EAAIzR,EAAGiM,EAAEwF,IAAIzR,GAC9BiP,EAAI9O,EAAIyI,KAAKqG,IAAIA,EAAI9O,EAAG8L,EAAEgD,IAAI9O,GAC9B8O,EAAIjP,EAAI4I,KAAKqG,IAAIA,EAAIjP,EAAGiM,EAAEgD,IAAIjP,GAElC,OAAO,IAAIkW,EAAOzE,EAAKxC,GAU3B/P,QAEI,IADA,IAAImY,EAAO,IAAIkT,OAAW5N,GACjB/S,EAAI,EAAGA,EAAInI,KAAK0vB,aAAajxB,OAAQ0J,IAC1CyN,EAAK8Z,aAAaxqB,KAAKlF,KAAK0vB,aAAavnB,GAAG1K,SAExC0K,EAAI,IACJyN,EAAK8Z,aAAavnB,EAAI,GAAG5K,SAAWqY,EAAK8Z,aAAavnB,GAAGojB,YAIjE,OAFA3V,EAAKsW,mBACLtW,EAAK6Z,eAAiBzvB,KAAKyvB,eACpB7Z,EAWXyP,OAAOzP,GACH,IAAKA,EACD,OAAO,EAEX,IAAKA,EAAK8Z,aACN,OAAO,EACX,QAAuC,IAA5B9Z,EAAK8Z,aAAajxB,OACzB,OAAO,EACX,GAAImX,EAAK8Z,aAAajxB,QAAUuB,KAAK0vB,aAAajxB,OAC9C,OAAO,EACX,IAAK,IAAI0J,EAAI,EAAGA,EAAInI,KAAK0vB,aAAajxB,OAAQ0J,IAC1C,IAAKnI,KAAK0vB,aAAavnB,GAAGkd,OAAOzP,EAAK8Z,aAAavnB,IAC/C,OAAO,EAEf,OAAO,EAaXme,YAAYvpB,GACRA,EAAUA,GAAW,GACrB,IAAI6iB,EAAS,GACbA,EAAO1a,KAAK,SACRnI,EAAQunB,WACR1E,EAAO1a,KAAK,WAAanI,EAAQunB,UAAY,KACjD1E,EAAO1a,KAAK,QACZ,IAAK,IAAIsK,EAAI,EAAGA,EAAIxP,KAAK0vB,aAAajxB,OAAQ+Q,IACtCA,EAAI,GACJoQ,EAAO1a,KAAK,KAChB0a,EAAO1a,KAAKlF,KAAK0vB,aAAalgB,GAAGuf,iBAGrC,OADAnP,EAAO1a,KAAK,QACL0a,EAAOzV,KAAK,IAWvB6kB,OAAOC,GACH,IAAIrP,EAAS,GACbA,EAAO1a,KAAK,KACZ,IAAK,IAAIiD,EAAI,EAAGA,EAAInI,KAAK0vB,aAAajxB,OAAQ0J,IACtCA,EAAI,GACJyX,EAAO1a,KAAK,KACZ+pB,EACArP,EAAO1a,KAAK,QAEZ0a,EAAO1a,KAAK,KAChB0a,EAAO1a,KAAKlF,KAAK0vB,aAAavnB,GAAG6mB,OAAOC,IAK5C,OAHgC,GAA5BjvB,KAAK0vB,aAAajxB,QAClBmhB,EAAO1a,KAAK,KAChB0a,EAAO1a,KAAK,KACL0a,EAAOzV,KAAK,IAYvB+X,gBAAgBgN,GACZ,IAAIJ,EAAMK,KAAKllB,MAAMilB,GACrB,OAAOpG,EAAWC,UAAU+F,GAYhC5M,iBAAiB4M,GACb,IAAKnkB,MAAM2kB,QAAQR,GACf,KAAM,yDACV,MAAMO,EAAMP,EACZ,GAAIO,EAAI5wB,OAAS,EACb,KAAM,mFAAqF4wB,EAAI5wB,OAAS,KAI5G,IAFA,IAAIi0B,EAAQ,IAAI5J,OAAW5N,GACvByX,EAAY,KACPxqB,EAAI,EAAGA,EAAIknB,EAAI5wB,OAAQ0J,IAAK,CAEjC,IAAIyoB,EACJ,GAAItF,EAAiBsH,WAAWvD,EAAIlnB,IAChCyoB,EAASvB,EAAIlnB,GAAG1K,aAEf,GAAI,KAAK4xB,EAAIlnB,IAAM,KAAKknB,EAAIlnB,IAAM,KAAKknB,EAAIlnB,IAAM,KAAKknB,EAAIlnB,GAAI,CAC/D,KAAKknB,EAAIlnB,GAAG,IAAOknB,EAAIlnB,GAAG,IAAOknB,EAAIlnB,GAAG,IAAOknB,EAAIlnB,GAAG,IAClD,KAAM,6FAA+FA,EAAI,MAAQknB,EAAIlnB,GACzHyoB,EAAStF,EAAiBvC,UAAUsG,EAAIlnB,SAGxCyoB,EAAStF,EAAiB8D,WAAWC,EAAIlnB,IAIzCwqB,IACA/B,EAAOrF,WAAaoH,EAAUp1B,UAElCm1B,EAAMhD,aAAaxqB,KAAK0rB,GAExB+B,EAAY/B,EAIhB,OAFA8B,EAAMxG,mBAECwG,EAgBXG,4BAA4BC,QACH,IAAVA,IACPA,EAAS,GACb,IAAIlT,EAAS,GACbA,EAAO1a,KAAK,KACZ,IAAK,IAAIiD,EAAI,EAAGA,EAAInI,KAAK0vB,aAAajxB,OAAQ0J,IAAK,CAC/C,IAAI0mB,EAAQ7uB,KAAK0vB,aAAavnB,GAC9ByX,EAAO1a,KAAK2pB,EAAMtC,gBAAgB7tB,EAAEq0B,QAAQD,IAC5ClT,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAK2pB,EAAMtC,gBAAgBhuB,EAAEw0B,QAAQD,IAC5ClT,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAK2pB,EAAMrC,uBAAuB9tB,EAAEq0B,QAAQD,IACnDlT,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAK2pB,EAAMrC,uBAAuBjuB,EAAEw0B,QAAQD,IACnDlT,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAK2pB,EAAMpC,qBAAqB/tB,EAAEq0B,QAAQD,IACjDlT,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAK2pB,EAAMpC,qBAAqBluB,EAAEw0B,QAAQD,IACjDlT,EAAO1a,KAAK,KAEhB,GAAgC,GAA5BlF,KAAK0vB,aAAajxB,OAAa,CAC3BowB,EAAQ7uB,KAAK0vB,aAAa1vB,KAAK0vB,aAAajxB,OAAS,GACzDmhB,EAAO1a,KAAK2pB,EAAMnC,cAAchuB,EAAEq0B,QAAQD,IAC1ClT,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAK2pB,EAAMnC,cAAcnuB,EAAEw0B,QAAQD,IAG9C,OADAlT,EAAO1a,KAAK,KACL0a,EAAOzV,KAAK,IAcvB+X,qCAAqC8Q,EAAUvD,GAE3C,IAAIwD,EAAa9D,KAAKllB,MAAM+oB,GAC5B,IAAKC,EAAWx0B,OAEZ,MADAL,QAAQC,IAAI,6EACN,4EAEV,GAAI40B,EAAWx0B,OAAS,EAEpB,MADAL,QAAQC,IAAI,0FACN,yFAEV,OAAOyqB,EAAWoK,gBAAgBD,EAAYxD,GAalDvN,uBAAuB+Q,EAAYxD,GAE/B,IAEIlE,EACAC,EACAC,EACAluB,EALA41B,EAAa,IAAIrK,EAAW,MAM5B3gB,EAAI,EACR,EAAG,CACU,GAALA,IAEAojB,EAAa,IAAI5W,EAAOse,EAAW9qB,GAAI8qB,EAAW9qB,EAAI,KAE1DqjB,EAAoB,IAAI7W,EAAOse,EAAW9qB,EAAI,GAAI8qB,EAAW9qB,EAAI,IACjEsjB,EAAkB,IAAI9W,EAAOse,EAAW9qB,EAAI,GAAI8qB,EAAW9qB,EAAI,IAI/D5K,EAAW,IAAIoX,EAAOse,EAAW9qB,EAAI,GAAI8qB,EAAW9qB,EAAI,IAExD,IAAIyoB,EAAS,IAAItF,EAAiBC,EAAYhuB,EAAUiuB,EAAmBC,GAC3E0H,EAAWzD,aAAaxqB,KAAK0rB,GAC7BrF,EAAahuB,EACb4K,GAAK,QACAA,EAAI,EAAI8qB,EAAWx0B,QAM5B,OALA00B,EAAW1D,eAAiBA,EACxBA,IACA0D,EAAWzD,aAAayD,EAAWzD,aAAajxB,OAAS,GAAGlB,SAAW41B,EAAWzD,aAAa,GAAGnE,YAEtG4H,EAAWjH,mBACJiH,GAOfrK,EAAW4C,YAAc,EAEzB5C,EAAW6C,oBAAsB,EAEjC7C,EAAW8C,kBAAoB,EAE/B9C,EAAW+C,UAAY,ECnnChB,MAAM7jB,UAAawhB,EAStBve,YAAYsE,EAAG/E,GACXugB,MAAMxb,EAAG/E,GAAG,CAAC+E,EAAG/E,IAAM,IAAIxC,EAAKuH,EAAG/E,KAIlCxK,KAAKskB,UAAY,OAYrB6G,aAAa1M,GACT,MAAMyL,EAAclqB,KAAKkqB,YAAYzL,GACrC,GAAmB,GAAfyL,EACA,OAAO,KACX,IAAI3a,EAAIvP,KAAKuP,EAAEhR,EAAIkgB,EAAKlP,EAAEhR,EACtBiM,EAAIxK,KAAKuP,EAAE7Q,EAAI+f,EAAKlP,EAAE7Q,EAC1B,MAAM0sB,GAAe3M,EAAKjU,EAAE9L,EAAI+f,EAAKlP,EAAE7Q,GAAK6Q,GAAOkP,EAAKjU,EAAEjM,EAAIkgB,EAAKlP,EAAEhR,GAAKiM,EACpE6gB,GAAerrB,KAAKwK,EAAE9L,EAAIsB,KAAKuP,EAAE7Q,GAAK6Q,GAAOvP,KAAKwK,EAAEjM,EAAIyB,KAAKuP,EAAEhR,GAAKiM,EAC1E+E,EAAI6b,EAAalB,EACjB1f,EAAI6gB,EAAanB,EAEjB,MAAMxrB,EAAIsB,KAAKuP,EAAE7Q,EAAK6Q,GAAKvP,KAAKwK,EAAE9L,EAAIsB,KAAKuP,EAAE7Q,GACvCH,EAAIyB,KAAKuP,EAAEhR,EAAKgR,GAAKvP,KAAKwK,EAAEjM,EAAIyB,KAAKuP,EAAEhR,GAC7C,OAAIiV,MAAMjE,IAAMiE,MAAM9U,IAAM8U,MAAMjV,QAAlC,EAIO,IAAIoW,EAAOjW,EAAGH,GAczB+nB,YAAYvpB,GACRA,EAAUA,GAAW,GACrB,IAAI6iB,EAAS,GASb,OARAA,EAAO1a,KAAK,SACRnI,EAAQunB,WACR1E,EAAO1a,KAAK,WAAanI,EAAQunB,UAAY,KACjD1E,EAAO1a,KAAK,QAAUlF,KAAKuP,EAAE7Q,EAAI,KACjCkhB,EAAO1a,KAAK,QAAUlF,KAAKuP,EAAEhR,EAAI,KACjCqhB,EAAO1a,KAAK,QAAUlF,KAAKwK,EAAE9L,EAAI,KACjCkhB,EAAO1a,KAAK,QAAUlF,KAAKwK,EAAEjM,EAAI,KACjCqhB,EAAO1a,KAAK,OACL0a,EAAOzV,KAAK,KCvEpB,MAAMipB,EASTnoB,YAAY8a,EAAQnP,GAIhB5W,KAAKskB,UAAY,SACjBtkB,KAAKukB,IAAMtC,EAAajG,OACxBhc,KAAK+lB,OAASA,EACd/lB,KAAK4W,OAASA,EAYlByc,eAAeC,GACX,OAAOtzB,KAAK+lB,OAAOxU,SAAS+hB,EAAOvN,QAAUuN,EAAO1c,OAAS5W,KAAK4W,OAiBtE2c,aAAa9U,GAET,OAD2BA,EAAKkM,gBAAgB3qB,KAAK+lB,QAC3BxU,SAASvR,KAAK+lB,QAAU/lB,KAAK4W,OAY3DqT,OAAO9Z,GAEH,OAAOijB,EAAOI,YAAYvJ,OAAO9Z,EAAOnQ,KAAK4W,QAAQxV,IAAIpB,KAAK+lB,QAclE0N,UAAUtjB,GACN,MAAM0c,EAASuG,EAAOI,YAAYvJ,OAAO9Z,EAAOnQ,KAAK4W,QAErD,OAAO,IAAIkU,EAAO+B,EAAQ,IAAIlY,EAAO,EAAG,IAAIvT,IAAIpB,KAAK+lB,QAAQiF,OAYjE0I,mBAAmBJ,GAEf,GAAItzB,KAAK+lB,OAAOxU,SAAS+hB,EAAOvN,QAAU/lB,KAAK4W,OAAS0c,EAAO1c,OAC3D,OAAO,KAGX,GAAI5W,KAAK+lB,OAAOxU,SAAS+hB,EAAOvN,QAAU5e,KAAKwM,IAAI3T,KAAK4W,OAAS0c,EAAO1c,QACpE,OAAO,KAwBX,IAAI+c,EAAK3zB,KAAK+lB,OACV6N,EAAKN,EAAOvN,OACZxb,EAAIopB,EAAGpiB,SAASqiB,GAChBrkB,GAAKvP,KAAK4W,OAAS5W,KAAK4W,OAAS0c,EAAO1c,OAAS0c,EAAO1c,OAASrM,EAAIA,IAAM,EAAIA,GAC/EspB,EAAI1sB,KAAKgT,KAAKna,KAAK4W,OAAS5W,KAAK4W,OAASrH,EAAIA,GAC9CukB,EAAKF,EAAGn2B,QAAQooB,MAAMtW,EAAIhF,EAAGopB,GAC7BI,EAAKD,EAAGp1B,EAAIm1B,GAAKD,EAAGr1B,EAAIo1B,EAAGp1B,GAAKgM,EAChCypB,EAAKF,EAAGv1B,EAAIs1B,GAAKD,EAAGl1B,EAAIi1B,EAAGj1B,GAAK6L,EAChC0pB,EAAKH,EAAGp1B,EAAIm1B,GAAKD,EAAGr1B,EAAIo1B,EAAGp1B,GAAKgM,EAChC2pB,EAAKJ,EAAGv1B,EAAIs1B,GAAKD,EAAGl1B,EAAIi1B,EAAGj1B,GAAK6L,EACpC,OAAO,IAAIvC,EAAK,IAAI2M,EAAOof,EAAIC,GAAK,IAAIrf,EAAOsf,EAAIC,IAavD5N,YAAYvpB,GACRA,EAAUA,GAAW,GACrB,IAAI6iB,EAAS,GAQb,OAPAA,EAAO1a,KAAK,WACRnI,EAAQunB,WACR1E,EAAO1a,KAAK,WAAanI,EAAQunB,UAAY,KACjD1E,EAAO1a,KAAK,QAAUlF,KAAK+lB,OAAOrnB,EAAI,KACtCkhB,EAAO1a,KAAK,QAAUlF,KAAK+lB,OAAOxnB,EAAI,KACtCqhB,EAAO1a,KAAK,OAASlF,KAAK4W,OAAS,KACnCgJ,EAAO1a,KAAK,OACL0a,EAAOzV,KAAK,KAI3BipB,EAAOI,YAAc,CACjBvJ,OAAQ,CAAC9Z,EAAOyG,IAGL,IAAIjC,EAAOxN,KAAK6P,IAAI7G,GAASyG,EAAQzP,KAAK8P,IAAI9G,GAASyG,IC5K/D,MAAMud,EAUTlpB,YAAYqoB,EAAQc,EAAYC,GAI5Br0B,KAAKskB,UAAY,eACjBtkB,KAAKukB,IAAMtC,EAAajG,OACxBhc,KAAKszB,OAASA,EACdtzB,KAAKo0B,WAAaA,EAClBp0B,KAAKq0B,SAAWA,EAYpB/N,YAAYvpB,GACRA,EAAUA,GAAW,GACrB,IAAI6iB,EAAS,GACbA,EAAO1a,KAAK,UACRnI,EAAQunB,WACR1E,EAAO1a,KAAK,WAAanI,EAAQunB,UAAY,KACjD,MAAMgQ,EAAOH,EAAaI,kBAAkBC,eAAex0B,KAAKszB,OAAOvN,OAAOrnB,EAAGsB,KAAKszB,OAAOvN,OAAOxnB,EAAGyB,KAAKszB,OAAO1c,OAAQ5W,KAAKo0B,WAAYp0B,KAAKq0B,UAEjJ,OADAzU,EAAO1a,KAAK,OAASovB,EAAKnqB,KAAK,KAAO,QAC/ByV,EAAOzV,KAAK,KAI3BgqB,EAAaI,kBAAoB,CAQ7BE,iBAAkB,CAACC,EAASC,EAAS/d,EAAQzG,KAClC,CACHzR,EAAGg2B,EAAW9d,EAASzP,KAAK6P,IAAI7G,GAChC5R,EAAGo2B,EAAW/d,EAASzP,KAAK8P,IAAI9G,KAYxCqkB,eAAgB,CAAC91B,EAAGH,EAAGqY,EAAQwd,EAAYC,EAAUt3B,UAC1B,IAAZA,IACPA,EAAU,CAAE63B,aAAa,IAC7B,MAAMp3B,EAAM22B,EAAaI,kBAAkBE,iBAAiB/1B,EAAGH,EAAGqY,EAAQyd,GACpEz2B,EAAQu2B,EAAaI,kBAAkBE,iBAAiB/1B,EAAGH,EAAGqY,EAAQwd,GAG5E,GAAc,EAAVjtB,KAAKC,GAASD,KAAKwM,IAAIygB,EAAaC,GAAY,KAAO,CACvD,MAAMQ,EAAYV,EAAaI,kBAAkBC,eAAe91B,EAAGH,EAAGqY,EAAQwd,EAAYA,GAAcC,EAAWD,GAAc,EAAGr3B,GAC9H+3B,EAAaX,EAAaI,kBAAkBC,eAAe91B,EAAGH,EAAGqY,EAAQwd,GAAcC,EAAWD,GAAc,EAAGC,EAAUt3B,GACnI,OAAO83B,EAAUxX,OAAOyX,GAG5B,MAAM7a,EAAOoa,EAAWD,EACxB,IAAIW,EACAC,EACA/a,EAAO,GACP8a,EAAe5tB,KAAKwM,IAAIsG,GAAQ9S,KAAKC,GAAK,EAAI,EAC9C4tB,EAAY,IAGZD,EAAe5tB,KAAKwM,IAAIsG,GAAQ9S,KAAKC,GAAK,EAAI,EAC9C4tB,EAAY,GAEhB,MAAMC,EAAW,GAKjB,OAJIl4B,EAAQ63B,aACRK,EAAS/vB,KAAK,IAAKtH,EAAMc,EAAGd,EAAMW,GAEtC02B,EAAS/vB,KAAK,IAAK0R,EAAQA,EAAQ,EAAGme,EAAcC,EAAWx3B,EAAIkB,EAAGlB,EAAIe,GACnE02B,ICrER,MAAMC,EAeTjqB,YAAYkqB,EAASC,EAAQvP,EAAOwP,EAAYC,EAAYC,EAAYC,EAAaC,EAAOC,GACxF11B,KAAKm1B,QAAUA,EACfn1B,KAAKo1B,OAAS,IAAIzgB,EAAO,EAAG,GAAG1T,IAAIm0B,GACnCp1B,KAAK6lB,MAAQ,IAAIlR,EAAO,EAAG,GAAG1T,IAAI4kB,GAClC7lB,KAAKs1B,WAAaA,EAClBt1B,KAAKw1B,YAAcA,EACnBx1B,KAAK21B,qBAAuB,GAC5B31B,KAAK41B,MAAQ,IAAI3gB,IACjBjV,KAAKqD,QAAQgyB,GACTG,GACAx1B,KAAKy1B,MAAQA,EACbz1B,KAAK01B,YAAcA,IAGnB11B,KAAK61B,aAAaN,GAClBv1B,KAAKy1B,MAAQz1B,KAAK81B,cAAc,KAChC91B,KAAK01B,YAAc11B,KAAK81B,cAAc,KACtC91B,KAAKm1B,QAAQY,YAAY/1B,KAAKy1B,QAGtCI,aAAaN,GACTv1B,KAAKg2B,UAAYh2B,KAAK81B,cAAc,SACpC91B,KAAKm1B,QAAQY,YAAY/1B,KAAKg2B,WAG9B,MAAMC,EAAO,CACT,QAAW,UACX,SAAY,WACZ,QAAW,UACX,cAAiB,gBACjB,OAAU,SACV,aAAgB,eAChB,OAAU,SACV,KAAQ,OACR,OAAU,SACV,MAAS,SAGPC,EAAQ,GACd,IAAK,IAAIC,KAAKF,EAAM,CAChB,MAAM3R,EAAY2R,EAAKE,GACjBC,EAAeb,EAAWY,GAC5BC,EACAF,EAAMhxB,KAAK,IAAIof,4BAAoC8R,EAAal4B,wBAAwBk4B,EAAaC,iBAGrGj4B,QAAQgM,KAAK,iDAAiD+rB,yBAGtEn2B,KAAKg2B,UAAUM,UAAYJ,EAAM/rB,KAAK,MAa1CosB,mBAAmBC,GACf,MAAM5W,EAAS,GACf4W,EAAKxxB,SAAQ,CAAC3I,EAAOgmB,KACjBzC,EAAO1a,KAAKmd,EAAM,MAAQhmB,EAAQ,SAEtC2D,KAAKg2B,UAAUM,WAAa,0BAA4B1W,EAAOzV,KAAK,MAaxEssB,YAAYpU,EAAKqU,GACb,IAAIC,EAAO32B,KAAK41B,MAAM9f,IAAIuM,GAC1B,OAAIsU,GAAQA,EAAKD,SAASE,gBAAkBF,EAASE,eACjD52B,KAAK41B,MAAMvZ,OAAOgG,GACXsU,GAEJ,KAYXb,cAAcY,GACV,OAAOx2B,SAAS22B,gBAAgB,6BAA8BH,GAclEI,SAASJ,GAIL,IAAIC,EAAO32B,KAAKy2B,YAAYz2B,KAAK+2B,MAAOL,GASxC,OARKC,IAGDA,EAAO32B,KAAK81B,cAAcY,IAE1B12B,KAAK21B,qBAAqBqB,YAC1BL,EAAKxzB,MAAM,kBAAoBnD,KAAK21B,qBAAqBqB,WAEtDL,EAsBXM,cAAcN,EAAMrS,EAAWpmB,EAAOm4B,GAiBlC,OAhBIr2B,KAAKk3B,aACLP,EAAKvzB,aAAa,QAAS,GAAGkhB,KAAatkB,KAAKk3B,gBAGhDP,EAAKvzB,aAAa,QAASkhB,GAE/BqS,EAAKvzB,aAAa,OAAQpD,KAAKs1B,WAAap3B,EAAQ,QACpDy4B,EAAKvzB,aAAa,SAAUpD,KAAKs1B,WAAa,OAASp3B,GACvDy4B,EAAKvzB,aAAa,eAAgB,GAAGizB,GAAa,KAC9Cr2B,KAAK+2B,OACLJ,EAAKvzB,aAAa,KAAM,GAAGpD,KAAK+2B,SAE/BJ,EAAKQ,YAENn3B,KAAK01B,YAAYK,YAAYY,GAE1BA,EAUXtzB,QAAQgyB,GACJr1B,KAAKq1B,WAAaA,EAClBr1B,KAAKm1B,QAAQ/xB,aAAa,UAAW,OAAOpD,KAAKq1B,WAAWxyB,SAAS7C,KAAKq1B,WAAWpyB,UACrFjD,KAAKm1B,QAAQ/xB,aAAa,QAAS,GAAGpD,KAAKq1B,WAAWxyB,SACtD7C,KAAKm1B,QAAQ/xB,aAAa,SAAU,GAAGpD,KAAKq1B,WAAWpyB,UAM3Dm0B,aAAa9B,GAIT,OAHW,IAAIJ,EAAal1B,KAAKm1B,QAASn1B,KAAKo1B,OAAQp1B,KAAK6lB,MAAO7lB,KAAKq1B,WAAYC,EAAY,MAChG,EACAt1B,KAAKy1B,MAAOz1B,KAAK01B,aAUrB2B,iBAAiBC,GACbt3B,KAAK21B,qBAAuB2B,EAYhCC,aAAahT,GACTvkB,KAAK+2B,MAAQxS,EAYjBiT,oBAAoBlT,GAChBtkB,KAAKk3B,aAAe5S,EAYxBmT,eAAeC,GAEX13B,KAAK41B,MAAMla,QAEX,IAAK,IAAIvT,EAAI,EAAGA,EAAInI,KAAK01B,YAAYiC,WAAWl5B,OAAQ0J,IAAK,CAGzD,IAAIyvB,EAAQ53B,KAAK01B,YAAYiC,WAAWxvB,GACxCnI,KAAK41B,MAAM30B,IAAI22B,EAAM1Y,aAAa,MAAO0Y,GAE7C53B,KAAKoa,sBAYTyd,aAAaH,GACJ13B,KAAKw1B,aAKNx1B,KAAKm1B,QAAQ2C,aAAa93B,KAAK01B,YAAa11B,KAAKy1B,OAErD,IAAIvK,EAAMlrB,KAAKy1B,MACfz1B,KAAKy1B,MAAQz1B,KAAK01B,YAClB11B,KAAK01B,YAAcxK,EAEvB6M,GAAGr5B,GACC,OAAOsB,KAAKo1B,OAAO12B,EAAIsB,KAAK6lB,MAAMnnB,EAAIA,EAE1Cs5B,GAAGz5B,GACC,OAAOyB,KAAKo1B,OAAO72B,EAAIyB,KAAK6lB,MAAMtnB,EAAIA,EAc1CkgB,KAAKiI,EAAIC,EAAIzoB,EAAOm4B,GAChB,MAAM5X,EAAOze,KAAK82B,SAAS,QAK3B,OAJArY,EAAKrb,aAAa,KAAM,GAAGpD,KAAK+3B,GAAGrR,EAAGhoB,MACtC+f,EAAKrb,aAAa,KAAM,GAAGpD,KAAKg4B,GAAGtR,EAAGnoB,MACtCkgB,EAAKrb,aAAa,KAAM,GAAGpD,KAAK+3B,GAAGpR,EAAGjoB,MACtC+f,EAAKrb,aAAa,KAAM,GAAGpD,KAAKg4B,GAAGrR,EAAGpoB,MAC/ByB,KAAKi3B,cAAcxY,EAAM,OAAQvgB,EAAOm4B,GAAa,GAchE4B,MAAMvR,EAAIC,EAAIzoB,EAAOm4B,GACjB,MAAMM,EAAO32B,KAAK82B,SAAS,QAC3B,IACI15B,EAAWuX,EAAO6R,MAAMC,eAAeC,EAAIC,EADjC,EAC8C3mB,KAAK6lB,MAAMnnB,EAAGsB,KAAK6lB,MAAMtnB,GACrF,MAAMgM,EAAI,CAAC,IAAKvK,KAAK+3B,GAAGrR,EAAGhoB,GAAIsB,KAAKg4B,GAAGtR,EAAGnoB,IAC1C,IAAK,IAAI4J,EAAI,EAAGA,GAAK/K,EAASqB,OAAQ0J,IAClCoC,EAAErF,KAAK,KAEPqF,EAAErF,KAAKlF,KAAKo1B,OAAO12B,EAAItB,EAAS+K,EAAI/K,EAASqB,QAAQC,GACrD6L,EAAErF,KAAKlF,KAAKo1B,OAAO72B,EAAInB,EAAS+K,EAAI/K,EAASqB,QAAQF,GAGzD,OADAo4B,EAAKvzB,aAAa,IAAKmH,EAAEJ,KAAK,MACvBnK,KAAKi3B,cAAcN,EAAM,QAASz4B,EAAOm4B,GAAa,GAejEzb,MAAMA,EAAO/Z,EAAU5C,GACnB,MAAM04B,EAAO32B,KAAK82B,SAAS,SAErBoB,EAAgBtd,IAClB,GAAIA,EAAMud,aAAc,CACpB,MAAMC,EAASn6B,EAAKS,EAAIkc,EAAMud,aACxBE,EAASp6B,EAAKM,EAAIqc,EAAMK,cAC9B0b,EAAKvzB,aAAa,QAAS,GAAGwX,EAAMud,aAAen4B,KAAK6lB,MAAMnnB,GAC9Di4B,EAAKvzB,aAAa,SAAU,GAAGwX,EAAMK,cAAgBjb,KAAK6lB,MAAMtnB,GAChEo4B,EAAKvzB,aAAa,UAAW,MAC7BuzB,EAAKvzB,aAAa,YAAa,aAAapD,KAAK+3B,GAAGl3B,EAASnC,MAAMsB,KAAKg4B,GAAGn3B,EAAStC,aAAa65B,KAAUC,QAanH,OAVAzd,EAAMrY,iBAAiB,QAAQ+1B,IAC3BJ,EAAatd,MAIjB+b,EAAKvzB,aAAa,IAAK,KACvBuzB,EAAKvzB,aAAa,IAAK,KACvBuzB,EAAKvzB,aAAa,UAAW,QAC7B80B,EAAatd,GACb+b,EAAKvzB,aAAa,OAAQwX,EAAM2d,KACzBv4B,KAAKi3B,cAAcN,EAAM,QAAS,KAAM,MAgBnD6B,YAAYjN,EAAYhuB,EAAUiuB,EAAmBC,EAAiBvtB,EAAOm4B,GACzE,GAAI9K,aAAsBD,EACtB,OAAOtrB,KAAKw4B,YAAYjN,EAAWA,WAAYA,EAAWhuB,SAAUguB,EAAWC,kBAAmBD,EAAWE,gBAAiBvtB,EAAOm4B,GAEzI,MAAMM,EAAO32B,KAAK82B,SAAS,QAErBvsB,EAAI,CACN,IACAvK,KAAK+3B,GAAGxM,EAAW7sB,GACnBsB,KAAKg4B,GAAGzM,EAAWhtB,GACnB,IACAyB,KAAK+3B,GAAGvM,EAAkB9sB,GAC1BsB,KAAKg4B,GAAGxM,EAAkBjtB,GAC1ByB,KAAK+3B,GAAGtM,EAAgB/sB,GACxBsB,KAAKg4B,GAAGvM,EAAgBltB,GACxByB,KAAK+3B,GAAGx6B,EAASmB,GACjBsB,KAAKg4B,GAAGz6B,EAASgB,IAGrB,OADAo4B,EAAKvzB,aAAa,IAAKmH,EAAEJ,KAAK,MACvBnK,KAAKi3B,cAAcN,EAAM,eAAgBz4B,EAAOm4B,GAiB3DoC,gBAAgB7iB,EAAM1X,EAAOm4B,GACzB,MAAMM,EAAO32B,KAAK82B,SAAS,QAC3B,IAAKlhB,GAAuB,GAAfA,EAAKnX,OACd,OAAOk4B,EAEX,MAAMpsB,EAAI,CAAC,IAAKvK,KAAK+3B,GAAGniB,EAAK,GAAGlX,GAAIsB,KAAKg4B,GAAGpiB,EAAK,GAAGrX,IAKpD,IAHA,IAAIhB,EACAiuB,EACAC,EACKtjB,EAAI,EAAGA,EAAIyN,EAAKnX,OAAQ0J,GAAK,EAClCqjB,EAAoB5V,EAAKzN,GACzBsjB,EAAkB7V,EAAKzN,EAAI,GAC3B5K,EAAWqY,EAAKzN,EAAI,GACpBoC,EAAErF,KAAK,IAAKlF,KAAK+3B,GAAGvM,EAAkB9sB,GAAIsB,KAAKg4B,GAAGxM,EAAkBjtB,GAAIyB,KAAK+3B,GAAGtM,EAAgB/sB,GAAIsB,KAAKg4B,GAAGvM,EAAgBltB,GAAIyB,KAAK+3B,GAAGx6B,EAASmB,GAAIsB,KAAKg4B,GAAGz6B,EAASgB,IAG1K,OADAo4B,EAAKvzB,aAAa,IAAKmH,EAAEJ,KAAK,MACvBnK,KAAKi3B,cAAcN,EAAM,kBAAmBz4B,EAAOm4B,GAAa,GAc3EqC,OAAOnN,EAAYhuB,GAEfyC,KAAKyqB,MAAMc,EAAY,iBACvBvrB,KAAK24B,OAAOp7B,EAAU,EAAG,uBAY7Bq7B,WAAWrN,EAAYhuB,GACnByC,KAAKye,KAAK8M,EAAYhuB,EAAU,oBAYpCs7B,IAAIjxB,EAAG1J,GACH,MAAMy4B,EAAO32B,KAAK82B,SAAS,QAC3B,OAAO92B,KAAKi3B,cAAcN,EAAM,MAAOz4B,EAAO,GAYlDusB,MAAM7iB,EAAG1J,GAEL,MAAMy4B,EAAO32B,KAAK82B,SAAS,UAI3B,OAHAH,EAAKvzB,aAAa,KAAM,GAAGpD,KAAK+3B,GAAGnwB,EAAElJ,MACrCi4B,EAAKvzB,aAAa,KAAM,GAAGpD,KAAKg4B,GAAGpwB,EAAErJ,MACrCo4B,EAAKvzB,aAAa,IAAK,KAChBpD,KAAKi3B,cAAcN,EAAM,QAASz4B,EAAO,GAgBpDo1B,OAAOvN,EAAQnP,EAAQ1Y,EAAOm4B,GAE1B,MAAMM,EAAO32B,KAAK82B,SAAS,UAI3B,OAHAH,EAAKvzB,aAAa,KAAM,GAAGpD,KAAK+3B,GAAGhS,EAAOrnB,MAC1Ci4B,EAAKvzB,aAAa,KAAM,GAAGpD,KAAKg4B,GAAGjS,EAAOxnB,MAC1Co4B,EAAKvzB,aAAa,IAAK,GAAGwT,EAAS5W,KAAK6lB,MAAMnnB,GACvCsB,KAAKi3B,cAAcN,EAAM,SAAUz4B,EAAOm4B,GAAa,GAelEyC,UAAU/S,EAAQnP,EAAQwd,EAAYC,EAAUn2B,EAAOm4B,GACnD,MAAMM,EAAO32B,KAAK82B,SAAS,QACrBiC,EAAU5E,EAAaI,kBAAkBC,eAAex0B,KAAK+3B,GAAGhS,EAAOrnB,GAAIsB,KAAKg4B,GAAGjS,EAAOxnB,GAAIqY,EAAS5W,KAAK6lB,MAAMnnB,EACxH01B,EAAYC,GAEZ,OADAsC,EAAKvzB,aAAa,IAAK21B,EAAQ5uB,KAAK,MAC7BnK,KAAKi3B,cAAcN,EAAM,YAAaz4B,EAAOm4B,GAAa,GAgBrE2C,QAAQjT,EAAQkT,EAASC,EAASh7B,EAAOm4B,EAAWnvB,QACxB,IAAbA,IACPA,EAAW,GAEf,MAAMyvB,EAAO32B,KAAK82B,SAAS,WAO3B,OANAH,EAAKvzB,aAAa,KAAM,GAAGpD,KAAK+3B,GAAGhS,EAAOrnB,MAC1Ci4B,EAAKvzB,aAAa,KAAM,GAAGpD,KAAKg4B,GAAGjS,EAAOxnB,MAC1Co4B,EAAKvzB,aAAa,KAAM,GAAG61B,EAAUj5B,KAAK6lB,MAAMnnB,GAChDi4B,EAAKvzB,aAAa,KAAM,GAAG81B,EAAUl5B,KAAK6lB,MAAMtnB,GAEhDo4B,EAAKvzB,aAAa,YAAa,UAAsB,IAAX8D,EAAkBC,KAAKC,MAAMpH,KAAK+3B,GAAGhS,EAAOrnB,MAAMsB,KAAKg4B,GAAGjS,EAAOxnB,OACpGyB,KAAKi3B,cAAcN,EAAM,UAAWz4B,EAAOm4B,GAAa,GAgBnEsC,OAAO5S,EAAQ9nB,EAAMC,EAAOm4B,GACxB,MAAMM,EAAO32B,KAAK82B,SAAS,aAK3B,OAJAH,EAAKvzB,aAAa,IAAK,GAAGpD,KAAK+3B,GAAGhS,EAAOrnB,EAAIT,EAAO,MACpD04B,EAAKvzB,aAAa,IAAK,GAAGpD,KAAKg4B,GAAGjS,EAAOxnB,EAAIN,EAAO,MACpD04B,EAAKvzB,aAAa,QAAS,GAAGnF,EAAO+B,KAAK6lB,MAAMnnB,GAChDi4B,EAAKvzB,aAAa,SAAU,GAAGnF,EAAO+B,KAAK6lB,MAAMtnB,GAC1CyB,KAAKi3B,cAAcN,EAAM,SAAUz4B,EAAOm4B,GAAa,GAWlE8C,KAAKt4B,EAAUgC,EAAOI,EAAQ/E,EAAOm4B,GACjC,MAAMM,EAAO32B,KAAK82B,SAAS,QAK3B,OAJAH,EAAKvzB,aAAa,IAAK,GAAGpD,KAAK+3B,GAAGl3B,EAASnC,MAC3Ci4B,EAAKvzB,aAAa,IAAK,GAAGpD,KAAKg4B,GAAGn3B,EAAStC,MAC3Co4B,EAAKvzB,aAAa,QAAS,GAAGP,EAAQ7C,KAAK6lB,MAAMnnB,GACjDi4B,EAAKvzB,aAAa,SAAU,GAAGH,EAASjD,KAAK6lB,MAAMtnB,GAC5CyB,KAAKi3B,cAAcN,EAAM,OAAQz4B,EAAOm4B,GAAa,GAgBhE+C,KAAKrT,EAAQljB,EAAOI,EAAQo2B,EAAOC,EAAOp7B,GACtC,MAAMy4B,EAAO32B,KAAK82B,SAAS,QACrBvsB,EAAI,GAGV,IAFA,IAAI+e,GAAQniB,KAAKoyB,KAAe,GAATt2B,EAAgBq2B,GAASA,EAC5C/P,EAAOtmB,EAAS,EACXvE,GAAKyI,KAAKoyB,KAAc,GAAR12B,EAAew2B,GAASA,EAAO36B,EAAImE,EAAQ,EAAGnE,GAAK26B,EACxE9uB,EAAErF,KAAK,IAAKlF,KAAK+3B,GAAGhS,EAAOrnB,EAAIA,GAAIsB,KAAKg4B,GAAGjS,EAAOxnB,EAAI+qB,IACtD/e,EAAErF,KAAK,IAAKlF,KAAK+3B,GAAGhS,EAAOrnB,EAAIA,GAAIsB,KAAKg4B,GAAGjS,EAAOxnB,EAAIgrB,IAI1D,IAFA,IAAIH,GAAQjiB,KAAKoyB,KAAc,GAAR12B,EAAew2B,GAASA,EAC3ChQ,EAAOxmB,EAAQ,EACVtE,GAAK4I,KAAKoyB,KAAe,GAATt2B,EAAgBq2B,GAASA,EAAO/6B,EAAI0E,EAAS,EAAG1E,GAAK+6B,EAC1E/uB,EAAErF,KAAK,IAAKlF,KAAK+3B,GAAGhS,EAAOrnB,EAAI0qB,GAAOppB,KAAKg4B,GAAGjS,EAAOxnB,EAAIA,IACzDgM,EAAErF,KAAK,IAAKlF,KAAK+3B,GAAGhS,EAAOrnB,EAAI2qB,GAAOrpB,KAAKg4B,GAAGjS,EAAOxnB,EAAIA,IAG7D,OADAo4B,EAAKvzB,aAAa,IAAKmH,EAAEJ,KAAK,MACvBnK,KAAKi3B,cAAcN,EAAM,OAAQz4B,EAAO,GAkBnDs7B,OAAOzT,EAAQljB,EAAOI,EAAQo2B,EAAOC,EAAOp7B,GACxC,MAAMy4B,EAAO32B,KAAK82B,SAAS,QACrBvsB,EAAI,GACV,IAAK,IAAI7L,GAAKyI,KAAKoyB,KAAc,GAAR12B,EAAew2B,GAASA,EAAO36B,EAAImE,EAAQ,EAAGnE,GAAK26B,EACxE,IAAK,IAAI96B,GAAK4I,KAAKoyB,KAAe,GAATt2B,EAAgBq2B,GAASA,EAAO/6B,EAAI0E,EAAS,EAAG1E,GAAK+6B,EAE1E/uB,EAAErF,KAAK,IAAKlF,KAAK+3B,GAAGhS,EAAOrnB,EAAIA,GAAK,EAAGsB,KAAKg4B,GAAGjS,EAAOxnB,EAAIA,IAC1DgM,EAAErF,KAAK,IAAKlF,KAAK+3B,GAAGhS,EAAOrnB,EAAIA,GAAK,EAAGsB,KAAKg4B,GAAGjS,EAAOxnB,EAAIA,IAC1DgM,EAAErF,KAAK,IAAKlF,KAAK+3B,GAAGhS,EAAOrnB,EAAIA,GAAIsB,KAAKg4B,GAAGjS,EAAOxnB,EAAIA,GAAK,GAC3DgM,EAAErF,KAAK,IAAKlF,KAAK+3B,GAAGhS,EAAOrnB,EAAIA,GAAIsB,KAAKg4B,GAAGjS,EAAOxnB,EAAIA,GAAK,GAInE,OADAo4B,EAAKvzB,aAAa,IAAKmH,EAAEJ,KAAK,MACvBnK,KAAKi3B,cAAcN,EAAM,SAAUz4B,EAAO,GAiBrDu7B,cAAc1T,EAAQ9nB,EAAMC,GACxB,MAAMy4B,EAAO32B,KAAK82B,SAAS,QACrBvsB,EAAI,CACN,IACAvK,KAAK+3B,GAAGhS,EAAOrnB,GAAKT,EAAO,EAC3B+B,KAAKg4B,GAAGjS,EAAOxnB,GACf,IACAyB,KAAK+3B,GAAGhS,EAAOrnB,GACfsB,KAAKg4B,GAAGjS,EAAOxnB,GAAKN,EAAO,EAC3B,IACA+B,KAAK+3B,GAAGhS,EAAOrnB,GAAKT,EAAO,EAC3B+B,KAAKg4B,GAAGjS,EAAOxnB,GACf,IACAyB,KAAK+3B,GAAGhS,EAAOrnB,GACfsB,KAAKg4B,GAAGjS,EAAOxnB,GAAKN,EAAO,EAC3B,KAGJ,OADA04B,EAAKvzB,aAAa,IAAKmH,EAAEJ,KAAK,MACvBnK,KAAKi3B,cAAcN,EAAM,gBAAiBz4B,EAAO,GAiB5Dw7B,aAAa3T,EAAQ9nB,EAAMC,GACvB,MAAMy4B,EAAO32B,KAAK82B,SAAS,QAK3B,OAJAH,EAAKvzB,aAAa,IAAK,IAAGpD,KAAK+3B,GAAGhS,EAAOrnB,GAAKT,EAAO,IACrD04B,EAAKvzB,aAAa,IAAK,IAAGpD,KAAKg4B,GAAGjS,EAAOxnB,GAAKN,EAAO,IACrD04B,EAAKvzB,aAAa,QAAS,GAAGnF,KAC9B04B,EAAKvzB,aAAa,SAAU,GAAGnF,KACxB+B,KAAKi3B,cAAcN,EAAM,eAAgBz4B,EAAO,GAiB3Dy7B,aAAa5T,EAAQnP,EAAQ1Y,GACzB0Y,EAASA,GAAU,EACnB,MAAM+f,EAAO32B,KAAK82B,SAAS,UAI3B,OAHAH,EAAKvzB,aAAa,KAAM,GAAGpD,KAAK+3B,GAAGhS,EAAOrnB,MAC1Ci4B,EAAKvzB,aAAa,KAAM,GAAGpD,KAAKg4B,GAAGjS,EAAOxnB,MAC1Co4B,EAAKvzB,aAAa,IAAK,GAAGwT,KACnB5W,KAAKi3B,cAAcN,EAAM,eAAgBz4B,EAAO,GAe3D07B,UAAU7T,EAAQnP,EAAQ1Y,GACtB,MAAMy4B,EAAO32B,KAAK82B,SAAS,QACrBvsB,EAAI,CACN,IACAvK,KAAK+3B,GAAGhS,EAAOrnB,GAAKkY,EACpB5W,KAAKg4B,GAAGjS,EAAOxnB,GACf,IACAyB,KAAK+3B,GAAGhS,EAAOrnB,GAAKkY,EACpB5W,KAAKg4B,GAAGjS,EAAOxnB,GACf,IACAyB,KAAK+3B,GAAGhS,EAAOrnB,GACfsB,KAAKg4B,GAAGjS,EAAOxnB,GAAKqY,EACpB,IACA5W,KAAK+3B,GAAGhS,EAAOrnB,GACfsB,KAAKg4B,GAAGjS,EAAOxnB,GAAKqY,GAGxB,OADA+f,EAAKvzB,aAAa,IAAKmH,EAAEJ,KAAK,MACvBnK,KAAKi3B,cAAcN,EAAM,YAAaz4B,EAAO,IAaxD27B,QAAQA,EAAS37B,EAAOm4B,GACpB,OAAOr2B,KAAK85B,SAASD,EAAQz8B,SAAUy8B,EAAQ9S,OAAQ7oB,EAAOm4B,GAclEyD,SAAS18B,EAAU2pB,EAAQ7oB,EAAOm4B,GAC9B,MAAMM,EAAO32B,KAAK82B,SAAS,QAC3B,GAAuB,GAAnB15B,EAASqB,OACT,OAAOk4B,EAEX,MAAMpsB,EAAI,CAAC,IAAKvK,KAAK+3B,GAAG36B,EAAS,GAAGsB,GAAIsB,KAAKg4B,GAAG56B,EAAS,GAAGmB,IAE5D,IADA,IAAIqT,EAAIxU,EAASqB,OACR0J,EAAI,EAAGA,EAAIyJ,EAAGzJ,IACnBoC,EAAErF,KAAK,IAAKlF,KAAK+3B,GAAG36B,EAAS+K,GAAGzJ,GAAIsB,KAAKg4B,GAAG56B,EAAS+K,GAAG5J,IAK5D,OAHKwoB,GACDxc,EAAErF,KAAK,KACXyxB,EAAKvzB,aAAa,IAAKmH,EAAEJ,KAAK,MACvBnK,KAAKi3B,cAAcN,EAAM,WAAYz4B,EAAOm4B,GAAa,GAcpE0D,KAAKA,EAAMr7B,EAAGH,EAAGxB,GAEb,MAAMmB,GADNnB,EAAUA,GAAW,IACCmB,OAAS,QACzBy4B,EAAO32B,KAAK82B,SAAS,QAI3B,OAHAH,EAAKvzB,aAAa,IAAK,GAAGpD,KAAK+3B,GAAGr5B,MAClCi4B,EAAKvzB,aAAa,IAAK,GAAGpD,KAAKg4B,GAAGz5B,MAClCo4B,EAAKL,UAAYyD,EACV/5B,KAAKi3B,cAAcN,EAAM,OAAQz4B,EAAO,GAcnD87B,MAAMD,EAAMr7B,EAAGH,EAAG2I,GACd,MAAMyvB,EAAO32B,KAAK82B,SAAS,QAI3B,OAFAH,EAAKvzB,aAAa,YAAa,aAAapD,KAAKo1B,OAAO12B,KAAKsB,KAAKo1B,OAAO72B,cAAe2I,EAAWC,KAAKC,GAAM,QAC9GuvB,EAAKL,UAAYyD,EACV/5B,KAAKi3B,cAAcN,EAAM,QAAS,QAAS,MActD/gB,KAAKqf,EAAU/2B,EAAOm4B,EAAWt5B,GAC7B,MAAM45B,EAAO32B,KAAK82B,SAAS,QAErBvsB,EAAIxN,GAAWA,EAAQk9B,QAAUhF,EAAWC,EAAagF,aAAajF,GAG5E,OAFAC,EAAaiF,kBAAkB5vB,EAAGvK,KAAKo1B,OAAQp1B,KAAK6lB,OACpD8Q,EAAKvzB,aAAa,IAAKmH,EAAEJ,KAAK,MACvBnK,KAAKi3B,cAAcN,EAAM,OAAQz4B,EAAOm4B,GAanD3a,MAAMxd,GAGF,GAAI8B,KAAKw1B,YACL,OAWJx1B,KAAK+2B,MAAQ,aACb/2B,KAAKk3B,kBAAehc,EACpB,MAAMyb,EAAO32B,KAAK82B,SAAS,QAG3BH,EAAKvzB,aAAa,IAAK,KACvBuzB,EAAKvzB,aAAa,IAAK,KACvBuzB,EAAKvzB,aAAa,QAAS,GAAGpD,KAAKq1B,WAAWxyB,SAC9C8zB,EAAKvzB,aAAa,SAAU,GAAGpD,KAAKq1B,WAAWpyB,UAE/CjD,KAAKi3B,cAAcN,EAAM32B,KAAK+2B,MAAO,KAAM,MAC3CJ,EAAKvzB,aAAa,YAAyB,IAAVlF,EAAwB,OAASA,GAElE8B,KAAK+2B,WAAQ7b,EAOjBd,sBACI,KAAOpa,KAAK01B,YAAYpb,WACpBta,KAAK01B,YAAYnb,YAAYva,KAAK01B,YAAYpb,WAWtD4H,mBACI,OAAOhiB,SAAS22B,gBAAgB,6BAA8B,OAUlE3U,oBAAoBoS,GAChB,MAAMrW,EAAO,IAAItT,MAAM2pB,EAAK71B,QAC5B,IAAK,IAAI0J,EAAI,EAAGyJ,EAAI0iB,EAAK71B,OAAQ0J,EAAIyJ,EAAGzJ,IACpC8V,EAAK9V,GAAKmsB,EAAKnsB,GAEnB,OAAO8V,EAYXiE,yBAAyBoS,EAAMc,EAAQvP,GAEnC,MAAMuU,EAAQ9oB,IACVgjB,EAAKhjB,GAAS8jB,EAAO12B,EAAImnB,EAAMnnB,EAAI8S,OAAO8iB,EAAKhjB,KAE7C+oB,EAAQ/oB,IACVgjB,EAAKhjB,GAAS8jB,EAAO72B,EAAIsnB,EAAMtnB,EAAIiT,OAAO8iB,EAAKhjB,KAG7CgpB,EAAOhpB,IACTgjB,EAAKhjB,GAASuU,EAAMnnB,EAAI8S,OAAO8iB,EAAKhjB,KAElCipB,EAAOjpB,IACTgjB,EAAKhjB,GAASuU,EAAMtnB,EAAIiT,OAAO8iB,EAAKhjB,KAsBxC,IAPA,IAAInJ,EAAI,EACJqyB,EAAY,CAAE97B,EAAG+lB,IAAKlmB,EAAGkmB,KAEzBgW,EAAQnpB,IACRkpB,EAAU97B,EAAI8S,OAAO8iB,EAAKhjB,IAC1BkpB,EAAUj8B,EAAIiT,OAAO8iB,EAAKhjB,EAAQ,KAE/BnJ,EAAImsB,EAAK71B,QAAQ,CAEpB,OADY61B,EAAKnsB,IAEb,IAAK,IAEL,IAAK,IAEL,IAAK,IAEDiyB,EAAKjyB,EAAI,GACTkyB,EAAKlyB,EAAI,GACTsyB,EAAKtyB,EAAI,GACTA,GAAK,EACL,MACJ,IAAK,IAEL,IAAK,IAEL,IAAK,IAEDmyB,EAAInyB,EAAI,GACRoyB,EAAIpyB,EAAI,GACRsyB,EAAKtyB,EAAI,GACTA,GAAK,EACL,MACJ,IAAK,IAEDiyB,EAAKjyB,EAAI,GACTqyB,EAAU97B,EAAI8S,OAAO8iB,EAAKnsB,EAAI,IAC9BA,GAAK,EACL,MACJ,IAAK,IAEDmyB,EAAInyB,EAAI,GACRqyB,EAAU97B,EAAI8S,OAAO8iB,EAAKnsB,EAAI,IAC9BA,GAAK,EACL,MACJ,IAAK,IAEDkyB,EAAKlyB,EAAI,GACTqyB,EAAUj8B,EAAIiT,OAAO8iB,EAAKnsB,EAAI,IAC9BA,GAAK,EACL,MACJ,IAAK,IAEDoyB,EAAIpyB,EAAI,GACRqyB,EAAUj8B,EAAIiT,OAAO8iB,EAAKnsB,EAAI,IAC9BA,GAAK,EACL,MACJ,IAAK,IAEDiyB,EAAKjyB,EAAI,GACTkyB,EAAKlyB,EAAI,GACTiyB,EAAKjyB,EAAI,GACTkyB,EAAKlyB,EAAI,GACTiyB,EAAKjyB,EAAI,GACTkyB,EAAKlyB,EAAI,GACTsyB,EAAKtyB,EAAI,GACTA,GAAK,EACL,MACJ,IAAK,IAEDmyB,EAAInyB,EAAI,GACRoyB,EAAIpyB,EAAI,GACRmyB,EAAInyB,EAAI,GACRoyB,EAAIpyB,EAAI,GACRmyB,EAAInyB,EAAI,GACRoyB,EAAIpyB,EAAI,GACRsyB,EAAKtyB,EAAI,GACTA,GAAK,EACL,MACJ,IAAK,IACL,IAAK,IAGDiyB,EAAKjyB,EAAI,GACTkyB,EAAKlyB,EAAI,GACTiyB,EAAKjyB,EAAI,GACTkyB,EAAKlyB,EAAI,GACTsyB,EAAKtyB,EAAI,GACTA,GAAK,EACL,MACJ,IAAK,IACL,IAAK,IAGDmyB,EAAInyB,EAAI,GACRoyB,EAAIpyB,EAAI,GACRmyB,EAAInyB,EAAI,GACRoyB,EAAIpyB,EAAI,GACRsyB,EAAKtyB,EAAI,GACTA,GAAK,EACL,MACJ,IAAK,IAMDmyB,EAAInyB,EAAI,GACRoyB,EAAIpyB,EAAI,GACRiyB,EAAKjyB,EAAI,GACTkyB,EAAKlyB,EAAI,GACTsyB,EAAKtyB,EAAI,IAEJ0d,EAAMnnB,EAAI,GAAKmnB,EAAMtnB,GAAK,GAAOsnB,EAAMnnB,GAAK,GAAKmnB,EAAMtnB,EAAI,KAC5D+1B,EAAKnsB,EAAI,GAAKmsB,EAAKnsB,EAAI,GAAK,EAAI,GAEpCA,GAAK,EACL,MACJ,IAAK,IAEDmyB,EAAInyB,EAAI,GACRoyB,EAAIpyB,EAAI,GACRmyB,EAAInyB,EAAI,GACRoyB,EAAIpyB,EAAI,GACRsyB,EAAKtyB,EAAI,GACTA,GAAK,EACL,MASJ,QACIA,OAKpB+sB,EAAawF,SAAW,CACpB,yDACA,kDACA,uEACA,IACFvwB,KAAK,MCrnCA,MAAMwwB,EAST1vB,YAAY2vB,EAAStF,GACjBt1B,KAAK66B,IAAMD,EACX56B,KAAKo1B,OAAS,IAAIzgB,EAAO,EAAG,GAC5B3U,KAAK6lB,MAAQ,IAAIlR,EAAO,EAAG,GAC3B3U,KAAKs1B,WAAaA,EAMtBmC,eAAeC,IAafG,aAAaH,IAUbL,iBAAiBC,GACbt3B,KAAK66B,IAAIC,yBAA2BxD,EAAcN,UAUtDO,aAAahT,IAWbiT,oBAAoBlT,IAepB7F,KAAKiI,EAAIC,EAAIzoB,EAAOm4B,GAChBr2B,KAAK66B,IAAIE,OACT/6B,KAAK66B,IAAIG,YACTh7B,KAAK66B,IAAIhR,OAAO7pB,KAAKo1B,OAAO12B,EAAIgoB,EAAGhoB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAImoB,EAAGnoB,EAAIyB,KAAK6lB,MAAMtnB,GACvFyB,KAAK66B,IAAII,OAAOj7B,KAAKo1B,OAAO12B,EAAIioB,EAAGjoB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIooB,EAAGpoB,EAAIyB,KAAK6lB,MAAMtnB,GACvFyB,KAAK66B,IAAIK,YAAch9B,EACvB8B,KAAK66B,IAAIxE,UAAYA,GAAa,EAClCr2B,KAAK66B,IAAIM,SACTn7B,KAAK66B,IAAIO,UAcbnD,MAAMvR,EAAIC,EAAIzoB,EAAOm4B,GAIjBr2B,KAAK66B,IAAIE,OACT/6B,KAAK66B,IAAIG,YACT,IAAI59B,EAAWuX,EAAO6R,MAAMC,eAAeC,EAAIC,EALjC,EAK8C3mB,KAAK6lB,MAAMnnB,EAAGsB,KAAK6lB,MAAMtnB,GACrFyB,KAAK66B,IAAIhR,OAAO7pB,KAAKo1B,OAAO12B,EAAIgoB,EAAGhoB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAImoB,EAAGnoB,EAAIyB,KAAK6lB,MAAMtnB,GACvF,IAAK,IAAI4J,EAAI,EAAGA,EAAI/K,EAASqB,OAAQ0J,IACjCnI,KAAK66B,IAAII,OAAOj7B,KAAKo1B,OAAO12B,EAAItB,EAAS+K,GAAGzJ,EAAGsB,KAAKo1B,OAAO72B,EAAInB,EAAS+K,GAAG5J,GAE/EyB,KAAK66B,IAAII,OAAOj7B,KAAKo1B,OAAO12B,EAAItB,EAAS,GAAGsB,EAAGsB,KAAKo1B,OAAO72B,EAAInB,EAAS,GAAGmB,GAC3EyB,KAAK66B,IAAIxE,UAAYA,GAAa,EAClCr2B,KAAKq7B,YAAYn9B,GACjB8B,KAAK66B,IAAIO,UAebxgB,MAAMA,EAAO/Z,EAAU5C,GACd2c,EAAMI,UAAaJ,EAAMud,eAI9Bn4B,KAAK66B,IAAIE,OAGT/6B,KAAK66B,IAAIS,UAAU1gB,EAAO,EAAG,EAAGA,EAAMud,aAAe,EACrDvd,EAAMK,cAAgB,EACtBjb,KAAKo1B,OAAO12B,EAAImC,EAASnC,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIsC,EAAStC,EAAIyB,KAAK6lB,MAAMtnB,EAAGN,EAAKS,EAAIsB,KAAK6lB,MAAMnnB,EAAGT,EAAKM,EAAIyB,KAAK6lB,MAAMtnB,GACjIyB,KAAK66B,IAAIO,WAWbjC,KAAKt4B,EAAUgC,EAAOI,EAAQ/E,EAAOm4B,GACjCr2B,KAAK66B,IAAIE,OACT/6B,KAAK66B,IAAIG,YACTh7B,KAAK66B,IAAIhR,OAAO7pB,KAAKo1B,OAAO12B,EAAImC,EAASnC,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIsC,EAAStC,EAAIyB,KAAK6lB,MAAMtnB,GACnGyB,KAAK66B,IAAII,OAAOj7B,KAAKo1B,OAAO12B,GAAKmC,EAASnC,EAAImE,GAAS7C,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIsC,EAAStC,EAAIyB,KAAK6lB,MAAMtnB,GAC7GyB,KAAK66B,IAAII,OAAOj7B,KAAKo1B,OAAO12B,GAAKmC,EAASnC,EAAImE,GAAS7C,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,GAAKsC,EAAStC,EAAI0E,GAAUjD,KAAK6lB,MAAMtnB,GACxHyB,KAAK66B,IAAII,OAAOj7B,KAAKo1B,OAAO12B,EAAImC,EAASnC,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,GAAKsC,EAAStC,EAAI0E,GAAUjD,KAAK6lB,MAAMtnB,GAE9GyB,KAAK66B,IAAIU,YACTv7B,KAAK66B,IAAIxE,UAAYA,GAAa,EAClCr2B,KAAKq7B,YAAYn9B,GACjB8B,KAAK66B,IAAIO,UAcbC,YAAYn9B,GACJ8B,KAAKs1B,YACLt1B,KAAK66B,IAAIW,UAAYt9B,EACrB8B,KAAK66B,IAAIY,SAGTz7B,KAAK66B,IAAIK,YAAch9B,EACvB8B,KAAK66B,IAAIM,UAiBjB3C,YAAYjN,EAAYhuB,EAAUiuB,EAAmBC,EAAiBvtB,EAAOm4B,GACrE9K,aAAsBD,EACtBtrB,KAAKw4B,YAAYjN,EAAWA,WAAYA,EAAWhuB,SAAUguB,EAAWC,kBAAmBD,EAAWE,gBAAiBvtB,EAAOm4B,IAIlIr2B,KAAK66B,IAAIE,OACT/6B,KAAK66B,IAAIG,YACTh7B,KAAK66B,IAAIhR,OAAO7pB,KAAKo1B,OAAO12B,EAAI6sB,EAAW7sB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIgtB,EAAWhtB,EAAIyB,KAAK6lB,MAAMtnB,GACvGyB,KAAK66B,IAAIa,cAAc17B,KAAKo1B,OAAO12B,EAAI8sB,EAAkB9sB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIitB,EAAkBjtB,EAAIyB,KAAK6lB,MAAMtnB,EAAGyB,KAAKo1B,OAAO12B,EAAI+sB,EAAgB/sB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIktB,EAAgBltB,EAAIyB,KAAK6lB,MAAMtnB,EAAGyB,KAAKo1B,OAAO12B,EAAInB,EAASmB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIhB,EAASgB,EAAIyB,KAAK6lB,MAAMtnB,GAEtTyB,KAAK66B,IAAIxE,UAAYA,GAAa,EAClCr2B,KAAKq7B,YAAYn9B,GACjB8B,KAAK66B,IAAIO,WAebO,gBAAgBpQ,EAAYqQ,EAAcr+B,EAAUW,EAAOm4B,GAEvDr2B,KAAK66B,IAAIE,OACT/6B,KAAK66B,IAAIG,YACTh7B,KAAK66B,IAAIhR,OAAO7pB,KAAKo1B,OAAO12B,EAAI6sB,EAAW7sB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIgtB,EAAWhtB,EAAIyB,KAAK6lB,MAAMtnB,GACvGyB,KAAK66B,IAAIgB,iBAAiB77B,KAAKo1B,OAAO12B,EAAIk9B,EAAal9B,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIq9B,EAAar9B,EAAIyB,KAAK6lB,MAAMtnB,EAAGyB,KAAKo1B,OAAO12B,EAAInB,EAASmB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIhB,EAASgB,EAAIyB,KAAK6lB,MAAMtnB,GAC3MyB,KAAK66B,IAAIxE,UAAYA,GAAa,EAClCr2B,KAAKq7B,YAAYn9B,GACjB8B,KAAK66B,IAAIO,UAiBb3C,gBAAgB7iB,EAAM1X,EAAOm4B,GACzB,GAAKzgB,GAAuB,GAAfA,EAAKnX,OAAlB,CAKA,IAAIlB,EACAiuB,EACAC,EAJJzrB,KAAK66B,IAAIE,OACT/6B,KAAK66B,IAAIG,YAITh7B,KAAK66B,IAAIhR,OAAO7pB,KAAKo1B,OAAO12B,EAAIkX,EAAK,GAAGlX,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIqX,EAAK,GAAGrX,EAAIyB,KAAK6lB,MAAMtnB,GACjG,IAAK,IAAI4J,EAAI,EAAGA,EAAIyN,EAAKnX,OAAQ0J,GAAK,EAClCqjB,EAAoB5V,EAAKzN,GACzBsjB,EAAkB7V,EAAKzN,EAAI,GAC3B5K,EAAWqY,EAAKzN,EAAI,GACpBnI,KAAK66B,IAAIa,cAAc17B,KAAKo1B,OAAO12B,EAAI8sB,EAAkB9sB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIitB,EAAkBjtB,EAAIyB,KAAK6lB,MAAMtnB,EAAGyB,KAAKo1B,OAAO12B,EAAI+sB,EAAgB/sB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIktB,EAAgBltB,EAAIyB,KAAK6lB,MAAMtnB,EAAGyB,KAAKo1B,OAAO12B,EAAInB,EAASmB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIhB,EAASgB,EAAIyB,KAAK6lB,MAAMtnB,GAE1TyB,KAAK66B,IAAIU,YACTv7B,KAAK66B,IAAIxE,UAAYA,GAAa,EAClCr2B,KAAKq7B,YAAYn9B,GACjB8B,KAAK66B,IAAIO,WAcb1C,OAAOnN,EAAYhuB,GAGfyC,KAAKyqB,MAAMc,EAAY,iBACvBvrB,KAAK24B,OAAOp7B,EAAU,EAAG,uBAY7Bq7B,WAAWrN,EAAYhuB,GAEnByC,KAAKye,KAAK8M,EAAYhuB,EAAU,oBAYpCs7B,IAAIjxB,EAAG1J,GACH8B,KAAK66B,IAAIE,OACT/6B,KAAK66B,IAAIG,YACTh7B,KAAK66B,IAAIhR,OAAO1iB,KAAK2a,MAAM9hB,KAAKo1B,OAAO12B,EAAIsB,KAAK6lB,MAAMnnB,EAAIkJ,EAAElJ,GAAIyI,KAAK2a,MAAM9hB,KAAKo1B,OAAO72B,EAAIyB,KAAK6lB,MAAMtnB,EAAIqJ,EAAErJ,IAC5GyB,KAAK66B,IAAII,OAAO9zB,KAAK2a,MAAM9hB,KAAKo1B,OAAO12B,EAAIsB,KAAK6lB,MAAMnnB,EAAIkJ,EAAElJ,EAAI,GAAIyI,KAAK2a,MAAM9hB,KAAKo1B,OAAO72B,EAAIyB,KAAK6lB,MAAMtnB,EAAIqJ,EAAErJ,EAAI,IACpHyB,KAAK66B,IAAIU,YACTv7B,KAAK66B,IAAIxE,UAAY,EACrBr2B,KAAKq7B,YAAYn9B,GACjB8B,KAAK66B,IAAIO,UAYb3Q,MAAM7iB,EAAG1J,GAEL8B,KAAK66B,IAAIG,YACTh7B,KAAK66B,IAAIiB,IAAI97B,KAAKo1B,OAAO12B,EAAIkJ,EAAElJ,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIqJ,EAAErJ,EAAIyB,KAAK6lB,MAAMtnB,EAFrE,EAEgF,EAAG,EAAI4I,KAAKC,IAAI,GAC7GpH,KAAK66B,IAAIU,YACTv7B,KAAK66B,IAAIxE,UAAY,EACrBr2B,KAAKq7B,YAAYn9B,GAgBrBo1B,OAAOvN,EAAQnP,EAAQ1Y,EAAOm4B,GAC1Br2B,KAAK66B,IAAIG,YACTh7B,KAAK66B,IAAI7B,QAAQh5B,KAAKo1B,OAAO12B,EAAIqnB,EAAOrnB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIwnB,EAAOxnB,EAAIyB,KAAK6lB,MAAMtnB,EAAGqY,EAAS5W,KAAK6lB,MAAMnnB,EAAGkY,EAAS5W,KAAK6lB,MAAMtnB,EAAG,EAAK,EAAe,EAAV4I,KAAKC,IAChKpH,KAAK66B,IAAIU,YACTv7B,KAAK66B,IAAIxE,UAAYA,GAAa,EAClCr2B,KAAKq7B,YAAYn9B,GAiBrB46B,UAAU/S,EAAQnP,EAAQwd,EAAYC,EAAUn2B,EAAOm4B,EAAWt5B,GACzDA,GAAYA,EAAQg/B,WACrB/7B,KAAK66B,IAAIG,YAEbh7B,KAAK66B,IAAI7B,QAAQh5B,KAAKo1B,OAAO12B,EAAIqnB,EAAOrnB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIwnB,EAAOxnB,EAAIyB,KAAK6lB,MAAMtnB,EAAGqY,EAAS5W,KAAK6lB,MAAMnnB,EAAGkY,EAAS5W,KAAK6lB,MAAMtnB,EAAG,EAAK61B,EAAYC,GAAU,GACvKt3B,GAAYA,EAAQg/B,YAErB/7B,KAAK66B,IAAIxE,UAAYA,GAAa,EAClCr2B,KAAKq7B,YAAYn9B,GAAS,YAiBlC86B,QAAQjT,EAAQkT,EAASC,EAASh7B,EAAOm4B,EAAWnvB,QACxB,IAAbA,IACPA,EAAW,GAEflH,KAAK66B,IAAIG,YACTh7B,KAAK66B,IAAI7B,QAAQh5B,KAAKo1B,OAAO12B,EAAIqnB,EAAOrnB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIwnB,EAAOxnB,EAAIyB,KAAK6lB,MAAMtnB,EAAG06B,EAAUj5B,KAAK6lB,MAAMnnB,EAAGw6B,EAAUl5B,KAAK6lB,MAAMtnB,EAAG2I,EAAU,EAAe,EAAVC,KAAKC,IACvKpH,KAAK66B,IAAIU,YACTv7B,KAAK66B,IAAIxE,UAAYA,GAAa,EAClCr2B,KAAKq7B,YAAYn9B,GAgBrBy6B,OAAO5S,EAAQ9nB,EAAMC,EAAOm4B,GACxBr2B,KAAK66B,IAAIG,YACTh7B,KAAK66B,IAAI1B,KAAKn5B,KAAKo1B,OAAO12B,GAAKqnB,EAAOrnB,EAAIT,EAAO,GAAO+B,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,GAAKwnB,EAAOxnB,EAAIN,EAAO,GAAO+B,KAAK6lB,MAAMtnB,EAAGN,EAAO+B,KAAK6lB,MAAMnnB,EAAGT,EAAO+B,KAAK6lB,MAAMtnB,GACrKyB,KAAK66B,IAAIU,YACTv7B,KAAK66B,IAAIxE,UAAYA,GAAa,EAClCr2B,KAAKq7B,YAAYn9B,GAgBrBk7B,KAAKrT,EAAQljB,EAAOI,EAAQo2B,EAAOC,EAAOp7B,GACtC8B,KAAK66B,IAAIG,YAGT,IAFA,IAAI1R,GAAQniB,KAAKoyB,KAAe,GAATt2B,EAAgBq2B,GAASA,EAC5C/P,EAAOtmB,EAAS,EACXvE,GAAKyI,KAAKoyB,KAAc,GAAR12B,EAAew2B,GAASA,EAAO36B,EAAImE,EAAQ,EAAGnE,GAAK26B,EACxEr5B,KAAK66B,IAAIhR,OAAO7pB,KAAKo1B,OAAO12B,GAAKqnB,EAAOrnB,EAAIA,GAAKsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,GAAKwnB,EAAOxnB,EAAI+qB,GAAQtpB,KAAK6lB,MAAMtnB,GAC9GyB,KAAK66B,IAAII,OAAOj7B,KAAKo1B,OAAO12B,GAAKqnB,EAAOrnB,EAAIA,GAAKsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,GAAKwnB,EAAOxnB,EAAIgrB,GAAQvpB,KAAK6lB,MAAMtnB,GAIlH,IAFA,IAAI6qB,GAAQjiB,KAAKoyB,KAAc,GAAR12B,EAAew2B,GAASA,EAC3ChQ,EAAOxmB,EAAQ,EACVtE,GAAK4I,KAAKoyB,KAAe,GAATt2B,EAAgBq2B,GAASA,EAAO/6B,EAAI0E,EAAS,EAAG1E,GAAK+6B,EAC1Et5B,KAAK66B,IAAIhR,OAAO7pB,KAAKo1B,OAAO12B,GAAKqnB,EAAOrnB,EAAI0qB,GAAQppB,KAAK6lB,MAAMnnB,EAAI,EAAGsB,KAAKo1B,OAAO72B,GAAKwnB,EAAOxnB,EAAIA,GAAKyB,KAAK6lB,MAAMtnB,GAClHyB,KAAK66B,IAAII,OAAOj7B,KAAKo1B,OAAO12B,GAAKqnB,EAAOrnB,EAAI2qB,GAAQrpB,KAAK6lB,MAAMnnB,EAAI,EAAGsB,KAAKo1B,OAAO72B,GAAKwnB,EAAOxnB,EAAIA,GAAKyB,KAAK6lB,MAAMtnB,GAEtHyB,KAAK66B,IAAIK,YAAch9B,EACvB8B,KAAK66B,IAAIxE,UAAY,EACrBr2B,KAAK66B,IAAIM,SACTn7B,KAAK66B,IAAIU,YAkBb/B,OAAOzT,EAAQljB,EAAOI,EAAQo2B,EAAOC,EAAOp7B,GACxC8B,KAAK66B,IAAIE,OACT/6B,KAAK66B,IAAIG,YACT,IAAK,IAAIt8B,GAAKyI,KAAKoyB,KAAc,GAAR12B,EAAew2B,GAASA,EAAO36B,EAAImE,EAAQ,EAAGnE,GAAK26B,EACxE,IAAK,IAAI96B,GAAK4I,KAAKoyB,KAAe,GAATt2B,EAAgBq2B,GAASA,EAAO/6B,EAAI0E,EAAS,EAAG1E,GAAK+6B,EAE1Et5B,KAAK66B,IAAIhR,OAAO7pB,KAAKo1B,OAAO12B,GAAKqnB,EAAOrnB,EAAIA,GAAKsB,KAAK6lB,MAAMnnB,EAAI,EAAGsB,KAAKo1B,OAAO72B,GAAKwnB,EAAOxnB,EAAIA,GAAKyB,KAAK6lB,MAAMtnB,GAC/GyB,KAAK66B,IAAII,OAAOj7B,KAAKo1B,OAAO12B,GAAKqnB,EAAOrnB,EAAIA,GAAKsB,KAAK6lB,MAAMnnB,EAAI,EAAGsB,KAAKo1B,OAAO72B,GAAKwnB,EAAOxnB,EAAIA,GAAKyB,KAAK6lB,MAAMtnB,GAC/GyB,KAAK66B,IAAIhR,OAAO7pB,KAAKo1B,OAAO12B,GAAKqnB,EAAOrnB,EAAIA,GAAKsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,GAAKwnB,EAAOxnB,EAAIA,GAAKyB,KAAK6lB,MAAMtnB,EAAI,GAC/GyB,KAAK66B,IAAII,OAAOj7B,KAAKo1B,OAAO12B,GAAKqnB,EAAOrnB,EAAIA,GAAKsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,GAAKwnB,EAAOxnB,EAAIA,GAAKyB,KAAK6lB,MAAMtnB,EAAI,GAGvHyB,KAAK66B,IAAIK,YAAch9B,EACvB8B,KAAK66B,IAAIxE,UAAY,EACrBr2B,KAAK66B,IAAIM,SACTn7B,KAAK66B,IAAIU,YACTv7B,KAAK66B,IAAIO,UAiBb3B,cAAc1T,EAAQ9nB,EAAMC,GACxB8B,KAAK66B,IAAIG,YACTh7B,KAAK66B,IAAIhR,OAAO7pB,KAAKo1B,OAAO12B,EAAIqnB,EAAOrnB,EAAIsB,KAAK6lB,MAAMnnB,EAAIT,EAAO,EAAK+B,KAAKo1B,OAAO72B,EAAIwnB,EAAOxnB,EAAIyB,KAAK6lB,MAAMtnB,GAC5GyB,KAAK66B,IAAII,OAAOj7B,KAAKo1B,OAAO12B,EAAIqnB,EAAOrnB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIwnB,EAAOxnB,EAAIyB,KAAK6lB,MAAMtnB,EAAIN,EAAO,GAC1G+B,KAAK66B,IAAII,OAAOj7B,KAAKo1B,OAAO12B,EAAIqnB,EAAOrnB,EAAIsB,KAAK6lB,MAAMnnB,EAAIT,EAAO,EAAK+B,KAAKo1B,OAAO72B,EAAIwnB,EAAOxnB,EAAIyB,KAAK6lB,MAAMtnB,GAC5GyB,KAAK66B,IAAII,OAAOj7B,KAAKo1B,OAAO12B,EAAIqnB,EAAOrnB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIwnB,EAAOxnB,EAAIyB,KAAK6lB,MAAMtnB,EAAIN,EAAO,GAC1G+B,KAAK66B,IAAIU,YACTv7B,KAAK66B,IAAIxE,UAAY,EACrBr2B,KAAKq7B,YAAYn9B,GAiBrBw7B,aAAa3T,EAAQ9nB,EAAMC,GACvB8B,KAAK66B,IAAIG,YACTh7B,KAAK66B,IAAI1B,KAAKn5B,KAAKo1B,OAAO12B,EAAIqnB,EAAOrnB,EAAIsB,KAAK6lB,MAAMnnB,EAAIT,EAAO,EAAK+B,KAAKo1B,OAAO72B,EAAIwnB,EAAOxnB,EAAIyB,KAAK6lB,MAAMtnB,EAAIN,EAAO,EAAKA,EAAMA,GAChI+B,KAAK66B,IAAIU,YACTv7B,KAAK66B,IAAIxE,UAAY,EACrBr2B,KAAKq7B,YAAYn9B,GAiBrBy7B,aAAa5T,EAAQnP,EAAQ1Y,GACzB0Y,EAASA,GAAU,EACnB5W,KAAK66B,IAAIG,YACTh7B,KAAK66B,IAAIiB,IAAI97B,KAAKo1B,OAAO12B,EAAIqnB,EAAOrnB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIwnB,EAAOxnB,EAAIyB,KAAK6lB,MAAMtnB,EAAGqY,EAAQ,EAAG,EAAIzP,KAAKC,IAAI,GACvHpH,KAAK66B,IAAIU,YACTv7B,KAAK66B,IAAIxE,UAAY,EACrBr2B,KAAKq7B,YAAYn9B,GAerB07B,UAAU7T,EAAQnP,EAAQ1Y,GACtB8B,KAAK66B,IAAIE,OACT/6B,KAAK66B,IAAIG,YACTh7B,KAAK66B,IAAIhR,OAAO7pB,KAAKo1B,OAAO12B,EAAIqnB,EAAOrnB,EAAIsB,KAAK6lB,MAAMnnB,EAAIkY,EAAQ5W,KAAKo1B,OAAO72B,EAAIwnB,EAAOxnB,EAAIyB,KAAK6lB,MAAMtnB,GACxGyB,KAAK66B,IAAII,OAAOj7B,KAAKo1B,OAAO12B,EAAIqnB,EAAOrnB,EAAIsB,KAAK6lB,MAAMnnB,EAAIkY,EAAQ5W,KAAKo1B,OAAO72B,EAAIwnB,EAAOxnB,EAAIyB,KAAK6lB,MAAMtnB,GACxGyB,KAAK66B,IAAIhR,OAAO7pB,KAAKo1B,OAAO12B,EAAIqnB,EAAOrnB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIwnB,EAAOxnB,EAAIyB,KAAK6lB,MAAMtnB,EAAIqY,GACnG5W,KAAK66B,IAAII,OAAOj7B,KAAKo1B,OAAO12B,EAAIqnB,EAAOrnB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAIwnB,EAAOxnB,EAAIyB,KAAK6lB,MAAMtnB,EAAIqY,GACnG5W,KAAK66B,IAAIK,YAAch9B,EACvB8B,KAAK66B,IAAIxE,UAAY,GACrBr2B,KAAK66B,IAAIM,SACTn7B,KAAK66B,IAAIU,YACTv7B,KAAK66B,IAAIO,UAabvB,QAAQA,EAAS37B,EAAOm4B,GACpBr2B,KAAK85B,SAASD,EAAQz8B,SAAUy8B,EAAQ9S,OAAQ7oB,EAAOm4B,GAc3DyD,SAAS18B,EAAU2pB,EAAQ7oB,EAAOm4B,GAC9B,KAAIj5B,EAASqB,QAAU,GAAvB,CAEAuB,KAAK66B,IAAIE,OACT/6B,KAAK66B,IAAIG,YACTh7B,KAAK66B,IAAIxE,UAAYA,GAAa,EAClCr2B,KAAK66B,IAAIhR,OAAO7pB,KAAKo1B,OAAO12B,EAAItB,EAAS,GAAGsB,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAInB,EAAS,GAAGmB,EAAIyB,KAAK6lB,MAAMtnB,GACzG,IAAK,IAAI4J,EAAI,EAAGA,EAAI/K,EAASqB,OAAQ0J,IACjCnI,KAAK66B,IAAII,OAAOj7B,KAAKo1B,OAAO12B,EAAItB,EAAS+K,GAAGzJ,EAAIsB,KAAK6lB,MAAMnnB,EAAGsB,KAAKo1B,OAAO72B,EAAInB,EAAS+K,GAAG5J,EAAIyB,KAAK6lB,MAAMtnB,GAExGwoB,GAED/mB,KAAK66B,IAAIU,YACbv7B,KAAKq7B,YAAYn9B,GACjB8B,KAAK66B,IAAIU,YACTv7B,KAAK66B,IAAImB,YAAY,IACrBh8B,KAAK66B,IAAIO,WAEbrB,KAAKA,EAAMr7B,EAAGH,EAAGxB,GACbA,EAAUA,GAAW,GACrBiD,KAAK66B,IAAIE,OACTr8B,EAAIsB,KAAKo1B,OAAO12B,EAAIA,EAAIsB,KAAK6lB,MAAMnnB,EACnCH,EAAIyB,KAAKo1B,OAAO72B,EAAIA,EAAIyB,KAAK6lB,MAAMtnB,EACnC,MAAML,EAAQnB,EAAQmB,OAAS,QAC3B8B,KAAKs1B,YACLt1B,KAAK66B,IAAIW,UAAYt9B,EACrB8B,KAAK66B,IAAIoB,SAASlC,EAAMr7B,EAAGH,KAG3ByB,KAAK66B,IAAIK,YAAch9B,EACvB8B,KAAK66B,IAAIqB,WAAWnC,EAAMr7B,EAAGH,IAEjCyB,KAAK66B,IAAIO,UAiBbpB,MAAMD,EAAMr7B,EAAGH,EAAG2I,EAAUhJ,GACxB8B,KAAK66B,IAAIE,OACT/6B,KAAK66B,IAAIlO,UAAUjuB,EAAGH,QACC,IAAZ2I,GACPlH,KAAK66B,IAAI7U,OAAO9e,GACpBlH,KAAK66B,IAAIW,UAAYt9B,GAAS,QAC1B8B,KAAKs1B,WACLt1B,KAAK66B,IAAIoB,SAASlC,EAAM,EAAG,GAG3B/5B,KAAK66B,IAAIqB,WAAWnC,EAAM,EAAG,GAEjC/5B,KAAK66B,IAAIO,UAebxlB,KAAKqf,EAAU/2B,EAAOm4B,EAAWt5B,GAC7B,MAAMwN,EAAIxN,GAAWA,EAAQk9B,QAAUhF,EAAWC,EAAagF,aAAajF,GAC5EC,EAAaiF,kBAAkB5vB,EAAGvK,KAAKo1B,OAAQp1B,KAAK6lB,OACpD7lB,KAAK66B,IAAIK,YAAch9B,EACvB8B,KAAK66B,IAAIxE,UAAYA,GAAa,EAC9Br2B,KAAKs1B,YACLt1B,KAAK66B,IAAIW,UAAYt9B,EACrB8B,KAAK66B,IAAIY,KAAK,IAAIU,OAAO5xB,EAAEJ,KAAK,SAGhCnK,KAAK66B,IAAIK,YAAch9B,EACvB8B,KAAK66B,IAAIM,OAAO,IAAIgB,OAAO5xB,EAAEJ,KAAK,QAW1CuR,MAAMxd,GACF8B,KAAK66B,IAAIuB,UAAU,EAAG,EAAGp8B,KAAK66B,IAAI56B,OAAO4C,MAAO7C,KAAK66B,IAAI56B,OAAOgD,QAChEjD,KAAK66B,IAAIW,UAAYt9B,EACrB8B,KAAK66B,IAAIwB,SAAS,EAAG,EAAGr8B,KAAK66B,IAAI56B,OAAO4C,MAAO7C,KAAK66B,IAAI56B,OAAOgD,SCvvBhE,MAAMq5B,EASTrxB,YAAY2vB,EAAStF,GACjBt1B,KAAKu8B,GAAK3B,EACV56B,KAAKo1B,OAAS,IAAIzgB,EAAO,EAAG,GAC5B3U,KAAK6lB,MAAQ,IAAIlR,EAAO,EAAG,GAC3B3U,KAAKs1B,WAAaA,EAClBt1B,KAAKw8B,QAAU,EACA,MAAX5B,QAAsC,IAAZA,IAE9B56B,KAAKy8B,QAAU,IAAIC,EAAI9B,GAMvB56B,KAAK28B,YAAc38B,KAAKy8B,QAAQG,cAAcN,EAAYO,SAAU78B,KAAKu8B,GAAGO,eAC5E98B,KAAK+8B,YAAc/8B,KAAKy8B,QAAQG,cAAcN,EAAYU,SAAUh9B,KAAKu8B,GAAGU,iBAC5Ej9B,KAAKk9B,SAAWl9B,KAAKy8B,QAAQU,YAAYn9B,KAAK28B,YAAa38B,KAAK+8B,aAEhE/8B,KAAKo9B,cAAgBp9B,KAAKu8B,GAAGc,eAG7Bj/B,QAAQC,IAAI,mBAEhBi/B,OAAO5+B,GACH,OAASsB,KAAK6lB,MAAMnnB,EAAIA,EAAIsB,KAAKo1B,OAAO12B,GAAKsB,KAAKu8B,GAAGt8B,OAAO4C,MAAS,EAAM,EAE/E06B,OAAOh/B,GACH,OAASyB,KAAKo1B,OAAO72B,EAAIyB,KAAK6lB,MAAMtnB,EAAIA,GAAKyB,KAAKu8B,GAAGt8B,OAAOgD,OAAU,EAAM,EAMhFm0B,aAAa9B,GACT,IAAIrX,EAAO,IAAIqe,EAAY,KAAMhH,GAMjC,OALArX,EAAKse,GAAKv8B,KAAKu8B,GACfte,EAAKwe,QAAUz8B,KAAKy8B,QACpBxe,EAAK0e,YAAc38B,KAAK28B,YACxB1e,EAAK8e,YAAc/8B,KAAK+8B,YACxB9e,EAAKif,SAAWl9B,KAAKk9B,SACdjf,EAMXwZ,eAAeC,GACX13B,KAAKw8B,QAAU,EACfx8B,KAAK03B,WAAaA,EAYtBG,aAAaH,IAUbL,iBAAiBC,IAWjBC,aAAahT,GAETvkB,KAAK+2B,MAAQxS,EAUjBiT,oBAAoBlT,IAcpB7F,KAAKiI,EAAIC,EAAIzoB,GACT,MAAMd,EAAW,IAAIogC,aAAa,GAClCpgC,EAAS,GAAK4C,KAAKs9B,OAAO5W,EAAGhoB,GAC7BtB,EAAS,GAAK4C,KAAKu9B,OAAO7W,EAAGnoB,GAC7BnB,EAAS,GAAK4C,KAAKw8B,QACnBp/B,EAAS,GAAK4C,KAAKs9B,OAAO3W,EAAGjoB,GAC7BtB,EAAS,GAAK4C,KAAKu9B,OAAO5W,EAAGpoB,GAC7BnB,EAAS,GAAK4C,KAAKw8B,QACnBx8B,KAAKw8B,SAAW,KAIhBx8B,KAAKu8B,GAAGkB,WAAWz9B,KAAKu8B,GAAGmB,aAAc19B,KAAKo9B,eAE9Cp9B,KAAKu8B,GAAGoB,WAAW39B,KAAKu8B,GAAGmB,aAActgC,EAAU4C,KAAKu8B,GAAGqB,aAI3D,IAAIC,EAAQ79B,KAAKu8B,GAAGuB,kBAAkB99B,KAAKk9B,SAAU,YAErDl9B,KAAKu8B,GAAGwB,oBAAoBF,EAAO,EAAG79B,KAAKu8B,GAAGyB,OAAO,EAAO,EAAG,GAE/Dh+B,KAAKu8B,GAAG0B,wBAAwBJ,GAIhC79B,KAAKu8B,GAAG2B,SAAS,EAAG,EAAGl+B,KAAKu8B,GAAGt8B,OAAO4C,MAAO7C,KAAKu8B,GAAGt8B,OAAOgD,QAC5D,IAAIk7B,EAAkBn+B,KAAKu8B,GAAG6B,mBAAmBp+B,KAAKk9B,SAAU,mBAKhEl9B,KAAKu8B,GAAG8B,WAAWF,EAHG,CAAC,EAAK,IAI5Bn+B,KAAKu8B,GAAGlG,UAAU,GAElBr2B,KAAKu8B,GAAG+B,WAAWt+B,KAAKu8B,GAAGgC,MAAO,EAAGnhC,EAASqB,OAAS,GAe3Dw5B,MAAMvR,EAAIC,EAAIzoB,IAgBd0c,MAAMA,EAAO/Z,EAAU5C,IAcvBo9B,YAAYn9B,IAiBZs6B,YAAYjN,EAAYhuB,EAAUiuB,EAAmBC,EAAiBvtB,EAAOm4B,IAkB7EoC,gBAAgB7iB,EAAM1X,EAAOm4B,IAe7BqC,OAAOnN,EAAYhuB,IAanBq7B,WAAWrN,EAAYhuB,IAavBs7B,IAAIjxB,EAAG1J,IAaPusB,MAAM7iB,EAAG1J,IAiBTo1B,OAAOvN,EAAQnP,EAAQ1Y,EAAOm4B,IAgB9ByC,UAAU/S,EAAQnP,EAAQwd,EAAYC,EAAUn2B,EAAOm4B,IAiBvD2C,QAAQjT,EAAQkT,EAASC,EAASh7B,EAAOm4B,EAAWnvB,IAiBpDyxB,OAAO5S,EAAQ9nB,EAAMC,EAAOm4B,IAY5B8C,KAAKt4B,EAAUgC,EAAOI,EAAQ/E,EAAOm4B,IAiBrC+C,KAAKrT,EAAQljB,EAAOI,EAAQo2B,EAAOC,EAAOp7B,IAmB1Cs7B,OAAOzT,EAAQljB,EAAOI,EAAQo2B,EAAOC,EAAOp7B,IAkB5Cu7B,cAAc1T,EAAQ9nB,EAAMC,IAkB5Bw7B,aAAa3T,EAAQ9nB,EAAMC,IAkB3By7B,aAAa5T,EAAQ9nB,EAAMC,IAgB3B07B,UAAU7T,EAAQnP,EAAQ1Y,IAa1B27B,QAAQA,EAAS37B,EAAOm4B,GACpB,MAAMj5B,EAAW,IAAIogC,aAAuC,EAA1B3D,EAAQz8B,SAASqB,QACnD,IAAK,IAAI0J,EAAI,EAAGA,EAAI0xB,EAAQz8B,SAASqB,OAAQ0J,IACzC/K,EAAa,EAAJ+K,EAAQ,GAAKnI,KAAKs9B,OAAOzD,EAAQz8B,SAAS+K,GAAGzJ,GACtDtB,EAAa,EAAJ+K,EAAQ,GAAKnI,KAAKu9B,OAAO1D,EAAQz8B,SAAS+K,GAAG5J,GACtDnB,EAAa,EAAJ+K,EAAQ,GAAKnI,KAAKw8B,QAE/Bx8B,KAAKw8B,SAAW,KAKhBx8B,KAAKu8B,GAAGkB,WAAWz9B,KAAKu8B,GAAGmB,aAAc19B,KAAKo9B,eAE9Cp9B,KAAKu8B,GAAGoB,WAAW39B,KAAKu8B,GAAGmB,aAActgC,EAAU4C,KAAKu8B,GAAGqB,aAI3D,IAAIC,EAAQ79B,KAAKu8B,GAAGuB,kBAAkB99B,KAAKk9B,SAAU,YAErDl9B,KAAKu8B,GAAGwB,oBAAoBF,EAAO,EAAG79B,KAAKu8B,GAAGyB,OAAO,EAAO,EAAG,GAE/Dh+B,KAAKu8B,GAAG0B,wBAAwBJ,GAEhC79B,KAAKu8B,GAAGkB,WAAWz9B,KAAKu8B,GAAGmB,aAAc,MAEzC19B,KAAKu8B,GAAG2B,SAAS,EAAG,EAAGl+B,KAAKu8B,GAAGt8B,OAAO4C,MAAO7C,KAAKu8B,GAAGt8B,OAAOgD,QAC5D,IAAIk7B,EAAkBn+B,KAAKu8B,GAAG6B,mBAAmBp+B,KAAKk9B,SAAU,mBAKhEl9B,KAAKu8B,GAAG8B,WAAWF,EAHG,CAAC,EAAK,IAK5Bn+B,KAAKu8B,GAAG+B,WAAWt+B,KAAKu8B,GAAGiC,aAAc,EAAGphC,EAASqB,OAAS,GAgBlEq7B,SAAS18B,EAAU2pB,EAAQ7oB,EAAOm4B,IAGlC0D,KAAKA,EAAMr7B,EAAGH,EAAGxB,IAkBjBi9B,MAAMD,EAAMr7B,EAAGH,EAAG2I,IAelB0O,KAAKqf,EAAU/2B,EAAOm4B,EAAWt5B,IAWjC2e,MAAMxd,GAKF8B,KAAKu8B,GAAGkC,WAAW,EAAK,EAAK,EAAK,GAElCz+B,KAAKu8B,GAAGmC,OAAO1+B,KAAKu8B,GAAGoC,YAEvB3+B,KAAKu8B,GAAG7gB,MAAM1b,KAAKu8B,GAAGqC,iBAAmB5+B,KAAKu8B,GAAGsC,mBAIzDvC,EAAYO,SAAW,gYAkBvBP,EAAYU,SAAW,yGASvB,MAAMN,EACFzxB,YAAYsxB,GACRv8B,KAAKu8B,GAAKA,EAEdoB,WAAWmB,GAEP,IAAIC,EAAU/+B,KAAKu8B,GAAGc,eAOtB,OALAr9B,KAAKu8B,GAAGkB,WAAWz9B,KAAKu8B,GAAGmB,aAAcqB,GAEzC/+B,KAAKu8B,GAAGoB,WAAW39B,KAAKu8B,GAAGmB,aAAcoB,EAAO9+B,KAAKu8B,GAAGqB,aAExD59B,KAAKu8B,GAAGkB,WAAWz9B,KAAKu8B,GAAGmB,aAAc,MAClCqB,EAGXnC,cAAcoC,EAAYC,GAEtB,IAAIC,EAASl/B,KAAKu8B,GAAG4C,aAAaF,GAElCj/B,KAAKu8B,GAAG6C,aAAaF,EAAQF,GAE7Bh/B,KAAKu8B,GAAGK,cAAcsC,GAEtB,OADmBl/B,KAAKu8B,GAAG8C,mBAAmBH,EAAQl/B,KAAKu8B,GAAG+C,gBAMvDJ,GAJH9gC,QAAQgM,KAAK,mBAAqBpK,KAAKu8B,GAAGgD,iBAAiBL,IAC3Dl/B,KAAKu8B,GAAGiD,aAAaN,GACd,MAIf/B,YAAYsC,EAAYC,GAGpB,IAAIC,EAAU3/B,KAAKu8B,GAAGqD,gBActB,OAZA5/B,KAAKu8B,GAAGsD,aAAaF,EAASF,GAE9Bz/B,KAAKu8B,GAAGsD,aAAaF,EAASD,GAE9B1/B,KAAKu8B,GAAGuD,YAAYH,GAEpB3/B,KAAKu8B,GAAGwD,WAAWJ,GAEnB3/B,KAAKu8B,GAAGyD,aAAaL,EAASF,GAC9Bz/B,KAAKu8B,GAAGyD,aAAaL,EAASD,GAC9B1/B,KAAKu8B,GAAGiD,aAAaC,GACrBz/B,KAAKu8B,GAAGiD,aAAaE,GACdC,GC9nBR,MAAMM,EAUTh1B,YAAYsE,EAAG/E,EAAGgF,GAIdxP,KAAKskB,UAAY,WACjBtkB,KAAKukB,IAAMtC,EAAajG,OACxBhc,KAAKuP,EAAIA,EACTvP,KAAKwK,EAAIA,EACTxK,KAAKwP,EAAIA,EACTxP,KAAKkgC,mBAcThe,iBAAiBmN,GACb,GAAIA,EAAI5wB,OAAS,EACb,KAAM,oEAAoE4wB,EAAI5wB,UAClF,OAAO,IAAIwhC,EAAS5Q,EAAI,GAAIA,EAAI,GAAIA,EAAI,IAe5C8Q,UACI,OAAOh5B,KAAKwM,IAAIssB,EAASzZ,MAAMkB,WAAW1nB,KAAKuP,EAAE7Q,EAAGsB,KAAKuP,EAAEhR,EAAGyB,KAAKwK,EAAE9L,EAAGsB,KAAKwK,EAAEjM,EAAGyB,KAAKwP,EAAE9Q,EAAGsB,KAAKwP,EAAEjR,IAavG6hC,cACI,OAAO,IAAIzrB,GAAQ3U,KAAKuP,EAAE7Q,EAAIsB,KAAKwK,EAAE9L,EAAIsB,KAAKwP,EAAE9Q,GAAK,GAAIsB,KAAKuP,EAAEhR,EAAIyB,KAAKwK,EAAEjM,EAAIyB,KAAKwP,EAAEjR,GAAK,GAY/F8hC,gBAAgBva,GACZ,IAAIwa,EAAWtgC,KAAKogC,cAIpB,OAHApgC,KAAKuP,EAAEsW,MAAMC,EAAQwa,GACrBtgC,KAAKwK,EAAEqb,MAAMC,EAAQwa,GACrBtgC,KAAKwP,EAAEqW,MAAMC,EAAQwa,GACdtgC,KAkBXugC,kBAGI,OADAvgC,KAAKkgC,mBACE,IAAI9M,EAAOpzB,KAAK+lB,OAAOtoB,QAASuC,KAAK4W,QAgBhD4pB,WAAWC,GACP,IAAIlxB,EAAIvP,KAAKuP,EAAE8V,OAAOob,EAAIlxB,IAAMvP,KAAKuP,EAAE8V,OAAOob,EAAIj2B,IAAMxK,KAAKuP,EAAE8V,OAAOob,EAAIjxB,GACtEhF,EAAIxK,KAAKwK,EAAE6a,OAAOob,EAAIlxB,IAAMvP,KAAKwK,EAAE6a,OAAOob,EAAIj2B,IAAMxK,KAAKwK,EAAE6a,OAAOob,EAAIjxB,GACtEA,EAAIxP,KAAKwP,EAAE6V,OAAOob,EAAIlxB,IAAMvP,KAAKwP,EAAE6V,OAAOob,EAAIj2B,IAAMxK,KAAKwP,EAAE6V,OAAOob,EAAIjxB,GAC1E,OAAQD,GAAK/E,GAAO+E,GAAKC,GAAOhF,GAAKgF,EAczCkxB,eAAeC,EAAOC,GAClB,OAAI5gC,KAAKuP,EAAE8V,OAAOsb,IAAU3gC,KAAKwK,EAAE6a,OAAOub,IAAU5gC,KAAKuP,EAAE8V,OAAOub,IAAU5gC,KAAKwK,EAAE6a,OAAOsb,GAC/E3gC,KAAKwP,EACZxP,KAAKwK,EAAE6a,OAAOsb,IAAU3gC,KAAKwP,EAAE6V,OAAOub,IAAU5gC,KAAKwK,EAAE6a,OAAOub,IAAU5gC,KAAKwP,EAAE6V,OAAOsb,GAC/E3gC,KAAKuP,EAETvP,KAAKwK,EAehB01B,mBAGI,MAAMW,EAAI7gC,KAAKwK,EAAE9L,EAAIsB,KAAKuP,EAAE7Q,EACtBoiC,EAAI9gC,KAAKwK,EAAEjM,EAAIyB,KAAKuP,EAAEhR,EACtBwiC,EAAI/gC,KAAKwP,EAAE9Q,EAAIsB,KAAKuP,EAAE7Q,EACtBsiC,EAAIhhC,KAAKwP,EAAEjR,EAAIyB,KAAKuP,EAAEhR,EACtB0iC,EAAIJ,GAAK7gC,KAAKuP,EAAE7Q,EAAIsB,KAAKwK,EAAE9L,GAAKoiC,GAAK9gC,KAAKuP,EAAEhR,EAAIyB,KAAKwK,EAAEjM,GACvD2iC,EAAIH,GAAK/gC,KAAKuP,EAAE7Q,EAAIsB,KAAKwP,EAAE9Q,GAAKsiC,GAAKhhC,KAAKuP,EAAEhR,EAAIyB,KAAKwP,EAAEjR,GACvD4iC,EAAI,GAAON,GAAK7gC,KAAKwP,EAAEjR,EAAIyB,KAAKwK,EAAEjM,GAAKuiC,GAAK9gC,KAAKwP,EAAE9Q,EAAIsB,KAAKwK,EAAE9L,IACpE,IAAI0iC,EAAIC,EACR,GAAIl6B,KAAKwM,IAAIwtB,GAAKlB,EAAS1a,QAAS,CAEhC,MAAM+b,EAASthC,KAAKshC,SACpBthC,KAAK+lB,OAAS,IAAIpR,GAAQ2sB,EAAOtxB,IAAItR,EAAI4iC,EAAO9zB,IAAI9O,GAAK,GAAI4iC,EAAOtxB,IAAIzR,EAAI+iC,EAAO9zB,IAAIjP,GAAK,GAC5F6iC,EAAKphC,KAAK+lB,OAAOrnB,EAAI4iC,EAAOtxB,IAAItR,EAChC2iC,EAAKrhC,KAAK+lB,OAAOxnB,EAAI+iC,EAAOtxB,IAAIzR,MAE/B,CACD,MAAMgjC,GAAMP,EAAIC,EAAIH,EAAII,GAAKC,EACvBK,GAAMX,EAAIK,EAAIH,EAAIE,GAAKE,EAC7BnhC,KAAK+lB,OAAS,IAAIpR,EAAO4sB,EAAIC,GAC7BJ,EAAKphC,KAAK+lB,OAAOrnB,EAAIsB,KAAKuP,EAAE7Q,EAC5B2iC,EAAKrhC,KAAK+lB,OAAOxnB,EAAIyB,KAAKuP,EAAEhR,EAEhCyB,KAAKyhC,eAAiBL,EAAKA,EAAKC,EAAKA,EACrCrhC,KAAK4W,OAASzP,KAAKgT,KAAKna,KAAKyhC,gBAajCC,eAAe1gB,GACX,MAAMogB,EAAKphC,KAAK+lB,OAAOrnB,EAAIsiB,EAAEtiB,EACvB2iC,EAAKrhC,KAAK+lB,OAAOxnB,EAAIyiB,EAAEziB,EAE7B,OADqB6iC,EAAKA,EAAKC,EAAKA,GACZrhC,KAAKyhC,eAWjCH,SACI,OAAO,IAAI7sB,EAAO,IAAIE,EAAOsrB,EAASzZ,MAAMmb,KAAK3hC,KAAKuP,EAAE7Q,EAAGsB,KAAKwK,EAAE9L,EAAGsB,KAAKwP,EAAE9Q,GAAIuhC,EAASzZ,MAAMmb,KAAK3hC,KAAKuP,EAAEhR,EAAGyB,KAAKwK,EAAEjM,EAAGyB,KAAKwP,EAAEjR,IAAK,IAAIoW,EAAOsrB,EAASzZ,MAAMob,KAAK5hC,KAAKuP,EAAE7Q,EAAGsB,KAAKwK,EAAE9L,EAAGsB,KAAKwP,EAAE9Q,GAAIuhC,EAASzZ,MAAMob,KAAK5hC,KAAKuP,EAAEhR,EAAGyB,KAAKwK,EAAEjM,EAAGyB,KAAKwP,EAAEjR,KAarP4qB,YACI,OAAO,IAAIta,EAAQ,CAAC7O,KAAKuP,EAAGvP,KAAKwK,EAAGxK,KAAKwP,IAW7CqyB,cAEI,OAAQ7hC,KAAKwK,EAAEjM,EAAIyB,KAAKuP,EAAEhR,IAAMyB,KAAKwP,EAAE9Q,EAAIsB,KAAKwK,EAAE9L,IAAMsB,KAAKwP,EAAEjR,EAAIyB,KAAKwK,EAAEjM,IAAMyB,KAAKwK,EAAE9L,EAAIsB,KAAKuP,EAAE7Q,GActGojC,cAAcl6B,GACV,OAAOq4B,EAASzZ,MAAMub,kBAAkBn6B,EAAElJ,EAAGkJ,EAAErJ,EAAGyB,KAAKuP,EAAE7Q,EAAGsB,KAAKuP,EAAEhR,EAAGyB,KAAKwK,EAAE9L,EAAGsB,KAAKwK,EAAEjM,EAAGyB,KAAKwP,EAAE9Q,EAAGsB,KAAKwP,EAAEjR,GAQ/GyjC,wBACI,MAAMC,EAAQ,IAAIj6B,EAAKhI,KAAKuP,EAAGvP,KAAKwK,GAC9B03B,EAAQ,IAAIl6B,EAAKhI,KAAKwK,EAAGxK,KAAKwP,GAC9B2yB,EAAQ,IAAIn6B,EAAKhI,KAAKwP,EAAGxP,KAAKuP,GAC9B6yB,EAAYC,EAAUC,WAAWtiC,KAAKwK,EAAGxK,KAAKuP,EAAGvP,KAAKwP,EAAG,GAAG,GAC5D+yB,EAAYF,EAAUC,WAAWtiC,KAAKwP,EAAGxP,KAAKwK,EAAGxK,KAAKuP,EAAG,GAAG,GAC5D4b,EAAeiX,EAAUjX,aAAaoX,GAEtCC,EAAgBP,EAAMtX,gBAAgBQ,GACtCsX,EAAgBP,EAAMvX,gBAAgBQ,GACtCuX,EAAgBP,EAAMxX,gBAAgBQ,GAC5C,OAAO,IAAI8U,EAASuC,EAAeC,EAAeC,GAWtDC,cACI,OAAO3iC,KAAKgiC,wBAAwBzB,kBAWxCqC,cAGI,OAFK5iC,KAAK+lB,QAAW/lB,KAAK4W,QACtB5W,KAAKkgC,mBACFlgC,KAAK+lB,OAAOtoB,QAWvB4oB,WACI,MAAO,SAAWrmB,KAAKuP,EAAE8W,WAAa,SAAWrmB,KAAKwK,EAAE6b,WAAa,SAAWrmB,KAAKwP,EAAE6W,WAAa,IAaxGC,YAAYvpB,GACRA,EAAUA,GAAW,GACrB,IAAI6iB,EAAS,GACbA,EAAO1a,KAAK,SACRnI,EAAQunB,WACR1E,EAAO1a,KAAK,WAAanI,EAAQunB,UAAY,KACjD1E,EAAO1a,KAAK,QACZ,IAAI9H,EAAW,CAAC4C,KAAKuP,EAAGvP,KAAKwK,EAAGxK,KAAKwP,GACrC,GAAIpS,EAASqB,OAAS,EAAG,CACrBmhB,EAAO1a,KAAK,MACZ0a,EAAO1a,KAAK9H,EAAS,GAAGsB,GACxBkhB,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAK9H,EAAS,GAAGmB,GACxB,IAAK,IAAI4J,EAAI,EAAGA,EAAI/K,EAASqB,OAAQ0J,IACjCyX,EAAO1a,KAAK,OACZ0a,EAAO1a,KAAK9H,EAAS+K,GAAGzJ,GACxBkhB,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAK9H,EAAS+K,GAAG5J,GAG5BqhB,EAAO1a,KAAK,MAIhB,OADA0a,EAAO1a,KAAK,QACL0a,EAAOzV,KAAK,KAU3B81B,EAAS1a,QAAU,KACnB0a,EAASzZ,MAAQ,CAEbob,KAAI,CAACryB,EAAG/E,EAAGgF,IACCD,GAAK/E,GAAK+E,GAAKC,EAAKD,EAAK/E,GAAK+E,GAAK/E,GAAKgF,EAAKhF,EAAIgF,EAE7DmyB,KAAI,CAACpyB,EAAG/E,EAAGgF,IACCD,GAAK/E,GAAK+E,GAAKC,EAAKD,EAAK/E,GAAK+E,GAAK/E,GAAKgF,EAAKhF,EAAIgF,EAE7DkY,WAAU,CAACmb,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,IACzB,KAAQF,EAAMC,EAAMH,IAAQC,EAAME,GAAOJ,GAAOG,EAAME,GAAOH,EAAMG,GAO9EnB,kBAAkBoB,EAAIC,EAAIP,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GAK/C,IAAIzb,EAAOwY,EAASzZ,MAAMkB,WAAWmb,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GAC1DryB,EAAI,GAAK,EAAI4W,IAASqb,EAAMG,EAAMJ,EAAMK,GAAOA,EAAMJ,GAAOK,GAAMN,EAAMI,GAAOG,GAC/ExvB,EAAI,GAAK,EAAI6T,IAASob,EAAMG,EAAMF,EAAMC,GAAOD,EAAME,GAAOG,GAAMJ,EAAMF,GAAOO,GACnF,OAAOvyB,EAAI,GAAK+C,EAAI,GAAM,EAAI/C,EAAI+C,EAAK,ICvaxC,MAAMyuB,EAAY,CAYrBC,WAAWe,EAAIC,EAAIC,EAAI3xB,GACnB,MAAM4xB,EAAW,IAAIvD,EAASoD,EAAIC,EAAIC,GAChCllB,EAAS,IAAIrW,EAAKq7B,EAAIC,GACtBG,EAAS,IAAIz7B,EAAKq7B,EAAIE,GAE5B,IAAIG,EAAcrlB,EAAOlO,MAAMszB,GAG/B,MAAME,EAAYH,EAAS3B,cAAgB,EAEvC6B,EAAc,IACdA,EAAc,EAAIv8B,KAAKC,GAAKs8B,GAC3BC,IACDD,GAA8C,GAA/B,EAAIv8B,KAAKC,GAAKs8B,IAEjC,MACME,EADaz8B,KAAKqG,IAAI6Q,EAAO5f,SAAUglC,EAAOhlC,UACnB4f,EAAO5f,SAExC,IADA,IAAIogB,EAAS,GACJ1W,EAAI,EAAGA,EAAIyJ,EAAGzJ,IAEnB0W,EAAO3Z,KAAK,IAAI8C,EAAKq7B,EAAIC,EAAG7lC,QAAQuoB,OAAc0d,EAAc9xB,GAAnBzJ,EAAwBk7B,IAAKxd,MAAM+d,IAEpF,OAAO/kB,GAUXglB,QAAO,CAACnlC,EAAG8O,KAGCA,EAAO9O,EAAI8O,GAAQA,EAY/Bs2B,WAAU,CAACplC,EAAGsR,EAAKxC,IACRwC,EAAMqyB,EAAUwB,QAAQnlC,EAAIsR,EAAKxC,EAAMwC,ICpD/C,MAAM+zB,EAST94B,YAAY8a,EAAQ9nB,GAChB+B,KAAK+lB,OAASA,EACd/lB,KAAK/B,KAAOA,GAOpB8lC,EAAKvd,MAAQ,CAeTwd,QAAS,CAAClqB,EAAMmqB,IAAiB98B,KAAK9I,IAAIyb,GAAQ3S,KAAK9I,IAAI4lC,GAkB3DC,eAAgB,CAACC,EAActe,KAC3B,IAAIue,EAAK,EAQT,OAPIve,GAAS,GACTue,EAAKj9B,KAAKwM,IAAIxM,KAAKgH,MAAM,EAAI41B,EAAKvd,MAAMwd,QAAQG,EAActe,KAC9Due,EAAK,EAAIj9B,KAAKse,IAAI0e,EAAcC,IAGhCA,EAAKj9B,KAAKwM,IAAIxM,KAAKgH,MAAM41B,EAAKvd,MAAMwd,QAAQ,EAAIG,EAAc,GAAKte,EAAQ,MAExEue,ICpDR,MAAMC,EAUTp5B,YAAYlO,GACRiD,KAAKskC,cAAgB,GACrBtkC,KAAKukC,eAAiB,GACtBvkC,KAAKwkC,YAAc,GACnBxkC,KAAKykC,UAAY,GACjB1nC,EAAUA,GAAW,GACrBiD,KAAK0kC,QAAU3nC,EAAQ2nC,QAAU3nC,EAAQ2nC,QAAUvkB,WACnDngB,KAAKskC,cAAgB,GACrBtkC,KAAKukC,eAAiB,GACtBvkC,KAAKwkC,YAAc,GACnBxkC,KAAKykC,UAAY,GAIjBzkC,KAAK2kC,aAAe5nC,EAAQ6nC,WAAY,EAExC5kC,KAAK6kC,mBASTC,UAAUxM,EAAOtU,GACb,IAAI+gB,GAAc,EAClB,IAAK,IAAI58B,KAAK6b,EAAW,CACrB,IAAIghB,EAAMhhB,EAAU7b,GAChB68B,EAAIC,SAAW3M,EAAM2M,UAEzBD,EAAIhiB,SAASsV,GACbyM,GAAc,GAElB,OAAOA,EAeXG,cAAcvhB,EAAGwhB,IACTA,EAAQL,UAAUnhB,EAAGwhB,EAAQb,gBAAkBa,EAAQR,gBAEvDQ,EAAQV,UAAU9gB,EAAEshB,SAAW,QAgBvCG,eAAezhB,EAAGwhB,GACdA,EAAQL,UAAUnhB,EAAGwhB,EAAQZ,gBAejCc,YAAY1hB,EAAGwhB,IACPA,EAAQL,UAAUnhB,EAAGwhB,EAAQX,cAAgBW,EAAQR,sBAE9CQ,EAAQV,UAAU9gB,EAAEshB,SAOnC/iB,gBAAgBG,GACZ,GAAkB,iBAAPA,EACP,OAAOA,EACX,GAAkB,iBAAPA,EACP,KAAM,iEAAmEA,EAC7E,GAAIgiB,EAAWiB,UAAUjjB,GACrB,OAAOgiB,EAAWiB,UAAUjjB,GAChC,KAAM,0CAA4CA,EAStDwiB,mBACI,IAAIviC,EAAQtC,KACZA,KAAK0kC,QAAQniC,iBAAiB,UAAWvC,KAAKulC,iBAAoB5hB,IAAQrhB,EAAM4iC,cAAcvhB,EAAGrhB,KACjGtC,KAAK0kC,QAAQniC,iBAAiB,WAAYvC,KAAKwlC,kBAAqB7hB,IAAQrhB,EAAM8iC,eAAezhB,EAAGrhB,KACpGtC,KAAK0kC,QAAQniC,iBAAiB,QAASvC,KAAKylC,eAAkB9hB,IAAQrhB,EAAM+iC,YAAY1hB,EAAGrhB,KAM/FojC,mBACI1lC,KAAK0kC,QAAQiB,oBAAoB,UAAW3lC,KAAKulC,kBACjDvlC,KAAK0kC,QAAQiB,oBAAoB,WAAY3lC,KAAKwlC,mBAClDxlC,KAAK0kC,QAAQiB,oBAAoB,QAAS3lC,KAAKylC,gBAenDG,KAAKvjB,EAAKW,GAEN,OADAhjB,KAAKskC,cAAcp/B,KAAK,CAAEmd,IAAKA,EAAK4iB,QAASZ,EAAWwB,SAASxjB,GAAMW,SAAUA,IAC1EhjB,KAeX8lC,MAAMzjB,EAAKW,GAEP,OADAhjB,KAAKukC,eAAer/B,KAAK,CAAEmd,IAAKA,EAAK4iB,QAASZ,EAAWwB,SAASxjB,GAAMW,SAAUA,IAC3EhjB,KAeX+lC,GAAG1jB,EAAKW,GAEJ,OADAhjB,KAAKwkC,YAAYt/B,KAAK,CAAEmd,IAAKA,EAAK4iB,QAASZ,EAAWwB,SAASxjB,GAAMW,SAAUA,IACxEhjB,KAQXgmC,OAAO3jB,GACH,MAAkB,iBAAPA,IACAriB,KAAKykC,UAAUpiB,KAEfriB,KAAKykC,UAAUJ,EAAWwB,SAASxjB,KAOtDgiB,EAAWiB,UAAY,CACnB,MAAS,EACT,UAAa,EAEb,IAAO,EACP,MAAS,GACT,MAAS,GACT,MAAS,GACT,KAAQ,GACR,IAAO,GACP,MAAS,GAET,SAAY,GACZ,OAAU,GACV,MAAS,GACT,OAAU,GACV,WAAc,GACd,iBAAkB,GAClB,SAAY,GACZ,OAAU,GACV,SAAY,GACZ,IAAO,GACP,KAAQ,GACR,UAAa,GACb,QAAW,GACX,WAAc,GACd,UAAa,GACb,OAAU,GACV,MAAS,GACT,QAAW,GACX,YAAe,GACf,OAAU,GACV,OAAU,GACV,KAAQ,GACR,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,IAAK,GACL,sBAAuB,GACvB,OAAU,GACV,IAAK,GACL,mBAAoB,GACpB,EAAK,GACL,cAAe,GACf,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,EAAK,GACL,QAAW,GACX,YAAe,GACf,iBAAoB,GACpB,eAAkB,GAClB,YAAe,GACf,aAAgB,GAChB,MAAS,GACT,QAAW,GACX,QAAW,GACX,QAAW,GACX,QAAW,GACX,QAAW,IACX,QAAW,IACX,QAAW,IACX,QAAW,IACX,QAAW,IACX,QAAW,IACX,SAAY,IACZ,IAAO,IACP,aAAgB,IAChB,SAAY,IACZ,aAAgB,IAChB,OAAU,IACV,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,IACN,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,QAAW,IACX,WAAc,IACd,IAAK,IACL,IAAK,IAEL,IAAK,IACL,EAAK,IACL,EAAK,IACL,aAAgB,IAChB,YAAe,IACf,QAAW,IACX,aAAgB,IAChB,IAAK,IACL,MAAO,IAEP,MAAS,IAGT,oBAAuB,IACvB,oBAAuB,IACvB,KAAQ,IACR,SAAY,IACZ,KAAQ,IACR,aAAc,IACd,MAAS,IACT,KAAQ,IACR,OAAU,IAGV,UAAa,IACb,EAAK,IACL,MAAS,IACT,MAAS,IACT,KAAQ,IACR,OAAU,IACV,aAAgB,IAChB,EAAK,IACL,eAAgB,IAEhB,EAAK,IACL,EAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IAEL,YAAe,IACf,UAAa,IACb,aAAgB,IAChB,EAAK,IACL,YAAe,IACf,EAAK,IACL,EAAK,IACL,IAAK,IAEL,MAAS,IAET,oBAAqB,IACrB,YAAe,IACf,SAAY,IACZ,aAAgB,IAChB,SAAY,IACZ,SAAY,IACZ,aAAc,IACd,aAAc,IACd,MAAS,IACT,eAAkB,IAClB,eAAkB,KC9Yf,MAAMW,UAAoBC,YAE1B,MAAMC,UAAoBC,YAQ1B,MAAMC,EA6DTp7B,YAAYy5B,EAAS4B,GACjBtmC,KAAKumC,kBAAerrB,EACpBlb,KAAKwmC,kBAAetrB,EAGpBlb,KAAKymC,aAAe,EACpBzmC,KAAKgkB,UAAY,GACjBhkB,KAAK0mC,UAAY,GACjB1mC,KAAK2mC,SAAW,GAIhB3mC,KAAKsmC,KAAOA,EACZtmC,KAAK0kC,QAAUA,EACf1kC,KAAKumC,aAAe,KACpBvmC,KAAKwmC,aAAe,KAEpBxmC,KAAKymC,aAAe,EACpBzmC,KAAKgkB,UAAY,GACjBhkB,KAAK0mC,UAAY,GACjB1mC,KAAK2mC,SAAW,GAOhB,MAAMrkC,EAAQtC,KACdA,KAAK2mC,SAAoB,UAAKhjB,IACtBrhB,EAAM0hB,UAAU4iB,WAChBtkC,EAAM0hB,UAAU4iB,UAAUtkC,EAAMukC,SAASljB,EAAG,cAC5CrhB,EAAMkkC,cAAgBlkC,EAAM0hB,UAAUpB,MACtCtgB,EAAM0hB,UAAUpB,KAAKtgB,EAAMukC,SAASljB,EAAG,SACvCrhB,EAAMikC,eACNjkC,EAAMkkC,aAAelkC,EAAMwkC,OAAOnjB,KAE1C3jB,KAAK2mC,SAAkB,QAAKhjB,IACpBrhB,EAAM0hB,UAAU+iB,SAChBzkC,EAAM0hB,UAAU+iB,QAAQzkC,EAAMukC,SAASljB,EAAG,YAC9CrhB,EAAMkkC,kBAAetrB,EACrB5Y,EAAMikC,kBAAerrB,EACrB5Y,EAAMmkC,aAAe,GAEzBzmC,KAAK2mC,SAAoB,UAAKhjB,IAC1BrhB,EAAMkkC,aAAelkC,EAAMwkC,OAAOnjB,GAClCrhB,EAAMikC,aAAejkC,EAAMwkC,OAAOnjB,GAClCrhB,EAAMmkC,YAAc9iB,EAAEqjB,OAClB1kC,EAAM0hB,UAAUijB,WAChB3kC,EAAM0hB,UAAUijB,UAAU3kC,EAAMukC,SAASljB,EAAG,eAEpD3jB,KAAK2mC,SAAgB,MAAKhjB,IAClBrhB,EAAM0hB,UAAUrB,OAChBrgB,EAAM0hB,UAAUrB,MAAMrgB,EAAMukC,SAASljB,EAAG,WAEhD3jB,KAAK2mC,SAAgB,MAAKhjB,IAClBrhB,EAAM0hB,UAAUkjB,OAChB5kC,EAAM0hB,UAAUkjB,MAAM5kC,EAAMukC,SAASljB,EAAG,WAEhD3jB,KAAK0kC,QAAQniC,iBAAiB,YAAavC,KAAK2mC,SAAoB,WACpE3mC,KAAK0kC,QAAQniC,iBAAiB,UAAWvC,KAAK2mC,SAAkB,SAChE3mC,KAAK0kC,QAAQniC,iBAAiB,YAAavC,KAAK2mC,SAAoB,WACpE3mC,KAAK0kC,QAAQniC,iBAAiB,QAASvC,KAAK2mC,SAAgB,OAC5D3mC,KAAK0kC,QAAQniC,iBAAiB,QAASvC,KAAK2mC,SAAgB,OAYhEG,OAAOnjB,GACH,MAAO,CAAEjlB,EAAGilB,EAAEwjB,QACV5oC,EAAGolB,EAAEyjB,SAebP,SAASljB,EAAG0jB,GACR,MAAMC,EAAMtnC,KAAK8mC,OAAOnjB,GAClB4jB,EAAS5jB,EAef,OAdA4jB,EAAOrjB,OAAS,CACZwgB,QAAS1kC,KAAK0kC,QACd4B,KAAMe,EACNG,cAAc,EACdC,IAAKH,EACLN,OAAQhnC,KAAKymC,YACbiB,WAAgC,GAApB1nC,KAAKymC,YACjBkB,aAAkC,GAApB3nC,KAAKymC,YACnBmB,YAAiC,GAApB5nC,KAAKymC,YAClBF,aAAcvmC,KAAKumC,aACnBsB,YAAa7nC,KAAKwmC,aAClBsB,WAAkC,MAArB9nC,KAAKumC,eAAyBvmC,KAAKumC,aAAa7nC,GAAK4oC,EAAI5oC,GAAKsB,KAAKumC,aAAahoC,GAAK+oC,EAAI/oC,GACtGwpC,WAAkC,MAArB/nC,KAAKumC,aAAuB,CAAE7nC,EAAG4oC,EAAI5oC,EAAIsB,KAAKwmC,aAAa9nC,EAAGH,EAAG+oC,EAAI/oC,EAAIyB,KAAKwmC,aAAajoC,GAAM,CAAEG,EAAG,EAAGH,EAAG,IAEtHgpC,EAaXS,UAAUX,GACFrnC,KAAK0mC,UAAUW,KAGnBrnC,KAAK0mC,UAAUW,IAAa,GAYhCY,YAAYZ,GACHrnC,KAAK0mC,UAAUW,WAGbrnC,KAAK0mC,UAAUW,GAc1BzkB,KAAKslB,GAOD,OANIloC,KAAKgkB,UAAUpB,MACf5iB,KAAKmoC,sBAAsB,QAC/BnoC,KAAKgkB,UAAUpB,KAAOslB,EACtBloC,KAAKgoC,UAAU,aACfhoC,KAAKgoC,UAAU,aACfhoC,KAAKgoC,UAAU,WACRhoC,KAeXknB,KAAKghB,GAKD,OAJIloC,KAAKgkB,UAAU4iB,WACf5mC,KAAKmoC,sBAAsB,aAC/BnoC,KAAKgoC,UAAU,aACfhoC,KAAKgkB,UAAU4iB,UAAYsB,EACpBloC,KAeX+lC,GAAGmC,GAKC,OAJIloC,KAAKgkB,UAAU+iB,SACf/mC,KAAKmoC,sBAAsB,WAC/BnoC,KAAKgoC,UAAU,WACfhoC,KAAKgkB,UAAU+iB,QAAUmB,EAClBloC,KAeX4lC,KAAKsC,GAKD,OAJIloC,KAAKgkB,UAAUijB,WACfjnC,KAAKmoC,sBAAsB,aAC/BnoC,KAAKgoC,UAAU,aACfhoC,KAAKgkB,UAAUijB,UAAYiB,EACpBloC,KAeX2iB,MAAMulB,GAKF,OAJIloC,KAAKgkB,UAAUrB,OACf3iB,KAAKmoC,sBAAsB,SAC/BnoC,KAAKgoC,UAAU,SACfhoC,KAAKgkB,UAAUrB,MAAQulB,EAChBloC,KAeXknC,MAAMgB,GAKF,OAJIloC,KAAKgkB,UAAUkjB,OACflnC,KAAKmoC,sBAAsB,SAC/BnoC,KAAKgoC,UAAU,SACfhoC,KAAKgkB,UAAUkjB,MAAQgB,EAChBloC,KAaXmoC,sBAAsB7B,GAClB,KAAM,oCAAoCA,mEAc9C8B,UACIpoC,KAAKioC,YAAY,aACjBjoC,KAAKioC,YAAY,aACjBjoC,KAAKioC,YAAY,UACjBjoC,KAAKioC,YAAY,SACjBjoC,KAAKioC,YAAY,SACjBjoC,KAAK0kC,QAAQiB,oBAAoB,YAAa3lC,KAAK2mC,SAAoB,WACvE3mC,KAAK0kC,QAAQiB,oBAAoB,UAAW3lC,KAAK2mC,SAAoB,WACrE3mC,KAAK0kC,QAAQiB,oBAAoB,YAAa3lC,KAAK2mC,SAAoB,WACvE3mC,KAAK0kC,QAAQiB,oBAAoB,QAAS3lC,KAAK2mC,SAAgB,OAC/D3mC,KAAK0kC,QAAQiB,oBAAoB,QAAS3lC,KAAK2mC,SAAgB,QCrXhE,MAAM0B,EAUTp9B,YAAY2P,EAAO0tB,EAAWC,GAI1BvoC,KAAKskB,UAAY,UACjBtkB,KAAKukB,IAAMtC,EAAajG,OACxBhc,KAAK4a,MAAQA,EACb5a,KAAKsoC,UAAYA,EACjBtoC,KAAKuoC,WAAaA,EAatBjiB,YAAYvpB,GAER,OADAqB,QAAQgM,KAAK,oEACN,I,IC0BX9E,E,SChDG,MAAMkjC,EAUTv9B,YAAY8a,EAAQ7V,EAAMhJ,GAItBlH,KAAKskB,UAAY,WACjBtkB,KAAKukB,IAAMtC,EAAajG,OACxBhc,KAAK+lB,OAASA,EACd/lB,KAAKkQ,KAAOA,EACZlQ,KAAKkH,SAAWA,GAAY,EAOhCzJ,QACI,OAAO,IAAI+qC,EAASxoC,KAAK+lB,OAAOtoB,QAASuC,KAAKkQ,KAAKzS,QAASuC,KAAKkH,UAUrEuhC,UACI,OAAOthC,KAAKwM,IAAI3T,KAAK0oC,iBAUzBA,gBAII,OAAO,IAAI/zB,EAAO3U,KAAKkQ,MAAM8V,QAAQhmB,KAAKkH,SAAUlH,KAAK+lB,QAAQrnB,EAAIsB,KAAK+lB,OAAOrnB,EAUrFiqC,UACI,OAAOxhC,KAAKwM,IAAI3T,KAAK4oC,iBAUzBA,gBAII,OAAO,IAAIj0B,EAAO3U,KAAKkQ,MAAM8V,QAAQhmB,KAAKkH,SAAUlH,KAAK+lB,QAAQxnB,EAAIyB,KAAK+lB,OAAOxnB,EAWrFsnB,MAAMC,GAEF,OADA9lB,KAAKkQ,KAAK2V,MAAMC,EAAQ9lB,KAAK+lB,QACtB/lB,KAWXgmB,OAAO7V,GAGH,OAFAnQ,KAAKkQ,KAAK8V,OAAO7V,EAAOnQ,KAAK+lB,QAC7B/lB,KAAKkH,UAAYiJ,EACVnQ,KAWXiqB,OAAO9Z,GAGH,MAAMZ,EAAIvP,KAAKyoC,UACTj+B,EAAIxK,KAAK2oC,UACf,OAAO,IAAIh0B,EAAO6zB,EAAShiB,MAAMiO,iBAAiBz0B,KAAK+lB,OAAOrnB,EAAGsB,KAAK+lB,OAAOxnB,EAAGgR,EAAG/E,EAAG2F,IAAQ6V,OAAOhmB,KAAKkH,SAAUlH,KAAK+lB,QAe7H8iB,SAAS14B,EAAO1R,GACZ,MAAMgsB,EAAQzqB,KAAKiqB,OAAO9Z,GACpB24B,EAAO9oC,KAAK+oC,UAEZC,EAAS,IAAIhhC,EAAKyiB,EAAOqe,EAAK,IAAI34B,QAElC84B,EAAcD,GADL,IAAIhhC,EAAKyiB,EAAOqe,EAAK,IAAI34B,QACD64B,GAAU,EAC3CE,EAAYze,EAAMhtB,QAAQynB,KAAK,IAAIznB,QAAQuoB,OAAOijB,EAAaxe,GAC/D0e,EAAY1e,EACbhtB,QACAynB,KAAK,IACLznB,QACAuoB,OAAO7e,KAAKC,GAAK6hC,EAAaxe,GACnC,OAAIzqB,KAAK+lB,OAAOxU,SAAS23B,GAAalpC,KAAK+lB,OAAOxU,SAAS43B,GAChD,IAAIre,EAAOL,EAAO0e,GAGlB,IAAIre,EAAOL,EAAOye,GAkBjCzV,UAAUtjB,EAAO1R,GACb,MAAM2qC,EAASppC,KAAK6oC,SAAS14B,EAAO1R,GAGpC,OADA2qC,EAAO5+B,EAAEwb,OAAO7e,KAAKC,GAAK,EAAGgiC,EAAO75B,GAC7B65B,EAUXC,YAKI,MAAM95B,EAAIvP,KAAKyoC,UACTj+B,EAAIxK,KAAK2oC,UACf,OAAOxhC,KAAKC,IAAM,GAAKmI,EAAI/E,GAAKrD,KAAKgT,MAAM,EAAI5K,EAAI/E,IAAM+E,EAAI,EAAI/E,KAUrEu+B,UAEI,MAAMO,EAAKtpC,KAAKyoC,UACVc,EAAKvpC,KAAK2oC,UACVa,EAAQF,EAAKA,EAAKC,EAAKA,EAEvB/sB,EAAIrV,KAAKgT,KAAKhT,KAAKwM,IAAI61B,IAE7B,OAAIA,EAAQ,EACD,CACHxpC,KAAK+lB,OAAOtoB,QAAQ0nB,KAAK3I,GAAGwJ,OAAOhmB,KAAKkH,SAAUlH,KAAK+lB,QACvD/lB,KAAK+lB,OAAOtoB,QAAQ0nB,MAAM3I,GAAGwJ,OAAOhmB,KAAKkH,SAAUlH,KAAK+lB,SAIrD,CACH/lB,KAAK+lB,OAAOtoB,QAAQynB,KAAK1I,GAAGwJ,OAAOhmB,KAAKkH,SAAUlH,KAAK+lB,QACvD/lB,KAAK+lB,OAAOtoB,QAAQynB,MAAM1I,GAAGwJ,OAAOhmB,KAAKkH,SAAUlH,KAAK+lB,SAUpE0jB,uBAAuB5yB,GACnB,MAAM6yB,EAASlB,EAAShiB,MAAMmjB,sBAAsB3pC,KAAKyoC,UAAWzoC,KAAK2oC,UAAW9xB,GAC9EgI,EAAS,GACf,IAAK,IAAI1W,EAAI,EAAGA,EAAIuhC,EAAOjrC,OAAQ0J,IAC/B0W,EAAO3Z,KAAKlF,KAAKiqB,OAAOyf,EAAOvhC,KAEnC,OAAO0W,EAUX+qB,cAAcC,EAAqBxhB,GA4B/B,MAAMyhB,EAAuD,EAAxC3iC,KAAKqG,IAAI,EAAGq8B,GAAuB,GACxDxhB,OAAiC,IAAdA,EAA4B,QAAWA,EAC1D,MAAMogB,EAAUzoC,KAAKyoC,UACfE,EAAU3oC,KAAK2oC,UACflX,EAAS,GACTiY,EAASlB,EAAShiB,MAAMmjB,sBAAsBlB,EAASE,EAASmB,GACtE,IAAIC,EAAWL,EAAO,GAClBne,EAAavrB,KAAKiqB,OAAO8f,GAC7B,IAAK,IAAI5hC,EAAI,EAAGA,EAAIuhC,EAAOjrC,OAAQ0J,IAAK,CACpC,IAAI6hC,EAAYN,GAAQvhC,EAAI,GAAKuhC,EAAOjrC,QACpClB,EAAWyC,KAAKiqB,OAAO+f,GAC3B,GAAI7iC,KAAKwM,IAAIg1B,GAAW,MAAUxhC,KAAKwM,IAAI80B,GAAW,KAAQ,CAE1D,IAAIxuB,EAAOsR,EAAW3F,WAAWroB,GAC7BsxB,EAAQ,IAAIvD,EAAiBC,EAAW9tB,QAASF,EAASE,QAAS8tB,EAAW9tB,QAAQsnB,MAAe,KAAT9K,EAAKvb,EAAoB,KAATub,EAAK1b,GAAYhB,EAASE,QAAQsnB,MAAgB,MAAT9K,EAAKvb,EAAqB,MAATub,EAAK1b,IAC/KkzB,EAAOvsB,KAAK2pB,OAEX,CACD,IAAIob,EAAejqC,KAAKyzB,UAAUsW,GAC9BG,EAAalqC,KAAKyzB,UAAUuW,GAE5B7e,EAAe8e,EAAa9e,aAAa+e,GAGzCC,EAAY5e,EAAW3F,WAAWuF,GAClCif,EAAU7sC,EAASqoB,WAAWuF,GAC9B0D,EAAQ,IAAIvD,EAAiBC,EAAW9tB,QAASF,EAASE,QAAS8tB,EAAW9tB,QAAQ2D,IAAI+oC,EAAUtkB,MAAMwC,IAAa9qB,EAASE,QAAQ2D,IAAIgpC,EAAQvkB,MAAMwC,KAC9JoJ,EAAOvsB,KAAK2pB,GAEhBtD,EAAahuB,EACbwsC,EAAWC,EAEf,OAAOvY,EASXnL,YAAYvpB,GACRA,EAAUA,GAAW,GACrB,IAAI6iB,EAAS,GASb,OARAA,EAAO1a,KAAK,YACRnI,EAAQunB,WACR1E,EAAO1a,KAAK,WAAanI,EAAQunB,UAAY,KACjD1E,EAAO1a,KAAK,QAAUlF,KAAK+lB,OAAOrnB,EAAI,KACtCkhB,EAAO1a,KAAK,QAAUlF,KAAK+lB,OAAOxnB,EAAI,KACtCqhB,EAAO1a,KAAK,QAAUlF,KAAKkQ,KAAKxR,EAAI,KACpCkhB,EAAO1a,KAAK,QAAUlF,KAAKkQ,KAAK3R,EAAI,KACpCqhB,EAAO1a,KAAK,OACL0a,EAAOzV,KAAK,KAO3Bq+B,EAAShiB,MAAQ,CAYbiO,iBAAkB,CAACC,EAASC,EAAS8T,EAASE,EAASx4B,KAGnD,IAAIU,EAAI1J,KAAK8P,IAAI9P,KAAKC,GAAK,EAAI+I,GAC3BX,EAAIrI,KAAK6P,IAAI7P,KAAKC,GAAK,EAAI+I,GAC/B,MAAO,CACHzR,EAAGg2B,EAAW+T,EAAUE,EAAU93B,EAAK1J,KAAKgT,KAAKhT,KAAKse,IAAIgjB,EAAUj5B,EAAG,GAAKrI,KAAKse,IAAIkjB,EAAU93B,EAAG,IAClGtS,EAAGo2B,EAAW8T,EAAUE,EAAUn5B,EAAKrI,KAAKgT,KAAKhT,KAAKse,IAAIgjB,EAAUj5B,EAAG,GAAKrI,KAAKse,IAAIkjB,EAAU93B,EAAG,MAW1Gw5B,WAAY,CAAC5B,EAASE,EAAS5xB,KAE3B,IAAIuzB,EAASnjC,KAAKojC,IAAIxzB,GAClByzB,EAAUF,EAASA,EAEvB,OADanjC,KAAKC,GAAK,EAAI2P,EAAM5P,KAAKsjC,MAAOhC,EAAUE,GAAW2B,GAAW3B,EAAUF,EAAU+B,KASrGb,sBAAuB,CAAClB,EAASE,EAAS9xB,KACtC,MAAM6yB,EAAS,GACf,IAAK,IAAIvhC,EAAI,EAAGA,EAAI0O,EAAY1O,IAAK,CACjC,IAAI4O,EAAM5P,KAAKC,GAAK,EAAkB,EAAVD,KAAKC,GAAUyP,EAAc1O,EACzD,IAAIuiC,EAAQlC,EAAShiB,MAAM6jB,WAAW5B,EAASE,EAAS5xB,GACxD2yB,EAAOvhC,GAAKuiC,EAEhB,OAAOhB,ICpYR,MAAMiB,EAaT1/B,YAAY+tB,EAAS5E,EAAYC,GAI7Br0B,KAAKskB,UAAY,iBACjBtkB,KAAKukB,IAAMtC,EAAajG,OACxBhc,KAAKg5B,QAAUA,EACfh5B,KAAKo0B,WAAaiO,EAAUyB,WAAW1P,EAAY,EAAa,EAAVjtB,KAAKC,IAC3DpH,KAAKq0B,SAAWgO,EAAUyB,WAAWzP,EAAU,EAAa,EAAVltB,KAAKC,IAU3DwiC,cAAcC,EAAqBxhB,GAI/B,MAAMyhB,EAAuD,EAAxC3iC,KAAKqG,IAAI,EAAGq8B,GAAuB,GACxDxhB,OAAiC,IAAdA,EAA4B,QAAWA,EAC1D,MAAMogB,EAAUzoC,KAAKg5B,QAAQyP,UACvBE,EAAU3oC,KAAKg5B,QAAQ2P,UAC7B,IAAIvU,EAAauW,EAAeC,mBAAmBC,eAAe7qC,KAAKo0B,YACnEC,EAAWsW,EAAeC,mBAAmBC,eAAe7qC,KAAKq0B,UAEjEqV,EAASiB,EAAeC,mBAAmBjB,sBAAsBlB,EAASE,EAASvU,EAAYC,EAAUyV,GAE7G,MAAMrY,EAAS,GACf,IAAIsY,GAFJL,EAAS,CAACtV,GAAY/W,OAAOqsB,GAAQrsB,OAAO,CAACgX,KAEvB,GAClB9I,EAAavrB,KAAKg5B,QAAQ/O,OAAO8f,GACrC,IAAK,IAAI5hC,EAAI,EAAGA,EAAI,EAAIuhC,EAAOjrC,OAAQ0J,IAAK,CACxC,IAAI6hC,EAAYN,GAAQvhC,EAAI,GAAKuhC,EAAOjrC,QACpClB,EAAWyC,KAAKg5B,QAAQ/O,OAAO+f,GAC/BC,EAAejqC,KAAKg5B,QAAQvF,UAAUsW,GACtCG,EAAalqC,KAAKg5B,QAAQvF,UAAUuW,GAExC,GAAI7iC,KAAKwM,IAAIg1B,GAAW,MAAUxhC,KAAKwM,IAAI80B,GAAW,KAAQ,CAC1D,IAAIxuB,EAAOsR,EAAW3F,WAAWroB,GAC7BsxB,EAAQ,IAAIvD,EAAiBC,EAAW9tB,QAASF,EAASE,QAAS8tB,EAAW9tB,QAAQsnB,MAAe,KAAT9K,EAAKvb,EAAoB,KAATub,EAAK1b,GAAYhB,EAASE,QAAQsnB,MAAgB,MAAT9K,EAAKvb,EAAqB,MAATub,EAAK1b,IAC/KkzB,EAAOvsB,KAAK2pB,OAEX,CAED,IAAI1D,EAAe8e,EAAa9e,aAAa+e,GAGzCC,EAAY5e,EAAW3F,WAAWuF,GAClCif,EAAU7sC,EAASqoB,WAAWuF,GAC9B0D,EAAQ,IAAIvD,EAAiBC,EAAW9tB,QAASF,EAASE,QAAS8tB,EAAW9tB,QAAQ2D,IAAI+oC,EAAUtkB,MAAMwC,IAAa9qB,EAASE,QAAQ2D,IAAIgpC,EAAQvkB,MAAMwC,KAC9JoJ,EAAOvsB,KAAK2pB,GAEhBtD,EAAahuB,EACbwsC,EAAWC,EAEf,OAAOvY,GAGfkZ,EAAeC,mBAAqB,CAShCpW,eAAgB,CAAC91B,EAAGH,EAAGkqC,EAASE,EAASvU,EAAYC,EAAUntB,EAAUnK,UAC9C,IAAZA,IACPA,EAAU,CAAE63B,aAAa,SACL,IAAb1tB,IACPA,EAAW,GAKfktB,EAAaiO,EAAUwB,QAAQzP,EAAsB,EAAVjtB,KAAKC,IAChDitB,EAAWgO,EAAUwB,QAAQxP,EAAoB,EAAVltB,KAAKC,IAG5C,IAAI5J,EAAM,IAAImX,EAAO6zB,EAAShiB,MAAMiO,iBAAiB/1B,EAAGH,EAAGkqC,EAASE,EAAStU,IACzEz2B,EAAQ,IAAI+W,EAAO6zB,EAAShiB,MAAMiO,iBAAiB/1B,EAAGH,EAAGkqC,EAASE,EAASvU,IAC/E52B,EAAIwoB,OAAO9e,EAAU,CAAExI,EAAGA,EAAGH,EAAGA,IAChCX,EAAMooB,OAAO9e,EAAU,CAAExI,EAAGA,EAAGH,EAAGA,IAElC,IACIw2B,EADA9a,EAAOoa,EAAWD,EAGlBW,EADA9a,EAAO,EACQ9S,KAAKwM,IAAIsG,GAAQ9S,KAAKC,GAAK,EAAI,EAG/BD,KAAKwM,IAAIsG,GAAQ9S,KAAKC,GAAK,EAAI,EAElD,MACM6tB,EAAW,GACbl4B,EAAQ63B,aACRK,EAAS/vB,KAAK,IAAKtH,EAAMc,EAAGd,EAAMW,GAGtC,MAAMusC,EAAM,IAAM3jC,KAAKC,GAEvB,OADA6tB,EAAS/vB,KAAK,IAAKujC,EAASE,EAASzhC,EAAW4jC,EAAK/V,EAPnC,EAO4Dv3B,EAAIkB,EAAGlB,EAAIe,GAClF02B,GAsBX0U,sBAAuB,CAAClB,EAASE,EAASvU,EAAYC,EAAU0W,KAiB5D,IAhBA,IASIC,GARJA,GADIA,EAAgBxC,EAAShiB,MAAMmjB,sBAAsBlB,EAASE,EAASoC,IAC7C1tC,KAAK8S,GAAUw6B,EAAeC,mBAAmBC,eAAe16B,MAQ5D86B,QAPZ96B,GACdikB,EAAaC,EACNlkB,GAASikB,GAAcjkB,GAASkkB,EAEhClkB,GAASikB,GAAejkB,GAASkkB,GAAYlkB,GAAS,IAMjE+6B,EAAaP,EAAeC,mBAAmBO,wBAAwB/W,EAAYC,EAAU2W,GAG7FtB,EAAS,GACJvhC,EAAI,EAAGA,EAAI6iC,EAAcvsC,OAAQ0J,IACtCuhC,EAAOxkC,KAAK8lC,GAAeE,EAAa/iC,GAAK6iC,EAAcvsC,SAE/D,OAAOirC,GAEXyB,wBAAyB,CAAC/W,EAAYC,EAAU2W,KAE5C,GAAI5W,EAAaC,EAAU,CACvB,MAAMziB,EAAIo5B,EAAcvsC,OACxB,IAAK,IAAI0J,EAAI,EAAGA,EAAIyJ,EAAGzJ,IAAK,CACxB,MAAMijC,EAAK/I,EAAUyB,WAAWkH,EAAc7iC,GAAI,EAAa,EAAVhB,KAAKC,IAC1D,GAAIgkC,GAAMhX,GAAcgX,GAAM/W,EAC1B,OAAOlsB,GAInB,OAAO,GAEX0iC,eAAiB16B,GAAWA,EAAQ,EAAc,EAAVhJ,KAAKC,GAAS+I,EAAQA,EAkB9Dk7B,2BAA2BC,EAAIC,EAAIC,EAAIC,EAAI10B,EAAK20B,EAAIC,EAAIC,EAAIC,GAIxD,MAAMl4B,EAAMxM,KAAKwM,IACXsD,EAAM9P,KAAK8P,IACXD,EAAM7P,KAAK6P,IACXmD,EAAOhT,KAAKgT,KACZsL,EAAO7T,GACFA,EAAIA,EAETk6B,EAAS70B,EAAIF,GACbg1B,EAAS/0B,EAAID,GAEbrY,EAAKqtC,GAAUT,EAAKM,GAAO,EAAKE,GAAUP,EAAKM,GAAO,EACtDttC,GAAMutC,GAAUR,EAAKM,GAAO,EAAKG,GAAUR,EAAKM,GAAO,EACvD1I,EAAK1d,EAAI/mB,GAAI0kC,EAAK3d,EAAIlnB,GAAIytC,EAAMvmB,EAAI+lB,GAAKS,EAAMxmB,EAAIgmB,GAEnDS,EAAI/I,EAAK6I,EAAM5I,EAAK6I,EACtBC,EAAI,GACJV,EAAKrxB,EAAK+xB,GAAKv4B,EAAI63B,GACnBC,EAAKtxB,EAAK+xB,GAAKv4B,EAAI83B,KAGnBD,EAAK73B,EAAI63B,GACTC,EAAK93B,EAAI83B,IAGb,MAAMU,EAAOT,IAAOC,GAAM,EAAI,EACxBS,EAAIjyB,GAAM6xB,EAAMC,EAAMD,EAAM5I,EAAK6I,EAAM9I,IAAO6I,EAAM5I,EAAK6I,EAAM9I,IAAOgJ,EACtEE,EAAOD,GAAKZ,EAAKjtC,GAAMktC,EACvBa,EAAOF,IAAMX,EAAK/sC,GAAM8sC,EAIxBzlB,EAAS,IAAIpR,EAHRo3B,EAASM,EAAMP,EAASQ,GAAOhB,EAAKM,GAAM,EAC1CE,EAASO,EAAMN,EAASO,GAAOf,EAAKM,GAAM,GAG/C37B,EAAO6V,EAAOtoB,QAAQsnB,MAAMymB,EAAIC,GAChCzS,EAAU,IAAIwP,EAASziB,EAAQ7V,EAAM,GAC3C8oB,EAAQhT,OAAOjP,GACf,MAAMqd,EAAa,IAAIpsB,EAAKgxB,EAAQjT,OAAQ,IAAIpR,EAAO22B,EAAIC,IAAKp7B,QAC1DkkB,EAAW,IAAIrsB,EAAKgxB,EAAQjT,OAAQ,IAAIpR,EAAOi3B,EAAIC,IAAK17B,QAC9D,OAAO,IAAIw6B,EAAe3R,EAAS5E,EAAard,EAAKsd,EAAWtd,KFlIjE,MAAMw1B,EA6DTthC,YAAYuhC,GAoBR,GAVAxsC,KAAK03B,WAAa,EAElBtV,EAAWK,MAAQ,CACfgqB,kBAAkB,EAClB/U,WAAY,EACZnV,YAAY,EACZC,YAAY,EACZF,WAAW,EACXlN,SAAS,QAEe,IAAjBo3B,EAAOvsC,OACd,KAAM,uBASV,MAAMuc,EAAI+vB,EAAgB/lB,MAAMkmB,MAChC1sC,KAAKwsC,OAAS,CACVvsC,OAAQusC,EAAOvsC,OACf0sC,SAAUnwB,EAAEowB,IAAIJ,EAAQ,YAAY,GACpCK,YAAarwB,EAAEswB,KAAKN,EAAQ,eAAe,GAC3C3lB,OAAQrK,EAAEynB,IAAIuI,EAAQ,SAAU,GAChC1lB,OAAQtK,EAAEynB,IAAIuI,EAAQ,SAAU,GAChCrF,QAAS3qB,EAAEynB,IAAIuI,EAAQ,UAAW,GAClCpF,QAAS5qB,EAAEynB,IAAIuI,EAAQ,UAAW,GAClCO,WAAYvwB,EAAEswB,KAAKN,EAAQ,cAAc,GACzCQ,aAAcxwB,EAAEynB,IAAIuI,EAAQ,eAAgB,GAC5CS,aAAczwB,EAAEynB,IAAIuI,EAAQ,eAAgB,GAC5CU,mBAAoB1wB,EAAEynB,IAAIuI,EAAQ,uBAAwB,GAC1DW,WAAY3wB,EAAEswB,KAAKN,EAAQ,cAAc,GACzCY,iBAAkB5wB,EAAEowB,IAAIJ,EAAQ,oBAAoB,GACpDa,qBAAsB7wB,EAAEynB,IAAIuI,EAAQ,uBAAwB,IAC5Dc,qBAAsB9wB,EAAEynB,IAAIuI,EAAQ,uBAAwB,IAC5De,gBAAiBf,EAAOe,iBAAmB,UAC3CC,eAAgBhxB,EAAEswB,KAAKN,EAAQ,kBAAkB,GACjDiB,mBAAoBjxB,EAAEynB,IAAIuI,EAAQ,qBAAsBD,EAAgBmB,sBACxEC,oBAAqBnxB,EAAEynB,IAAIuI,EAAQ,sBAAuBD,EAAgBqB,uBAC1EC,kBAAmBrxB,EAAEynB,IAAIuI,EAAQ,oBAAqB,GACtDsB,mBAAoBtxB,EAAEynB,IAAIuI,EAAQ,qBAAsB,GACxDuB,UAAWvxB,EAAEynB,IAAIuI,EAAQ,YAAa,GACtCwB,UAAWxxB,EAAEynB,IAAIuI,EAAQ,YAAa,GACtCyB,gBAAiBzxB,EAAEswB,KAAKN,EAAQ,mBAAmB,GACnD0B,SAAU,KACN5rC,EAAM6rC,MAAMD,SAAS5rC,IAEzB8rC,YAAa,KACT9rC,EAAM+rC,gBAEVC,iBAAkB9xB,EAAEswB,KAAKN,EAAQ,oBAAoB,GACrD+B,gBAAiB/xB,EAAEswB,KAAKN,EAAQ,mBAAmB,GAEnDgC,SAAUhyB,EAAEiyB,KAAKjC,EAAQ,WAAY,MACrCkC,QAASlyB,EAAEiyB,KAAKjC,EAAQ,UAAW,MACnCmC,SAAUnyB,EAAEiyB,KAAKjC,EAAQ,WAAY,MAErCoC,YAAapyB,EAAEswB,KAAKN,EAAQ,eAAe,GAC3CqC,YAAaryB,EAAEswB,KAAKN,EAAQ,eAAe,GAC3CsC,WAAYtyB,EAAEswB,KAAKN,EAAQ,cAAc,GACzCuC,iBAAkBvyB,EAAEswB,KAAKN,EAAQ,oBAAoB,GAErDwC,SAAUxyB,EAAEswB,KAAKN,EAAQ,YAAY,IASzCxsC,KAAKu1B,WAAa,CACd0Z,cAAc,EACdC,sBAAuB1yB,EAAEswB,KAAKN,EAAQ,yBAAyB,GAC/D2C,uBAAwB3yB,EAAEswB,KAAKN,EAAQ,0BAA0B,GACjE4C,gBAAiB5yB,EAAEswB,KAAKN,EAAQ,mBAAmB,GACnD6C,iBAAkB7yB,EAAEswB,KAAKN,EAAQ,oBAAoB,GACrD8C,SAAU9yB,EAAEswB,KAAKN,EAAQ,YAAY,GACrC+C,OAAQ,CACJrxC,MAAO,UACPm4B,UAAW,EACXuC,WAAY,CACR16B,MAAO,wBACPm4B,UAAW,GAEfmZ,WAAY,CACRtxC,MAAO,UACPm4B,UAAW,EACXoF,MAAM,GAEVgU,cAAe,CACXvxC,MAAO,UACPm4B,UAAW,EACXoF,MAAM,IAGd5B,QAAS,CACL37B,MAAO,UACPm4B,UAAW,GAEfmN,SAAU,CACNtlC,MAAO,UACPm4B,UAAW,GAEf2C,QAAS,CACL96B,MAAO,UACPm4B,UAAW,GAEfqZ,cAAe,CACXxxC,MAAO,UACPm4B,UAAW,GAEf/C,OAAQ,CACJp1B,MAAO,UACPm4B,UAAW,GAEfsZ,aAAc,CACVzxC,MAAO,UACPm4B,UAAW,GAEfz3B,OAAQ,CACJV,MAAO,UACPm4B,UAAW,GAEfuZ,eAAgB,CACZ1xC,MAAO,UACPm4B,UAAW,GAEf5X,KAAM,CACFvgB,MAAO,UACPm4B,UAAW,GAEfwZ,OAAQ,CACJ3xC,MAAO,UACPm4B,UAAW,GAEfzb,MAAO,CACH1c,MAAO,UACPm4B,UAAW,IAMnBr2B,KAAKo5B,KAAO,IAAI2K,EAAK,IAAIpvB,EAAO,EAAG,GAAI,IAAIA,EAAO,GAAI,KACtD3U,KAAKq1B,WAAa,CAAExyB,MAAO0pC,EAAgBmB,qBAAsBzqC,OAAQspC,EAAgBqB,uBACzF,MAAMkC,EAAwC,iBAAjBtD,EAAOvsC,OAAqBC,SAAS6vC,cAAcvD,EAAOvsC,QAAUusC,EAAOvsC,OAExG,GAA4C,WAAxC6vC,EAAcE,QAAQC,cAQtB,GAPAjwC,KAAKC,OAAS6vC,EACd9vC,KAAKkwC,aAAelwC,KAAKC,OACrBD,KAAKwsC,OAAOwC,eAAmC,IAAhB1S,IAC/Bl+B,QAAQgM,KAAK,gIACbhM,QAAQgM,KAAK,8CACbpK,KAAKwsC,OAAOwC,UAAW,GAEvBhvC,KAAKwsC,OAAOwC,SAAU,CACtB,MAAMnU,EAAM76B,KAAKC,OAAOkwC,WAAW,SACnCnwC,KAAKowC,KAAO,IAAI9T,EAAYzB,GAAK,GAGjC76B,KAAKy7B,KAAOz7B,KAAKowC,KAAKhZ,cAAa,GACnCh5B,QAAQgM,KAAK,sGAEZ,CACD,MAAMywB,EAAM76B,KAAKC,OAAOkwC,WAAW,MACnCnwC,KAAKowC,KAAO,IAAIzV,EAAUE,GAAK,GAC/B76B,KAAKy7B,KAAO,IAAId,EAAUE,GAAK,OAGlC,IAA4C,QAAxCiV,EAAcE,QAAQC,cAwB3B,KAAM,kDAvBN,QAA4B,IAAjB/a,EACP,KAAM,8IACVl1B,KAAKC,OAAS6vC,EACd9vC,KAAKowC,KAAO,IAAIlb,EAAal1B,KAAKC,OAAQ,IAAI0U,EAC9C,IAAIA,EACJ3U,KAAKq1B,YAAY,EACjBr1B,KAAKu1B,YAAY,GAEjBv1B,KAAKy7B,KAAOz7B,KAAKowC,KAAKhZ,cAAa,GAC/Bp3B,KAAKC,OAAOI,eACZL,KAAKkwC,aAAehwC,SAAS2a,cAAc,OAC3C7a,KAAKkwC,aAAa/sC,MAAMtC,SAAW,WACnCb,KAAKkwC,aAAa/sC,MAAMktC,KAAO,IAC/BrwC,KAAKkwC,aAAa/sC,MAAMmtC,IAAM,IAC9BtwC,KAAKkwC,aAAa/sC,MAAMotC,OAAS,UACjCvwC,KAAKC,OAAOI,cAAc8C,MAAMtC,SAAW,WAC3Cb,KAAKC,OAAOI,cAAc01B,YAAY/1B,KAAKkwC,eAG3ClwC,KAAKkwC,aAAehwC,SAAS8C,KAMrChD,KAAKowC,KAAKvqB,MAAM5kB,IAAIjB,KAAKwsC,OAAO3lB,OAAQ7mB,KAAKwsC,OAAO1lB,QACpD9mB,KAAKy7B,KAAK5V,MAAM5kB,IAAIjB,KAAKwsC,OAAO3lB,OAAQ7mB,KAAKwsC,OAAO1lB,QACpD9mB,KAAK5C,SAAW,GAChB4C,KAAKwwC,cAAgB,KACrBxwC,KAAKywC,gBAAkB,GACvBzwC,KAAK0wC,UAAY,GACjB1wC,KAAK5B,QAAUA,QACf4B,KAAKmuC,MAAQ,CAETD,SAAU3B,EAAgBoE,WAE9B,IAAIruC,EAAQtC,KACZmgB,WAAW5d,iBAAiB,UAAU,IAAMD,EAAME,iBAClDxC,KAAKwC,eACDgqC,EAAO8B,kBACPtuC,KAAKquC,eAETruC,KAAK4wC,wBAEL5wC,KAAK6wC,iBAEL7wC,KAAK8wC,SAEL9wC,KAAKC,OAAO8wC,QAchB7uB,iBAAiB8uB,GAEb,MAAM7b,EAAUj1B,SAAS22B,gBAAgB,6BAA8B,OAEvE,IAAIoa,EAAY,IAAI/b,EAAaC,EAAS6b,EAAGZ,KAAKhb,OAAQ4b,EAAGZ,KAAKvqB,MAAOmrB,EAAG3b,YAAY,EACxF2b,EAAGzb,YACC2b,EAAYD,EAAU7Z,cAAa,GACvC6Z,EAAUxZ,eAAe,GACzByZ,EAAUzZ,eAAe,GACrBuZ,EAAGxE,OAAOgC,UACVwC,EAAGxE,OAAOgC,WACdyC,EAAUv1B,MAAMs1B,EAAGxE,OAAOe,iBACtByD,EAAGxE,OAAOkC,SACVsC,EAAGxE,OAAOkC,QAAQuC,EAAWC,GACjCF,EAAGG,QAAQ,EAAGF,EAAWC,GACzBF,EAAG/B,aAAa,EAAGgC,GACfD,EAAGxE,OAAOmC,UACVqC,EAAGxE,OAAOmC,SAASsC,EAAWC,GAClCD,EAAUpZ,aAAa,GACvBqZ,EAAUrZ,aAAa,GAGvB,IACIuZ,GADa,IAAIC,eACIC,kBAAkBnc,GACvCoc,EAAO,IAAIC,KAAK,CAACJ,GAAU,CAAEK,KAAM,4BAGvC,GAAmC,mBAAxBtxB,WAAmB,OAC1B,KAAM,yGAEVuxB,EADcvxB,WAAmB,QACzBoxB,EAAM,uBAYlBlD,eACIruC,KAAKwsC,OAAO8B,kBAAmB,EAC/B,MAAMqD,EAAaxxB,WAAWyxB,kBAAoB,EAClD5xC,KAAKwsC,OAAOuB,UAAY/tC,KAAKwsC,OAAOwB,UAAY,EAAM2D,EACtD3xC,KAAKwsC,OAAOqB,kBAAoB7tC,KAAKwsC,OAAOsB,mBAAqB6D,EACjE3xC,KAAKwC,eACLxC,KAAK6wC,iBAQTgB,UAAUvQ,GACN,MAAMwQ,EAAe,IAAIn9B,EAAO3U,KAAKq1B,WAAWxyB,MAAQ,EAAK7C,KAAKq1B,WAAWpyB,OAAS,GAChF8uC,EAAc/xC,KAAKq1B,WAAWxyB,MAAQ7C,KAAKq1B,WAAWpyB,OACtDiX,EAAQonB,EAAOz+B,MAAQy+B,EAAOr+B,OAE9B8iB,EAAS,IAAIpR,EAAO2sB,EAAO9zB,IAAI9O,EAAI4iC,EAAOz+B,MAAQ,EAAKy+B,EAAO9zB,IAAIjP,EAAI+iC,EAAOr+B,OAAS,GACvFmjB,MACArB,MAAM/kB,KAAKq1B,WAAWxyB,MAAQ,EAAK7C,KAAKq1B,WAAWpyB,OAAS,GAEjE,GADAjD,KAAKgyC,UAAUjsB,GACXgsB,EAAc73B,EAAO,CACrB,MAAM+3B,EAAiBjyC,KAAKq1B,WAAWxyB,MAAQy+B,EAAOz+B,MACtD7C,KAAKkyC,QAAQD,EAAgBA,EAAgBH,OAE5C,CACD,MAAMG,EAAiBjyC,KAAKq1B,WAAWpyB,OAASq+B,EAAOr+B,OACvDjD,KAAKkyC,QAAQD,EAAgBA,EAAgBH,GAEjD9xC,KAAK8wC,SAWTqB,WAAWC,GACPpyC,KAAK5B,QAAUg0C,EAanBvB,iBACQ7wC,KAAKwsC,OAAOyB,gBACZ1B,EAAgB/lB,MAAM6rB,YAAYryC,KAAKC,OAAQD,KAAKwsC,OAAOuB,UAAW/tC,KAAKwsC,OAAOuB,WAGlFxB,EAAgB/lB,MAAM6rB,YAAYryC,KAAKC,OAAQD,KAAKwsC,OAAOuB,UAAW/tC,KAAKwsC,OAAOwB,WA2B1F5sC,IAAIkxC,EAAUxB,GACV,GAAInmC,MAAM2kB,QAAQgjB,GAAW,CACzB,MAAMjjB,EAAMijB,EAEZ,IAAK,IAAInqC,EAAI,EAAGA,EAAIknB,EAAI5wB,OAAQ0J,IAC5BnI,KAAKoB,IAAIiuB,EAAIlnB,IAAI,QAGpB,GAAImqC,aAAoB39B,EACzB3U,KAAK0wC,UAAUxrC,KAAKotC,GACpBtyC,KAAK5C,SAAS8H,KAAKotC,QAElB,GAAIA,aAAoBtqC,EAEzBhI,KAAK0wC,UAAUxrC,KAAKotC,GACpBtyC,KAAK5C,SAAS8H,KAAKotC,EAAS/iC,GAC5BvP,KAAK5C,SAAS8H,KAAKotC,EAAS9nC,QAE3B,GAAI8nC,aAAoBxnB,EACzB9qB,KAAK0wC,UAAUxrC,KAAKotC,GACpBtyC,KAAK5C,SAAS8H,KAAKotC,EAAS/iC,GAC5BvP,KAAK5C,SAAS8H,KAAKotC,EAAS9nC,QAE3B,GAAI8nC,aAAoB9J,EACzBxoC,KAAK5C,SAAS8H,KAAKotC,EAASvsB,QAC5B/lB,KAAK5C,SAAS8H,KAAKotC,EAASpiC,MAC5BlQ,KAAK0wC,UAAUxrC,KAAKotC,GACpBA,EAASvsB,OAAO/B,UAAUZ,iBAAiBkV,IACvCga,EAASpiC,KAAK9O,IAAIk3B,EAAMpU,OAAO6jB,oBAGlC,GAAIuK,aAAoB3H,EACzB3qC,KAAK5C,SAAS8H,KAAKotC,EAAStZ,QAAQjT,QACpC/lB,KAAK5C,SAAS8H,KAAKotC,EAAStZ,QAAQ9oB,MACpClQ,KAAK0wC,UAAUxrC,KAAKotC,GACpBA,EAAStZ,QAAQjT,OAAO/B,UAAUZ,iBAAiBkV,IAC/Cga,EAAStZ,QAAQ9oB,KAAK9O,IAAIk3B,EAAMpU,OAAO6jB,oBAG1C,GAAIuK,aAAoBlf,EACzBpzB,KAAK5C,SAAS8H,KAAKotC,EAASvsB,QAC5B/lB,KAAK0wC,UAAUxrC,KAAKotC,QAEnB,GAAIA,aAAoBne,EACzBn0B,KAAK5C,SAAS8H,KAAKotC,EAAShf,OAAOvN,QACnC/lB,KAAK0wC,UAAUxrC,KAAKotC,QAEnB,GAAIA,aAAoBzjC,EAAS,CAClC7O,KAAK0wC,UAAUxrC,KAAKotC,GAEpB,IAASnqC,EAAI,EAAGA,EAAImqC,EAASl1C,SAASqB,OAAQ0J,IAC1CnI,KAAK5C,SAAS8H,KAAKotC,EAASl1C,SAAS+K,SAExC,GAAImqC,aAAoBrS,EACzBjgC,KAAK0wC,UAAUxrC,KAAKotC,GACpBtyC,KAAK5C,SAAS8H,KAAKotC,EAAS/iC,GAC5BvP,KAAK5C,SAAS8H,KAAKotC,EAAS9nC,GAC5BxK,KAAK5C,SAAS8H,KAAKotC,EAAS9iC,QAE3B,GAAI8iC,aAAoBxpB,EAAY,CACrC9oB,KAAK0wC,UAAUxrC,KAAKotC,GACpB,MAAMnf,EAAamf,EACnB,IAASnqC,EAAI,EAAGA,EAAIgrB,EAAWzD,aAAajxB,OAAQ0J,IAC3CmqC,EAAS7iB,gBAAuB,GAALtnB,GAC5BnI,KAAK5C,SAAS8H,KAAKiuB,EAAWzD,aAAavnB,GAAGojB,YAClDvrB,KAAK5C,SAAS8H,KAAKiuB,EAAWzD,aAAavnB,GAAG5K,UAC9CyC,KAAK5C,SAAS8H,KAAKiuB,EAAWzD,aAAavnB,GAAGqjB,mBAC9CxrB,KAAK5C,SAAS8H,KAAKiuB,EAAWzD,aAAavnB,GAAGsjB,iBAC9C0H,EAAWzD,aAAavnB,GAAGqjB,kBAAkB9G,KAAKnC,YAAa,EAC/D4Q,EAAWzD,aAAavnB,GAAGsjB,gBAAgB/G,KAAKnC,YAAa,EAEjEgqB,EAAgB/lB,MAAM+rB,2BAA2BD,OAEhD,MAAIA,aAAoBjK,GAWzB,KAAM,oDAAsDiK,EAAW,IAVvEtyC,KAAK5C,SAAS8H,KAAKotC,EAAShK,WAC5BtoC,KAAK5C,SAAS8H,KAAKotC,EAAS/J,YAC5BvoC,KAAK0wC,UAAUxrC,KAAKotC,GAEpBA,EAAShK,UAAUtkB,UAAUZ,iBAAiBO,IAC1C2uB,EAAS/J,WAAWnnC,IAAIuiB,EAAEO,OAAO6jB,eAErCuK,EAAS/J,WAAW7jB,KAAKnC,YAAa,GAMtCuuB,QAA2B,IAAVA,IACjB9wC,KAAK8wC,SAyBbnnC,OAAO2oC,EAAUxB,EAAQ0B,GACrB,GAAI7nC,MAAM2kB,QAAQgjB,GAAlB,CACI,IAAK,IAAInqC,EAAI,EAAGA,EAAImqC,EAAS7zC,OAAQ0J,IACjCnI,KAAK2J,OAAO2oC,EAASnqC,IAAI,EAAOqqC,GAEhC1B,GACA9wC,KAAK8wC,aALb,CASIwB,aAAoB39B,IACpB3U,KAAKyyC,aAAaH,GAAU,GACxBxB,GACA9wC,KAAK8wC,UAGb,IAAS3oC,EAAI,EAAGA,EAAInI,KAAK0wC,UAAUjyC,OAAQ0J,IACvC,GAAInI,KAAK0wC,UAAUvoC,KAAOmqC,EAAU,CAEhC,GADAtyC,KAAK0wC,UAAUrsB,OAAOlc,EAAG,GACrBqqC,EAEA,GAAIF,aAAoBtqC,EAEpBhI,KAAKyyC,aAAaH,EAAS/iC,GAAG,GAC9BvP,KAAKyyC,aAAaH,EAAS9nC,GAAG,QAE7B,GAAI8nC,aAAoBxnB,EACzB9qB,KAAKyyC,aAAaH,EAAS/iC,GAAG,GAC9BvP,KAAKyyC,aAAaH,EAAS9nC,GAAG,QAE7B,GAAI8nC,aAAoB9J,EACzBxoC,KAAKyyC,aAAaH,EAASvsB,QAAQ,GACnC/lB,KAAKyyC,aAAaH,EAASpiC,MAAM,QAEhC,GAAIoiC,aAAoB3H,EACzB3qC,KAAKyyC,aAAaH,EAAStZ,QAAQjT,QACnC/lB,KAAKyyC,aAAaH,EAAStZ,QAAQ9oB,WAElC,GAAIoiC,aAAoBlf,EACzBpzB,KAAKyyC,aAAaH,EAASvsB,QAAQ,QAElC,GAAIusB,aAAoBne,EACzBn0B,KAAKyyC,aAAaH,EAAShf,OAAOvN,QAAQ,QAEzC,GAAIusB,aAAoBzjC,EAEzB,IAAS1G,EAAI,EAAGA,EAAImqC,EAASl1C,SAASqB,OAAQ0J,IAC1CnI,KAAKyyC,aAAaH,EAASl1C,SAAS+K,IAAI,QAE3C,GAAImqC,aAAoBrS,EACzBjgC,KAAKyyC,aAAaH,EAAS/iC,GAAG,GAC9BvP,KAAKyyC,aAAaH,EAAS9nC,GAAG,GAC9BxK,KAAKyyC,aAAaH,EAAS9iC,GAAG,QAE7B,GAAI8iC,aAAoBxpB,EACzB,IAAS3gB,EAAI,EAAGA,EAAImqC,EAAS5iB,aAAajxB,OAAQ0J,IAC9CnI,KAAKyyC,aAAaH,EAAS5iB,aAAavnB,GAAGojB,YAAY,GACvDvrB,KAAKyyC,aAAaH,EAAS5iB,aAAavnB,GAAGqjB,mBAAmB,GAC9DxrB,KAAKyyC,aAAaH,EAAS5iB,aAAavnB,GAAGsjB,iBAAiB,GACxDtjB,EAAI,GAAKmqC,EAAS5iB,aAAajxB,QAC/BuB,KAAKyyC,aAAaH,EAAS5iB,aAAavnB,GAAG5K,UAAU,QAIxD+0C,aAAoBjK,IACzBroC,KAAKyyC,aAAaH,EAAShK,WAAW,GACtCtoC,KAAKyyC,aAAaH,EAAS/J,YAAY,IAG3CuI,GACA9wC,KAAK8wC,WAerB2B,aAAa/kC,EAAMojC,GACf,IAAK,IAAI3oC,EAAI,EAAGA,EAAInI,KAAK5C,SAASqB,OAAQ0J,IACtC,GAAInI,KAAK5C,SAAS+K,KAAOuF,EAIrB,OAHA1N,KAAK5C,SAASinB,OAAOlc,EAAG,QACpB2oC,GACA9wC,KAAK8wC,UAgBrB4B,UAAUC,GACN3yC,KAAK0wC,UAAY,GACZjgC,QAAQkiC,KACT3yC,KAAK5C,SAAW,IAEpB4C,KAAK8wC,SAYT8B,cAAcC,EAAeC,GACzB,IAAIlrC,EAAI5H,KAAK+yC,gBAAgB/yC,KAAKgzC,uBAAuBH,EAAcn0C,EAAGm0C,EAAct0C,GAAIu0C,EAAiB3rC,KAAK6I,IAAIhQ,KAAKwsC,OAAOuB,UAAW/tC,KAAKwsC,OAAOwB,YACzJ,GAAIpmC,GAAmB,UAAdA,EAAEqrC,SACP,OAAOjzC,KAAK5C,SAASwK,EAAEsrC,QAe/B5D,SAASc,QACe,IAATA,IACPA,EAAOpwC,KAAKowC,MAEhB,MAAM+C,EACEpP,EAAKvd,MAAM0d,eAAelkC,KAAKwsC,OAAOU,mBAAoBltC,KAAKowC,KAAKvqB,MAAMnnB,GAAKsB,KAAKwsC,OAAOQ,aAC3FhtC,KAAKwsC,OAAOuB,UAFdoF,EAGEpP,EAAKvd,MAAM0d,eAAelkC,KAAKwsC,OAAOU,mBAAoBltC,KAAKowC,KAAKvqB,MAAMtnB,GAAKyB,KAAKwsC,OAAOS,aAC3FjtC,KAAKwsC,OAAOwB,UAEpB,IAAIoF,EAAQ,CAAEvwC,MAAO7C,KAAKo5B,KAAKn7B,KAAKS,EAAIy0C,EAAUlwC,OAAQjD,KAAKo5B,KAAKn7B,KAAKM,EAAI40C,GACzEE,EAAcrzC,KAAKq1B,WAAWxyB,MAAQ,EAAtCwwC,EAAiDrzC,KAAKq1B,WAAWpyB,OAAS,EAC1EmyB,EAASp1B,KAAKowC,KAAKhb,OAAO33B,QAAQ2oB,MAEtCgP,EAAO12B,EACDyI,KAAK2a,MAAMsT,EAAO12B,EAAI20C,GAAYlsC,KAAK2a,MAAMsxB,EAAMvwC,OAAUuwC,EAAMvwC,MAAS7C,KAAKowC,KAAKvqB,MAAMnnB,GACvFsB,KAAKowC,KAAKhb,OAAO12B,EAAI20C,GAAYrzC,KAAKowC,KAAKvqB,MAAMnnB,EAAK00C,EAAMvwC,MACvEuyB,EAAO72B,EACD4I,KAAK2a,MAAMsT,EAAO72B,EAAI80C,GAAalsC,KAAK2a,MAAMsxB,EAAMnwC,QAAWmwC,EAAMnwC,OAAUjD,KAAKowC,KAAKvqB,MAAMtnB,GAC1FyB,KAAKowC,KAAKhb,OAAO72B,EAAI80C,GAAarzC,KAAKowC,KAAKvqB,MAAMnnB,EAAK00C,EAAMnwC,OACpEjD,KAAKu1B,WAAW+Z,WAChBc,EAAK5Y,oBAAoB,MACrBx3B,KAAKwsC,OAAOO,YAEZqD,EAAK7Y,aAAa,UAClB6Y,EAAK5W,OAAOpE,EAAQp1B,KAAKq1B,WAAWxyB,MAAQ7C,KAAKowC,KAAKvqB,MAAMnnB,EAAGsB,KAAKq1B,WAAWpyB,OAASjD,KAAKowC,KAAKvqB,MAAMtnB,EAAG60C,EAAMvwC,MAAOuwC,EAAMnwC,OAAQ,2BAGtImtC,EAAK7Y,aAAa,QAClB6Y,EAAKhX,KAAKhE,EAAQp1B,KAAKq1B,WAAWxyB,MAAQ7C,KAAKowC,KAAKvqB,MAAMnnB,EAAGsB,KAAKq1B,WAAWpyB,OAASjD,KAAKowC,KAAKvqB,MAAMtnB,EAAG60C,EAAMvwC,MAAOuwC,EAAMnwC,OAAQ,2BAgBhJkqC,WAAWiD,GAEPA,EAAK7Y,aAAa,UAClB6Y,EAAKxW,UAAU,CAAEl7B,EAAG,EAAGH,EAAG,GAAK,GAAI,WAKvC+0C,aAAazf,EAAG31B,GACZ,OAAO21B,EAAEnP,KAAKlC,WAAaxiB,KAAKu1B,WAAWqa,eAAe1xC,MAAQ21B,EAAEnP,KAAKpC,UAAYpkB,EAAQ,wBAgBjGq1C,cAAc7b,EAAY0Y,EAAM3U,GAC5B,IAAK,IAAItzB,KAAKnI,KAAK0wC,UAAW,CAC1B,IAAInmC,EAAIvK,KAAK0wC,UAAUvoC,GACvBnI,KAAKowC,KAAK7Y,aAAahtB,EAAEga,KACzBvkB,KAAKy7B,KAAKlE,aAAahtB,EAAEga,KACzBvkB,KAAKowC,KAAK5Y,oBAAoBjtB,EAAE+Z,WAChCtkB,KAAKowC,KAAK5Y,oBAAoBjtB,EAAE+Z,WAChCtkB,KAAKwzC,aAAajpC,EAAGmtB,EAAY0Y,EAAM3U,IAkB/C+X,aAAajpC,EAAGmtB,EAAY0Y,EAAM3U,GAC9B,GAAIlxB,aAAaue,EACb,IAAK,IAAItZ,KAAKjF,EAAEmlB,aACZ0gB,EAAK5X,YAAYjuB,EAAEmlB,aAAalgB,GAAG+b,WAAYhhB,EAAEmlB,aAAalgB,GAAGjS,SAAUgN,EAAEmlB,aAAalgB,GAAGgc,kBAAmBjhB,EAAEmlB,aAAalgB,GAAGic,gBAAiBzrB,KAAKu1B,WAAWga,OAAOrxC,MAAO8B,KAAKu1B,WAAWga,OAAOlZ,WACpMr2B,KAAKu1B,WAAW4Z,wBAA0BnvC,KAAKu1B,WAAW8Z,kBAatD9kC,EAAEmlB,aAAalgB,GAAG+b,WAAW7G,KAAKtP,UAClCg7B,EAAK7Y,aAAa,GAAGhtB,EAAEga,UACvB6rB,EAAK5Y,oBAAoB,GAAGjtB,EAAE+Z,0BAC1B/Z,EAAEmlB,aAAalgB,GAAG+b,WAAW7G,KAAK+nB,iBAClC2D,EAAK1W,aAAanvB,EAAEmlB,aAAalgB,GAAG+b,WAAY,EAAGvrB,KAAKszC,aAAa/oC,EAAEmlB,aAAalgB,GAAG+b,WAAYvrB,KAAKu1B,WAAWga,OAAOC,WAAWtxC,QAGrIkyC,EAAK3W,cAAclvB,EAAEmlB,aAAalgB,GAAG+b,WAAY,EAAGvrB,KAAKszC,aAAa/oC,EAAEmlB,aAAalgB,GAAG+b,WAAYvrB,KAAKu1B,WAAWga,OAAOC,WAAWtxC,SAG9IqM,EAAEmlB,aAAalgB,GAAG+b,WAAW7G,KAAKgT,WAAaA,EAa3CntB,EAAEmlB,aAAalgB,GAAGjS,SAASmnB,KAAKtP,UAChCg7B,EAAK7Y,aAAa,GAAGhtB,EAAEga,UACvB6rB,EAAK5Y,oBAAoB,GAAGjtB,EAAE+Z,0BAC1B/Z,EAAEmlB,aAAalgB,GAAGjS,SAASmnB,KAAK+nB,iBAChC2D,EAAK1W,aAAanvB,EAAEmlB,aAAalgB,GAAGjS,SAAU,EAAGyC,KAAKszC,aAAa/oC,EAAEmlB,aAAalgB,GAAGjS,SAAUyC,KAAKu1B,WAAWga,OAAOC,WAAWtxC,QAGjIkyC,EAAK3W,cAAclvB,EAAEmlB,aAAalgB,GAAGjS,SAAU,EAAGyC,KAAKszC,aAAa/oC,EAAEmlB,aAAalgB,GAAGjS,SAAUyC,KAAKu1B,WAAWga,OAAOC,WAAWtxC,SAGtIqM,EAAEmlB,aAAalgB,GAAGgc,kBAAkB9G,KAAKtP,UACzCg7B,EAAK7Y,aAAa,GAAGhtB,EAAEga,UACvB6rB,EAAK5Y,oBAAoB,GAAGjtB,EAAE+Z,kCAC9B8rB,EAAKzW,aAAapvB,EAAEmlB,aAAalgB,GAAGgc,kBAAmB,EAAGxrB,KAAKszC,aAAa/oC,EAAEmlB,aAAalgB,GAAGgc,kBAAmBxrB,KAAKu1B,WAAWga,OAAOE,cAAcvxC,SAEtJqM,EAAEmlB,aAAalgB,GAAGic,gBAAgB/G,KAAKtP,UACvCg7B,EAAK7Y,aAAa,GAAGhtB,EAAEga,UACvB6rB,EAAK5Y,oBAAoB,GAAGjtB,EAAE+Z,gCAC9B8rB,EAAKzW,aAAapvB,EAAEmlB,aAAalgB,GAAGic,gBAAiB,EAAGzrB,KAAKszC,aAAa/oC,EAAEmlB,aAAalgB,GAAGic,gBAAiBzrB,KAAKu1B,WAAWga,OAAOE,cAAcvxC,SAEtJqM,EAAEmlB,aAAalgB,GAAG+b,WAAW7G,KAAKgT,WAAaA,EAC/CntB,EAAEmlB,aAAalgB,GAAGjS,SAASmnB,KAAKgT,WAAaA,EAC7CntB,EAAEmlB,aAAalgB,GAAGgc,kBAAkB9G,KAAKgT,WAAaA,EACtDntB,EAAEmlB,aAAalgB,GAAGic,gBAAgB/G,KAAKgT,WAAaA,IAGpDntB,EAAEmlB,aAAalgB,GAAG+b,WAAW7G,KAAKgT,WAAaA,EAC/CntB,EAAEmlB,aAAalgB,GAAGjS,SAASmnB,KAAKgT,WAAaA,EAC7CntB,EAAEmlB,aAAalgB,GAAGgc,kBAAkB9G,KAAKgT,WAAaA,EACtDntB,EAAEmlB,aAAalgB,GAAGic,gBAAgB/G,KAAKgT,WAAaA,GAEpD13B,KAAKu1B,WAAW2Z,uBAAyBlvC,KAAKu1B,WAAW6Z,kBACzDgB,EAAK7Y,aAAa,GAAGhtB,EAAEga,UACvB6rB,EAAK5Y,oBAAoB,GAAGjtB,EAAE+Z,wBAC9B8rB,EAAK3xB,KAAKlU,EAAEmlB,aAAalgB,GAAG+b,WAAYhhB,EAAEmlB,aAAalgB,GAAGgc,kBAAmBxrB,KAAKu1B,WAAWga,OAAO3W,WAAW16B,MAAO8B,KAAKu1B,WAAWga,OAAO3W,WAAWvC,WACxJ+Z,EAAK7Y,aAAa,GAAGhtB,EAAEga,UACvB6rB,EAAK5Y,oBAAoB,GAAGjtB,EAAE+Z,sBAC9B8rB,EAAK3xB,KAAKlU,EAAEmlB,aAAalgB,GAAGjS,SAAUgN,EAAEmlB,aAAalgB,GAAGic,gBAAiBzrB,KAAKu1B,WAAWga,OAAO3W,WAAW16B,MAAO8B,KAAKu1B,WAAWga,OAAO3W,WAAWvC,iBAI3J,GAAI9rB,aAAasE,GAElB,GADAuhC,EAAKvW,QAAQtvB,EAAGvK,KAAKu1B,WAAWsE,QAAQ37B,MAAO8B,KAAKu1B,WAAWsE,QAAQxD,YAClEr2B,KAAKu1B,WAAW8Z,iBACjB,IAAK,IAAIlnC,KAAKoC,EAAEnN,SACZmN,EAAEnN,SAAS+K,GAAGuc,KAAKgT,WAAaA,OAIvC,GAAIntB,aAAa01B,EAClBmQ,EAAKtW,SAAS,CAACvvB,EAAEgF,EAAGhF,EAAEC,EAAGD,EAAEiF,IAAI,EAAOxP,KAAKu1B,WAAWiO,SAAStlC,MAAO8B,KAAKu1B,WAAWiO,SAASnN,WAC1Fr2B,KAAKu1B,WAAW8Z,mBACjB9kC,EAAEgF,EAAEmV,KAAKgT,WAAantB,EAAEC,EAAEka,KAAKgT,WAAantB,EAAEiF,EAAEkV,KAAKgT,WAAaA,QAErE,GAAIntB,aAAai+B,EACdxoC,KAAKu1B,WAAW6Z,kBAChBgB,EAAK7Y,aAAa,GAAGhtB,EAAEga,UACvB6rB,EAAK5Y,oBAAoB,GAAGjtB,EAAE+Z,oBAE9B8rB,EAAK3xB,KAAKlU,EAAEwb,OAAOtoB,QAAQ2D,IAAI,EAAGmJ,EAAEq+B,iBAAiB5iB,OAAOzb,EAAErD,SAAUqD,EAAEwb,QAASxb,EAAE2F,KAAM,WAC3FkgC,EAAK7Y,aAAa,GAAGhtB,EAAEga,UACvB6rB,EAAK5Y,oBAAoB,GAAGjtB,EAAE+Z,oBAE9B8rB,EAAK3xB,KAAKlU,EAAEwb,OAAOtoB,QAAQ2D,IAAImJ,EAAEm+B,gBAAiB,GAAG1iB,OAAOzb,EAAErD,SAAUqD,EAAEwb,QAASxb,EAAE2F,KAAM,YAE/FkgC,EAAK7Y,aAAahtB,EAAEga,KACpB6rB,EAAK5Y,oBAAoB,GAAGjtB,EAAE+Z,aAC9B8rB,EAAKpX,QAAQzuB,EAAEwb,OAEfxb,EAAEk+B,UAAWl+B,EAAEo+B,UAAW3oC,KAAKu1B,WAAWyD,QAAQ96B,MAAO8B,KAAKu1B,WAAWyD,QAAQ3C,UAAW9rB,EAAErD,UACzFlH,KAAKu1B,WAAW8Z,mBACjB9kC,EAAEwb,OAAOrB,KAAKgT,WAAaA,EAC3BntB,EAAE2F,KAAKwU,KAAKgT,WAAaA,QAG5B,GAAIntB,aAAaogC,EAAgB,CAClCyF,EAAK7Y,aAAahtB,EAAEga,KACpB6rB,EAAK5Y,oBAAoB,GAAGjtB,EAAE+Z,aAO9B,MAAMgQ,EAAOqW,EAAeC,mBAAmBpW,eAAejqB,EAAEyuB,QAAQjT,OAAOrnB,EAAG6L,EAAEyuB,QAAQjT,OAAOxnB,EAAGgM,EAAEyuB,QAAQyP,UAAWl+B,EAAEyuB,QAAQ2P,UAAWp+B,EAAE6pB,WAAY7pB,EAAE8pB,SAAU9pB,EAAEyuB,QAAQ9xB,SAAU,CAAE0tB,aAAa,IAC7Mwb,EAAKx6B,KAAK0e,EAAMt0B,KAAKu1B,WAAWma,cAAcxxC,MAAO8B,KAAKu1B,WAAWma,cAAcrZ,gBAE9E9rB,aAAa6oB,EAClBgd,EAAK9c,OAAO/oB,EAAEwb,OAAQxb,EAAEqM,OAAQ5W,KAAKu1B,WAAWjC,OAAOp1B,MAAO8B,KAAKu1B,WAAWjC,OAAO+C,WAEhF9rB,aAAa4pB,EAClBic,EAAKtX,UAAUvuB,EAAE+oB,OAAOvN,OAAQxb,EAAE+oB,OAAO1c,OAAQrM,EAAE6pB,WAAY7pB,EAAE8pB,SAAUr0B,KAAKu1B,WAAWoa,aAAazxC,MAAO8B,KAAKu1B,WAAWoa,aAAatZ,WAEvI9rB,aAAaoK,GACd3U,KAAKu1B,WAAW0Z,cAAkB1kC,EAAEma,KAAKnC,YAAehY,EAAEma,KAAKpC,YAAc/X,EAAEma,KAAKtP,UAEpFg7B,EAAKzW,aAAapvB,EAAG,EAAGvK,KAAKu1B,WAAW32B,OAAOV,OAC/CqM,EAAEma,KAAKgT,WAAaA,GAGnBntB,aAAavC,GAClBooC,EAAK3xB,KAAKlU,EAAEgF,EAAGhF,EAAEC,EAAGxK,KAAKu1B,WAAW9W,KAAKvgB,MAAO8B,KAAKu1B,WAAW9W,KAAK4X,WAChEr2B,KAAKu1B,WAAW8Z,kBAAqB9kC,EAAEgF,EAAEmV,KAAKnC,aAC/ChY,EAAEgF,EAAEmV,KAAKgT,WAAaA,GACrB13B,KAAKu1B,WAAW8Z,kBAAqB9kC,EAAEC,EAAEka,KAAKnC,aAC/ChY,EAAEC,EAAEka,KAAKgT,WAAaA,IAErBntB,aAAaugB,GAClBslB,EAAKnY,MAAM1tB,EAAEgF,EAAGhF,EAAEC,EAAGxK,KAAKu1B,WAAWsa,OAAO3xC,OACxC8B,KAAKu1B,WAAW8Z,kBAAoB9kC,EAAEC,EAAEka,KAAKnC,YAAchY,EAAEC,EAAEka,KAAKtP,SACpEg7B,EAAK7Y,aAAa,GAAGhtB,EAAEga,UACvB6rB,EAAK5Y,oBAAoB,GAAGjtB,EAAE+Z,oBAC9B8rB,EAAKzW,aAAapvB,EAAEC,EAAG,EAAG,YAG1BD,EAAEC,EAAEka,KAAKgT,WAAaA,EAErB13B,KAAKu1B,WAAW8Z,kBAAqB9kC,EAAEgF,EAAEmV,KAAKnC,aAC/ChY,EAAEgF,EAAEmV,KAAKgT,WAAaA,GACrB13B,KAAKu1B,WAAW8Z,kBAAqB9kC,EAAEC,EAAEka,KAAKnC,aAC/ChY,EAAEC,EAAEka,KAAKgT,WAAaA,IAErBntB,aAAa89B,GACdroC,KAAKu1B,WAAW6Z,kBAChBgB,EAAK7Y,aAAa,GAAGhtB,EAAEga,UACvB6rB,EAAK5Y,oBAAoB,GAAGjtB,EAAE+Z,kBAC9B8rB,EAAK3xB,KAAKlU,EAAE+9B,UAAW/9B,EAAEg+B,WAAYvoC,KAAKu1B,WAAW3a,MAAM1c,MAAO8B,KAAKu1B,WAAW3a,MAAMyb,YAE5FoF,EAAKlE,aAAahtB,EAAEga,KACpBkX,EAAK7gB,MAAMrQ,EAAEqQ,MAAOrQ,EAAE+9B,UAAW/9B,EAAEg+B,WAAW9qC,QAAQ2nB,IAAI7a,EAAE+9B,YACxDtoC,KAAKu1B,WAAW8Z,mBAChBe,EAAK7Y,aAAa,GAAGhtB,EAAEga,UACvB6rB,EAAK5Y,oBAAoB,GAAGjtB,EAAE+Z,yBAC9B8rB,EAAKzW,aAAapvB,EAAEg+B,WAAY,EAAGvoC,KAAKu1B,WAAW3a,MAAM1c,OACzDqM,EAAEg+B,WAAW7jB,KAAKgT,WAAaA,IAInCt5B,QAAQq1C,MAAM,sCAElBrD,EAAK5Y,oBAAoB,MACzB4Y,EAAK7Y,aAAa,MAClBkE,EAAKjE,oBAAoB,MACzBiE,EAAKlE,aAAa,MAatBmc,kBAAkBtD,GAEY,MAAtBpwC,KAAKwwC,eAAyBxwC,KAAKwwC,cAAcpzC,SAASqB,OAAS,IACnE2xC,EAAK7Y,aAAav3B,KAAKwwC,cAAcjsB,KACrC6rB,EAAKvW,QAAQ75B,KAAKwwC,cAAe,WACjCJ,EAAKxW,UAAU55B,KAAKwwC,cAAcpzC,SAAS,GAAI,EAAG,YAgB1D6xC,aAAavX,EAAY0Y,GAErB,IAAK,IAAIjoC,KAAKnI,KAAK5C,SACX4C,KAAKu1B,WAAW0Z,cAAgBjvC,KAAK5C,SAAS+K,GAAGuc,KAAKgT,YAAcA,GAAc13B,KAAK5C,SAAS+K,GAAGuc,KAAKtP,UACxGg7B,EAAK7Y,aAAav3B,KAAK5C,SAAS+K,GAAGoc,KACnC6rB,EAAK1W,aAAa15B,KAAK5C,SAAS+K,GAAI,EAAGnI,KAAKszC,aAAatzC,KAAK5C,SAAS+K,GAAI,mBAC3EnI,KAAK5C,SAAS+K,GAAGuc,KAAKgT,WAAaA,GAc/CoZ,SACI,MAAMpZ,EAAa13B,KAAK03B,aAExB13B,KAAKowC,KAAK3Y,eAAeC,GACzB13B,KAAKy7B,KAAKhE,eAAeC,GACrB13B,KAAKwsC,OAAOgC,UACZxuC,KAAKwsC,OAAOgC,WAChBxuC,KAAK0b,QACD1b,KAAKwsC,OAAOkC,SACZ1uC,KAAKwsC,OAAOkC,QAAQ1uC,KAAKowC,KAAMpwC,KAAKy7B,MACxCz7B,KAAKmxC,QAAQzZ,EAAY13B,KAAKowC,KAAMpwC,KAAKy7B,MACrCz7B,KAAKwsC,OAAOmC,UACZ3uC,KAAKwsC,OAAOmC,SAAS3uC,KAAKowC,KAAMpwC,KAAKy7B,MACzCz7B,KAAKowC,KAAKvY,aAAaH,GACvB13B,KAAKy7B,KAAK5D,aAAaH,GAU3ByZ,QAAQzZ,EAAY0Y,EAAM3U,GACtBz7B,KAAKsvC,SAASc,GACVpwC,KAAKwsC,OAAOW,YACZntC,KAAKmtC,WAAWiD,GACpBpwC,KAAKuzC,cAAc7b,EAAY0Y,EAAM3U,GACrCz7B,KAAKivC,aAAavX,EAAY0Y,GAC9BpwC,KAAK0zC,kBAAkBtD,GAGvBA,EAAK7Y,kBAAarc,GAClBk1B,EAAK5Y,yBAAoBtc,GAa7BQ,QAEI1b,KAAKowC,KAAK10B,MAAM1b,KAAKwsC,OAAOe,iBAchCoG,eAAe7C,GACX,IAAK,IAAI3oC,KAAKnI,KAAK5C,SACf4C,KAAK5C,SAAS+K,GAAGuc,KAAKlC,YAAa,EAGvC,OAFIsuB,GACA9wC,KAAK8wC,SACF9wC,KAUXk+B,WACI,OAAO,IAAIzpB,EAAOzU,KAAKgzC,uBAAuB,EAAG,GAAIhzC,KAAKgzC,uBAAuBhzC,KAAKq1B,WAAWxyB,MAAQ7C,KAAKwsC,OAAOuB,UAAW/tC,KAAKq1B,WAAWpyB,OAASjD,KAAKwsC,OAAOwB,YAUzKE,WACIluC,KAAKmuC,MAAMD,SAASluC,MAOxB4zC,SAASC,EAAMC,GACX,OAAOC,WAAW5zB,WAAW6zB,iBAAiBH,EAAM,MAAMI,iBAAiBH,IAQ/EI,6BACI,MAAM5xC,EAAQtC,KACRm0C,EAAY7xC,EAAMrC,OAAOk3B,WAC/B70B,EAAMrC,OAAOkD,MAAMixC,QAAU,OAC7B,IAAIC,EAAUr0C,KAAK4zC,SAASO,EAAW,YAAc,EAAGG,EAASt0C,KAAK4zC,SAAStxC,EAAMrC,OAAQ,iBAAmB,EAAGs0C,EAAKv0C,KAAK4zC,SAASO,EAAW,iBAAmBE,EAASG,EAAKx0C,KAAK4zC,SAASO,EAAW,kBAAoBE,EAASI,EAAKz0C,KAAK4zC,SAASO,EAAW,gBAAkBE,EAASrD,EAAKhxC,KAAK4zC,SAASO,EAAW,mBAAqBE,EAASK,EAAK10C,KAAK4zC,SAAStxC,EAAMrC,OAAQ,sBAAwBq0C,EAAQK,EAAK30C,KAAK4zC,SAAStxC,EAAMrC,OAAQ,uBAAyBq0C,EAAQM,EAAK50C,KAAK4zC,SAAStxC,EAAMrC,OAAQ,qBAAuBq0C,EAAQO,EAAK70C,KAAK4zC,SAAStxC,EAAMrC,OAAQ,wBAA0Bq0C,EACvlBzpB,EAAIspB,EAAUpxC,YACd8wB,EAAIsgB,EAAUjxC,aAElB,OADAZ,EAAMrC,OAAOkD,MAAMixC,QAAU,QACtB,CAAEvxC,MAAOgoB,EAAI0pB,EAAKC,EAAKE,EAAKC,EAAI1xC,OAAQ4wB,EAAI4gB,EAAKzD,EAAK4D,EAAKC,GAYtEryC,eACI,MAAMF,EAAQtC,KACR80C,EAAW,CAACjqB,EAAGgJ,KACjBhJ,GAAKvoB,EAAMkqC,OAAOqB,kBAClBha,GAAKvxB,EAAMkqC,OAAOsB,mBAClBxrC,EAAM+yB,WAAWxyB,MAAQgoB,EACzBvoB,EAAM+yB,WAAWpyB,OAAS4wB,EACtBvxB,EAAMrC,kBAAkB80C,mBACxBzyC,EAAMrC,OAAO4C,MAAQgoB,EACrBvoB,EAAMrC,OAAOgD,OAAS4wB,GAEjBvxB,EAAMrC,kBAAkB+0C,YAC7Bh1C,KAAKC,OAAOmD,aAAa,UAAW,OAAOynB,KAAKgJ,KAChD7zB,KAAKC,OAAOmD,aAAa,QAAS,GAAGynB,KACrC7qB,KAAKC,OAAOmD,aAAa,SAAU,GAAGywB,KACtC7zB,KAAKowC,KAAK/sC,QAAQf,EAAM+yB,YACxBr1B,KAAKkwC,aAAa/sC,MAAMN,MAAQ,GAAGgoB,MACnC7qB,KAAKkwC,aAAa/sC,MAAMF,OAAS,GAAG4wB,OAGpCz1B,QAAQq1C,MAAM,0GAEdnxC,EAAMkqC,OAAOY,kBAGb9qC,EAAM2yC,cAAa,IAG3B,GAAI3yC,EAAMkqC,OAAOG,WAAarqC,EAAMkqC,OAAOK,YAAa,CAEpD,IAAIhqC,EAAQsd,WAAWxf,YAAcT,SAAS4C,gBAAgBC,aAAe7C,SAAS8C,KAAKD,YACvFE,EAASkd,WAAWvf,aAAeV,SAAS4C,gBAAgBI,cAAgBhD,SAAS8C,KAAKE,aAC9FZ,EAAMrC,OAAOkD,MAAMtC,SAAW,WAC9ByB,EAAMrC,OAAOkD,MAAMN,MAAQP,EAAMkqC,OAAOqB,kBAAoBhrC,EAAQ,KACpEP,EAAMrC,OAAOkD,MAAMF,OAASX,EAAMkqC,OAAOqB,kBAAoB5qC,EAAS,KACtEX,EAAMrC,OAAOkD,MAAMmtC,IAAM,MACzBhuC,EAAMrC,OAAOkD,MAAMktC,KAAO,MAC1ByE,EAASjyC,EAAOI,QAEf,GAAIX,EAAMkqC,OAAOK,YAAa,CAE/BvqC,EAAMrC,OAAOkD,MAAMtC,SAAW,WAC9B,MAAMq0C,EAAQl1C,KAAKk0C,6BACnB5xC,EAAMrC,OAAOkD,MAAMN,MAAQP,EAAMkqC,OAAOqB,kBAAoBqH,EAAMryC,MAAQ,KAC1EP,EAAMrC,OAAOkD,MAAMF,OAASX,EAAMkqC,OAAOsB,mBAAqBoH,EAAMjyC,OAAS,KAC7EX,EAAMrC,OAAOkD,MAAMmtC,IAAM,KACzBhuC,EAAMrC,OAAOkD,MAAMktC,KAAO,KAC1ByE,EAASI,EAAMryC,MAAOqyC,EAAMjyC,aAG5BX,EAAMrC,OAAOkD,MAAMN,MAAQ,KAC3BP,EAAMrC,OAAOkD,MAAMF,OAAS,KAC5B6xC,EAASxyC,EAAMkqC,OAAOiB,mBAAoBnrC,EAAMkqC,OAAOmB,qBAEvDrrC,EAAMkqC,OAAOgB,gBACblrC,EAAMwuC,SAWdqE,wBAAwBtb,GACpB,IAAK,IAAI1xB,KAAKnI,KAAK5C,SACX4C,KAAK5C,SAAS+K,GAAGuc,KAAKnC,YAAcsX,EAAQ1S,aAAannB,KAAK5C,SAAS+K,MACvEnI,KAAK5C,SAAS+K,GAAGuc,KAAKlC,YAAa,GAgB/CuwB,gBAAgBtoB,EAAO2qB,GACnB,MAAM9yC,EAAQtC,UACU,IAAbo1C,IACPA,EAAY,GAEhBA,GAAa9yC,EAAM8tC,KAAKvqB,MAAMnnB,EAG9B,IAAK,IAAIw0C,EAAS,EAAGA,EAAS5wC,EAAMlF,SAASqB,OAAQy0C,IAAU,CAC3D,IAAIxlC,EAAOpL,EAAMlF,SAAS81C,GAC1B,IAAKxlC,EAAKgX,KAAKpC,WAAa5U,EAAKgX,KAAKnC,aAAe7U,EAAK6D,SAASkZ,GAAS2qB,EAExE,OAAO,IAAI7I,EAAgB8I,UAAU3nC,EAAM6+B,EAAgB8I,UAAUC,QAAQC,UAAUrC,GAG/F,OAAO,KAWXsC,YAAY7xB,GAER,MAAMrhB,EAAQtC,KAGd,IAAI4H,EAAI5H,KAAK+yC,gBAAgBzwC,EAAM0wC,uBAAuBrvB,EAAEO,OAAOujB,IAAI/oC,EAAGilB,EAAEO,OAAOujB,IAAIlpC,GAAIguC,EAAgBkJ,wBAA0BtuC,KAAK6I,IAAI1N,EAAMkqC,OAAOuB,UAAWzrC,EAAMkqC,OAAOwB,YACnL,GAAIpmC,EAEA,GADAtF,EAAMlF,SAASwK,EAAEsrC,QAAQlvB,UAAUN,eAAeC,GAC9C3jB,KAAK01C,YAAc11C,KAAK01C,WAAW1P,OAAO,SAAU,CACpD,GAAkB,SAAdp+B,EAAEqrC,SAAqB,CACvB,IAAIvlC,EAAOpL,EAAMqzC,MAAM/tC,EAAEguC,QAAQlmB,aAAa9nB,EAAEiuC,QAAQjoB,aAAahmB,EAAEkuC,KACnEpoC,EAAKgX,KAAKnC,aACV7U,EAAKgX,KAAKlC,YAAc9U,EAAKgX,KAAKlC,iBAErC,GAAkB,UAAd5a,EAAEqrC,SAAsB,CAC7B,IAAIvlC,EAAOpL,EAAMlF,SAASwK,EAAEsrC,QACxBxlC,EAAKgX,KAAKnC,aACV7U,EAAKgX,KAAKlC,YAAc9U,EAAKgX,KAAKlC,YAE1ClgB,EAAMwuC,cAED9wC,KAAK01C,WAAW1P,OAAO,OAC5B1jC,EAAMlF,SAASwK,EAAEsrC,QAAQxuB,KAAK+nB,kBAAoBnqC,EAAMlF,SAASwK,EAAEsrC,QAAQxuB,KAAK+nB,iBAChFnqC,EAAMwuC,eAGT,GAA2B,MAAvBxuC,EAAMkuC,cAAuB,CAClC,MAAM9iC,EAAOpL,EAAM0wC,uBAAuBrvB,EAAEO,OAAOujB,IAAI/oC,EAAGilB,EAAEO,OAAOujB,IAAIlpC,GACvE+D,EAAMkuC,cAAcpzC,SAAS8H,KAAK,IAAIyP,EAAOjH,EAAKhP,EAAGgP,EAAKnP,IAC1D+D,EAAMwuC,UAcdkC,uBAAuBt0C,EAAGH,GACtB,MAAO,CACHG,GAAIA,EAAIsB,KAAKwsC,OAAOuB,UAAY/tC,KAAKwsC,OAAOrF,SAAWnnC,KAAKwsC,OAAO3lB,OACnEtoB,GAAIA,EAAIyB,KAAKwsC,OAAOwB,UAAYhuC,KAAKwsC,OAAOpF,SAAWpnC,KAAKwsC,OAAO1lB,QAe3EivB,oBAAoBr3C,EAAGH,GACnB,MAAO,CAAEG,EAAGA,EAAIsB,KAAKwsC,OAAOuB,UAAY/tC,KAAKwsC,OAAOrF,QAAS5oC,EAAGA,EAAIyB,KAAKwsC,OAAOwB,UAAYhuC,KAAKwsC,OAAOpF,SAU5G4O,yBACI,OAAOh2C,KAAKywC,gBAAgBhyC,OAYhCw3C,iBAAiBtyB,GACb,MAAMrhB,EAAQtC,KACd,GAAgB,GAAZ2jB,EAAEqjB,OAAN,CAEA,IAAIp/B,EAAItF,EAAMywC,gBAAgBzwC,EAAM0wC,uBAAuBrvB,EAAEO,OAAOujB,IAAI/oC,EAAGilB,EAAEO,OAAOujB,IAAIlpC,GAAIguC,EAAgBkJ,wBAA0BtuC,KAAK6I,IAAI1N,EAAMkqC,OAAOuB,UAAWzrC,EAAMkqC,OAAOwB,YACpL,GAAKpmC,EAAL,CAGA,GAAkB,UAAdA,EAAEqrC,UAAwB3wC,EAAMlF,SAASwK,EAAEsrC,QAAQxuB,KAAKlC,WAGxD,IAAK,IAAIra,EAAI,EAAGA,EAAI7F,EAAMlF,SAASqB,OAAQ0J,IACnC7F,EAAMlF,SAAS+K,GAAGuc,KAAKlC,aACvBlgB,EAAMmuC,gBAAgBvrC,KAAK,IAAIqnC,EAAgB8I,UAAU/yC,EAAMlF,SAAS+K,GAAIokC,EAAgB8I,UAAUC,QAAQC,UAAUptC,IACxH7F,EAAMlF,SAAS+K,GAAG6b,UAAUF,mBAAmBH,QAItD,CAED,IAAKrhB,EAAMlF,SAASwK,EAAEsrC,QAAQxuB,KAAKpC,UAC/B,OACJhgB,EAAMmuC,gBAAgBvrC,KAAK0C,GACT,SAAdA,EAAEqrC,SACF3wC,EAAMqzC,MAAM/tC,EAAEguC,QAAQlmB,aAAa9nB,EAAEiuC,QAAQjoB,aAAahmB,EAAEkuC,KAAK9xB,UAAUF,mBAAmBH,GAC3E,UAAd/b,EAAEqrC,UACP3wC,EAAMlF,SAASwK,EAAEsrC,QAAQlvB,UAAUF,mBAAmBH,GAE9DrhB,EAAMwuC,WAaVoF,iBAAiBvyB,GACb,MAAMrhB,EAAQtC,KACRm2C,EAAgB,CAAEz3C,EAAGilB,EAAEO,OAAO6jB,WAAWrpC,EAAGH,EAAGolB,EAAEO,OAAO6jB,WAAWxpC,GAUzE,GATAolB,EAAEO,OAAO6jB,WAAWrpC,GAAK4D,EAAMkqC,OAAOuB,UACtCpqB,EAAEO,OAAO6jB,WAAWxpC,GAAK+D,EAAMkqC,OAAOwB,UAQlChuC,KAAK01C,WAAW1P,OAAO,QAAUhmC,KAAK01C,WAAW1P,OAAO,YACxD1jC,EAAM0vC,UAAU1vC,EAAM8tC,KAAKhb,OAAO33B,QAAQ2D,IAAIuiB,EAAEO,OAAO6jB,aACvDzlC,EAAMwuC,cAQN,IAAK,IAAI3oC,KAFTwb,EAAEO,OAAO6jB,WAAWrpC,GAAK4D,EAAM8tC,KAAKvqB,MAAMnnB,EAC1CilB,EAAEO,OAAO6jB,WAAWxpC,GAAK+D,EAAM8tC,KAAKvqB,MAAMtnB,EAC5B+D,EAAMmuC,gBAAiB,CACjC,IAAI7oC,EAAItF,EAAMmuC,gBAAgBtoC,GAC9B,GAAkB,SAAdP,EAAEqrC,SACF3wC,EAAMqzC,MAAM/tC,EAAEguC,QAAQzpB,eAAevkB,EAAEiuC,OAAQjuC,EAAEkuC,IAAK,IAAInhC,EAAOgP,EAAEO,OAAO6jB,WAAWrpC,EAAGilB,EAAEO,OAAO6jB,WAAWxpC,IAC5G+D,EAAMqzC,MAAM/tC,EAAEguC,QAAQlmB,aAAa9nB,EAAEiuC,QAAQjoB,aAAahmB,EAAEkuC,KAAK9xB,UAAUH,cAAcF,QAExF,GAAkB,UAAd/b,EAAEqrC,SAAsB,CAC7B,IAAK3wC,EAAMlF,SAASwK,EAAEsrC,QAAQxuB,KAAKpC,UAC/B,SACJhgB,EAAMlF,SAASwK,EAAEsrC,QAAQ9xC,IAAIuiB,EAAEO,OAAO6jB,YACtCzlC,EAAMlF,SAASwK,EAAEsrC,QAAQlvB,UAAUH,cAAcF,IAK7DA,EAAEO,OAAO6jB,WAAWrpC,EAAIy3C,EAAcz3C,EACtCilB,EAAEO,OAAO6jB,WAAWxpC,EAAI43C,EAAc53C,EACtC+D,EAAMwuC,SAYVsF,eAAezyB,GACX,MAAMrhB,EAAQtC,KACd,GAAgB,GAAZ2jB,EAAEqjB,OAAN,CAKA,IAAK,IAAI7+B,KAHJwb,EAAEO,OAAO4jB,YACVxlC,EAAMkzC,YAAY7xB,GAERrhB,EAAMmuC,gBAAiB,CACjC,IAAI7oC,EAAItF,EAAMmuC,gBAAgBtoC,GACZ,SAAdP,EAAEqrC,SACF3wC,EAAMqzC,MAAM/tC,EAAEguC,QAAQlmB,aAAa9nB,EAAEiuC,QAAQjoB,aAAahmB,EAAEkuC,KAAK9xB,UAAUD,iBAAiBJ,GAEzE,UAAd/b,EAAEqrC,UACP3wC,EAAMlF,SAASwK,EAAEsrC,QAAQlvB,UAAUD,iBAAiBJ,GAG5DrhB,EAAMmuC,gBAAkB,GACxBnuC,EAAMwuC,UAYVuF,kBAAkB1yB,GACd,IAAI2yB,EAAW,KAEf,MAAMh0C,EAAQtC,KACRu2C,EAAK5yB,EACP4yB,EAAGC,OAAS,EACZl0C,EAAM4vC,QAAQ5vC,EAAMkqC,OAAO3lB,OAASyvB,EAAUh0C,EAAMkqC,OAAO1lB,OAASwvB,EAAU,IAAI3hC,EAAOgP,EAAEO,OAAOujB,IAAI/oC,EAAGilB,EAAEO,OAAOujB,IAAIlpC,IAEjHg4C,EAAGC,OAAS,GACjBl0C,EAAM4vC,QAAQ5vC,EAAMkqC,OAAO3lB,OAASyvB,EAAUh0C,EAAMkqC,OAAO1lB,OAASwvB,EAAU,IAAI3hC,EAAOgP,EAAEO,OAAOujB,IAAI/oC,EAAGilB,EAAEO,OAAOujB,IAAIlpC,IAE1HolB,EAAE8yB,iBACFn0C,EAAMwuC,SASVmE,aAAanE,GACT9wC,KAAKowC,KAAKhb,OAAO12B,EACbsB,KAAKy7B,KAAKrG,OAAO12B,EACbsB,KAAKwsC,OAAOrF,QACRnnC,KAAKq1B,WAAWxyB,OAAS7C,KAAKwsC,OAAOa,qBAAuB,KACxErtC,KAAKowC,KAAKhb,OAAO72B,EACbyB,KAAKy7B,KAAKrG,OAAO72B,EACbyB,KAAKwsC,OAAOpF,QACRpnC,KAAKq1B,WAAWpyB,QAAUjD,KAAKwsC,OAAOc,qBAAuB,KACrEwD,GACA9wC,KAAK8wC,SAUbkB,UAAU0E,GACN12C,KAAKowC,KAAKhb,OAAOn0B,IAAIy1C,GACrB12C,KAAKy7B,KAAKrG,OAAOn0B,IAAIy1C,GACrB12C,KAAKwsC,OAAOrF,QAAUuP,EAAUh4C,EAChCsB,KAAKwsC,OAAOpF,QAAUsP,EAAUn4C,EAWpC2zC,QAAQyE,EAAaC,EAAaC,GAC9B,IAAIC,EAAS92C,KAAKgzC,uBAAuB6D,EAAen4C,EAAGm4C,EAAet4C,GAC1EyB,KAAKowC,KAAKvqB,MAAMnnB,EAAIsB,KAAKy7B,KAAK5V,MAAMnnB,EAAIsB,KAAKwsC,OAAO3lB,OAAS1f,KAAKqG,IAAImpC,EAAa,KACnF32C,KAAKowC,KAAKvqB,MAAMtnB,EAAIyB,KAAKy7B,KAAK5V,MAAMtnB,EAAIyB,KAAKwsC,OAAO1lB,OAAS3f,KAAKqG,IAAIopC,EAAa,KACnF,IAAIG,EAAS/2C,KAAKgzC,uBAAuB6D,EAAen4C,EAAGm4C,EAAet4C,GACtEy4C,EAAah3C,KAAKowC,KAAKhb,OAAO12B,GAAKq4C,EAAOr4C,EAAIo4C,EAAOp4C,GAAKsB,KAAKowC,KAAKvqB,MAAMnnB,EAC1Eu4C,EAAaj3C,KAAKowC,KAAKhb,OAAO72B,GAAKw4C,EAAOx4C,EAAIu4C,EAAOv4C,GAAKyB,KAAKowC,KAAKvqB,MAAMtnB,EAC9EyB,KAAKgyC,UAAU,CAAEtzC,EAAGs4C,EAAYz4C,EAAG04C,IAEvCrG,wBACI,IAAItuC,EAAQtC,KA0BZ,GAzBIA,KAAKwsC,OAAOoC,YAEZ,IAAIvI,EAAarmC,KAAKkwC,aAAelwC,KAAKkwC,aAAelwC,KAAKC,QACzD2lC,MAAMjiB,IACPrhB,EAAM2zC,iBAAiBtyB,MAEtBf,MAAMe,IACPrhB,EAAM4zC,iBAAiBvyB,MAEtBoiB,IAAIpiB,IACLrhB,EAAM8zC,eAAezyB,MAIzBrhB,EAAMlE,QAAQC,IAAI,+BAElB2B,KAAKwsC,OAAOuC,iBAEZ,IAAI1I,EAAarmC,KAAKkwC,aAAelwC,KAAKkwC,aAAelwC,KAAKC,QAAQinC,OAAOvjB,IACzErhB,EAAM+zC,kBAAkB1yB,MAI5BrhB,EAAMlE,QAAQC,IAAI,qCAElB2B,KAAKwsC,OAAOqC,YAAa,CAEzB,MAAM/H,EAAUW,IACZ,MAAMnG,EAASh/B,EAAMrC,OAAOi3C,wBAC5B,MAAO,CAAEx4C,EAAG+oC,EAAI/oC,EAAI4iC,EAAO+O,KAAM9xC,EAAGkpC,EAAIlpC,EAAI+iC,EAAOgP,MAGvD,GAAyC,mBAA9BnwB,WAAwB,aAA+D,mBAApCA,WAA8B,kBACxF,IACI,IAAIg3B,EAAe,KACfC,EAAe,KACfC,EAAiB,KACjBC,EAAuB,KAC3B,MAAMC,EAAa,KACfJ,EAAe,KACfC,EAAe,KACfC,EAAiB,KACjBC,EAAuB,KACvBh1C,EAAMmuC,gBAAkB,IAEtB+G,EAAU,CACZC,WAAaC,IACT,GAA0B,GAAtBA,EAAIC,QAAQl5C,SACZ04C,EAAe,IAAIxiC,EAAOmyB,EAAO,CAAEpoC,EAAGg5C,EAAIC,QAAQ,GAAGC,QAASr5C,EAAGm5C,EAAIC,QAAQ,GAAGE,WAChFT,EAAe,IAAIziC,EAAOmyB,EAAO,CAAEpoC,EAAGg5C,EAAIC,QAAQ,GAAGC,QAASr5C,EAAGm5C,EAAIC,QAAQ,GAAGE,YAChFR,EAAiB/0C,EAAMywC,gBAAgBzwC,EAAM0wC,uBAAuBmE,EAAaz4C,EAAGy4C,EAAa54C,GAAIguC,EAAgBuL,wBAA0B3wC,KAAK6I,IAAI1N,EAAMkqC,OAAOuB,UAAWzrC,EAAMkqC,OAAOwB,cAC5I,UAA3BqJ,EAAepE,UAAsB,CACvD,IAAI8E,EAAiBz1C,EAAMlF,SAASi6C,EAAenE,QAC/C8E,EAAY,CACZ9zB,OAAQ,CACJsjB,cAAc,EACdO,WAAY,CAAErpC,EAAG,EAAGH,EAAG,GACvBupC,YAAY,EACZvB,aAAc6Q,EAAa35C,QAC3B+oC,aAAc4Q,EAAa35C,QAC3BmB,OAAQm5C,IAGhBz1C,EAAMmuC,gBAAkB,CAAC4G,GACzBU,EAAe/zB,UAAUF,mBAAmBk0B,KAIxDC,UAAYP,IACR,GAA0B,GAAtBA,EAAIC,QAAQl5C,QAAe44C,EAAgB,CAC3CK,EAAIjB,iBACJiB,EAAIQ,kBACJ,IAAI5Q,EAAMR,EAAO,CAAEpoC,EAAGg5C,EAAIC,QAAQ,GAAGC,QAASr5C,EAAGm5C,EAAIC,QAAQ,GAAGE,UAC5DM,EAAQ71C,EAAM0wC,uBAAuB1L,EAAI5oC,EAAG4oC,EAAI/oC,GAChD0b,EAAO,IAAItF,EAAOrS,EAAM0wC,uBAAuBmE,EAAaz4C,EAAGy4C,EAAa54C,IAAIqnB,WAAWuyB,GAC/F,GAA+B,UAA3Bd,EAAepE,SAAsB,CACrC,IAAK3wC,EAAMlF,SAASi6C,EAAenE,QAAQxuB,KAAKpC,UAC5C,OACJhgB,EAAMlF,SAASi6C,EAAenE,QAAQ9xC,IAAI6Y,GAC1C,IAAI89B,EAAiBz1C,EAAMlF,SAASi6C,EAAenE,QAC/C8E,EAAY,CACZxQ,cAAc,EACdtjB,OAAQ,CACJ6jB,WAAY9tB,EAAKxc,QACjBqqC,YAAY,EACZvB,aAAc6Q,EAAa35C,QAC3B+oC,aAAc4Q,EAAa35C,QAAQ2D,IAAI6Y,GACvCrb,OAAQm5C,IAGhBA,EAAe/zB,UAAUH,cAAcm0B,GACvC11C,EAAMwuC,SAEVqG,EAAe,IAAIxiC,EAAO2yB,QAEC,GAAtBoQ,EAAIC,QAAQl5C,SAEjBi5C,EAAIjB,iBACJiB,EAAIQ,kBACJ51C,EAAM0vC,UAAU1vC,EAAM8tC,KAAKhb,OACtB33B,QACAsnB,MAAM2yB,EAAIU,OAAQV,EAAIlB,SAC3Bl0C,EAAMwuC,WAGduH,SAAWX,IAEP,GAAIL,GAA6C,UAA3BA,EAAepE,SAAsB,CACvD,IAAI8E,EAAiBz1C,EAAMlF,SAASi6C,EAAenE,QAC/C8E,EAAY,CACZxQ,cAAc,EACdtjB,OAAQ,CACJ6jB,WAAY,CAAErpC,EAAG,EAAGH,EAAG,GACvBupC,YAAY,EACZvB,aAAc6Q,EAAa35C,QAC3B+oC,aAAc4Q,EAAa35C,QAC3BmB,OAAQm5C,IAIZZ,GAAgBC,GAAgBA,EAAa7lC,SAAS4lC,GAAgB,KAEtEY,EAAe/zB,UAAUN,eAAes0B,GAGxCD,EAAe/zB,UAAUD,iBAAiBi0B,GAGlDT,KAEJe,YAAcZ,IACVH,KAEJgB,gBAAkBb,IACdJ,EAAuBh1C,EAAM8tC,KAAKvqB,MAAMpoB,SAE5C+6C,cAAgBd,IACZJ,EAAuB,MAE3BmB,MAAQf,IAEJ,MAAMgB,EAAU,IAAI/jC,EAAO+iC,EAAIC,QAAQgB,KAAK,GAAGf,QAASF,EAAIC,QAAQgB,KAAK,GAAGd,SACtEe,EAAU,IAAIjkC,EAAO+iC,EAAIC,QAAQgB,KAAK,GAAGf,QAASF,EAAIC,QAAQgB,KAAK,GAAGd,SACtE9xB,EAAS,IAAI/d,EAAK0wC,EAASE,GAAS3uB,OAAO,IACjD3nB,EAAM4vC,QAAQoF,EAAqB54C,EAAIg5C,EAAImB,KAAMvB,EAAqB/4C,EAAIm5C,EAAImB,KAAM9yB,GACpFzjB,EAAMwuC,WAGVpwC,OAA0B,kBAC1BA,OAA0B,kBAAEV,KAAKkwC,aAAelwC,KAAKkwC,aAAelwC,KAAKC,OAAQu3C,GAEjF,IAAI,IAAYx3C,KAAKkwC,aAAelwC,KAAKkwC,aAAelwC,KAAKC,OAAQu3C,GAE7E,MAAO7zB,GACHvlB,QAAQq1C,MAAM,qCACdr1C,QAAQq1C,MAAM9vB,QAGbxD,WAAmB,QAAoC,mBAAxBA,WAAmB,OACvD/hB,QAAQq1C,MAAM,+FAIdr1C,QAAQgM,KAAK,wFAIjB9H,EAAMlE,QAAQC,IAAI,+BAElB2B,KAAKwsC,OAAOsC,WAEZ9uC,KAAK01C,WAAa,IAAIrR,EAAW,CAAEO,UAAU,IACxCgB,KAAK,UAAU,WAChBtjC,EAAMqxC,gBAAe,MAEpB/N,KAAK,SAAS,WACftjC,EAAMkuC,cAAgB,IAAI3hC,EAC1BvM,EAAMwuC,YAEL/K,GAAG,SAAS,WAEc,MAAvBzjC,EAAMkuC,gBAEVluC,EAAM6yC,wBAAwB7yC,EAAMkuC,eACpCluC,EAAMkuC,cAAgB,KACtBluC,EAAMwuC,aAIVxuC,EAAMlE,QAAQC,IAAI,kCAY1By6C,UAAUC,GAGN,GAAI54B,WAAkB,OAA6C,mBAAjCA,WAAkB,MAAE24B,UAClD,OAAO34B,WAAkB,MAAE24B,UAAU94C,KAAM+4C,GAE3C,KAAM,8GAIlBxM,EAAgBmB,qBAAuB,KAEvCnB,EAAgBqB,sBAAwB,IAExCrB,EAAgBkJ,wBAA0B,EAE1ClJ,EAAgBuL,wBAA0B,GAK1CvL,EAAgB8I,YAAa/vC,EAAK,MAC1B2F,YAAY0tC,EAAM1F,GACdjzC,KAAK24C,KAAOA,EACZ34C,KAAKizC,SAAWA,EAEpB+F,WACI,OAAOh5C,KAAKizC,UAAY1G,EAAgB8I,UAAUC,OAEtDC,UAAUrC,GAEN,OADAlzC,KAAKkzC,OAASA,EACPlzC,QAGZs1C,OAAS,SACZhwC,GAIJinC,EAAgB/lB,MAAQ,CASpByyB,gBAAiB,CAACn/B,EAAMo/B,KACpB,IAAK,IAAI/iB,KAAK+iB,EACV,GAAKA,EAAUtuC,eAAeurB,GAE9B,GAAIrc,EAAKlP,eAAeurB,GAAI,CACxB,IAAIgjB,SAAar/B,EAAKqc,GACtB,IACe,WAAPgjB,EACAr/B,EAAKqc,KAAOhH,KAAKllB,MAAMivC,EAAU/iB,IACrB,UAAPgjB,EACLr/B,EAAKqc,GAAgC,EAA3BhH,KAAKllB,MAAMivC,EAAU/iB,KACnB,YAAPgjB,GAA4BD,EAAU/iB,GAC3Crc,EAAKqc,GAAK+iB,EAAU/iB,IAI5B,MAAOxS,GACHvlB,QAAQq1C,MAAM,gBAAiBtd,EAAG+iB,EAAU/iB,GAAIxS,SAIpD7J,EAAKqc,GAAK+iB,EAAU/iB,GAG5B,OAAOrc,GAYXu4B,YAAa,CAAC3N,EAAS7d,EAAQC,KAC3B4d,EAAQvhC,MAAM,oBAAsB,MAEhCuhC,EAAQvhC,MAAMi2C,UADJ,GAAVvyB,GAA2B,GAAVC,EACS,KAEA,SAAWD,EAAS,IAAMC,EAAS,KAGrE4lB,MAAO,CAQHE,IAAK,CAAC9d,EAAKzM,EAAKg3B,IACPvqB,EAAIlkB,eAAeyX,QAED,IAAZyM,EAAIzM,GACJg3B,EACJvqB,EAAIzM,GAHAg3B,EAafpV,IAAK,CAACnV,EAAKzM,EAAKg3B,KACZ,IAAKvqB,EAAIlkB,eAAeyX,GACpB,OAAOg3B,EACX,GAAwB,iBAAbvqB,EAAIzM,GACX,OAAOyM,EAAIzM,GAEX,IACI,OAA8B,EAAvB8M,KAAKllB,MAAM6kB,EAAIzM,IAE1B,MAAOsB,GACH,OAAO01B,IAYnBvM,KAAM,CAAChe,EAAKzM,EAAKg3B,KACb,IAAKvqB,EAAIlkB,eAAeyX,GACpB,OAAOg3B,EACX,GAAuB,kBAAZvqB,EAAIzM,GACX,OAAOyM,EAAIzM,GAEX,IACI,QAAS8M,KAAKllB,MAAM6kB,EAAIzM,IAE5B,MAAOsB,GACH,OAAO01B,IAYnB5K,KAAM,CAAC3f,EAAKzM,EAAKg3B,IACRvqB,EAAIlkB,eAAeyX,GAEA,mBAAbyM,EAAIzM,GACJg3B,EACJvqB,EAAIzM,GAHAg3B,GAenB9G,2BAA6Bpf,IACzB,IAAK,IAAIhrB,EAAI,EAAGA,EAAIgrB,EAAWzD,aAAajxB,OAAQ0J,IAEhDgrB,EAAWzD,aAAavnB,GAAGojB,WAAWvH,UAAUZ,iBAAgB,SAAUO,GACtE,IAAIkyB,EAAS1iB,EAAWtD,wBAAwBlM,EAAEO,OAAOtlB,QACzDu0B,EAAWzD,aAAammB,GAAQtqB,WAAWxG,OAAOpB,EAAEO,OAAO6jB,WAAWrpC,GAAIilB,EAAEO,OAAO6jB,WAAWxpC,GAC9F40B,EAAWhH,eAAwB,EAAT0pB,EAAY1iB,EAAWzH,YAAa/H,EAAEO,OAAO6jB,YACvE5U,EAAWjH,sBAEfiH,EAAWzD,aAAavnB,GAAGqjB,kBAAkBxH,UAAUZ,iBAAgB,SAAUO,GAC7E,IAAIkyB,EAAS1iB,EAAWpD,+BAA+BpM,EAAEO,OAAOtlB,QAC3Du0B,EAAWzD,aAAammB,GAAQtqB,WAAW7G,KAAK+nB,mBAErDtZ,EAAWzB,8BAAuC,EAATmkB,GAAY,GACrD,GAEA1iB,EAAWjH,uBAEfiH,EAAWzD,aAAavnB,GAAGsjB,gBAAgBzH,UAAUZ,iBAAgB,SAAUO,GAC3E,IAAIkyB,EAAS1iB,EAAWnD,6BAA6BrM,EAAEO,OAAOtlB,QACzDu0B,EAAWzD,aAAammB,EAAS1iB,EAAWzD,aAAajxB,QAAQlB,SAASmnB,KAAK+nB,mBAEpFtZ,EAAWvD,4BAAqC,EAATimB,GAAY,GACnD,GAEA1iB,EAAWjH,uBAEX/jB,EAAI,GAAKgrB,EAAWzD,aAAajxB,QAGjC00B,EAAWzD,aAAayD,EAAWzD,aAAajxB,OAAS,GAAGlB,SAASymB,UAAUZ,iBAAgB,SAAUO,GACrG,IAAKwP,EAAW1D,eAAgB,CAC5B,IAAIomB,EAAS1iB,EAAWrD,sBAAsBnM,EAAEO,OAAOtlB,QACvDu0B,EAAWhH,eAAwB,EAAT0pB,EAAY1iB,EAAWvH,kBAAmB,IAAIjX,EAAO,CAAEjW,EAAGilB,EAAEO,OAAO6jB,WAAWrpC,EAAGH,EAAGolB,EAAEO,OAAO6jB,WAAWxpC,KAEtI40B,EAAWjH,wBGhgExB,MAAMotB,EAITruC,cACI7M,QAAQgM,KAAK,wEAUjBmvC,MAAM7I,EAAW3zC,GACb,IAAIy8C,EAAK,KAEL55B,EAAS,GAmCb,IAAK,IAAIzX,KAlCTyX,EAAO1a,KAAK,4CACZ0a,EAAO1a,KAAK,eAAiBnI,EAAQs4B,WAAWxyB,MAAQ,aAAe9F,EAAQs4B,WAAWpyB,OAAS,KACnG2c,EAAO1a,KAAK,cACZ0a,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAKnI,EAAQs4B,WAAWxyB,MAAMwjB,YACrCzG,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAKnI,EAAQs4B,WAAWpyB,OAAOojB,YACtCzG,EAAO1a,KAAK,KACZ0a,EAAO1a,KAAK,0CACZ0a,EAAO1a,KAAKu0C,cACZ75B,EAAO1a,KAAKu0C,eACZ75B,EAAO1a,KAAKu0C,mDACZ75B,EAAO1a,KAAKu0C,8EACZ75B,EAAO1a,KAAKu0C,yEACZ75B,EAAO1a,KAAKu0C,2EACZ75B,EAAO1a,KAAKu0C,0EACZ75B,EAAO1a,KAAKu0C,uEACZ75B,EAAO1a,KAAKu0C,yEACZ75B,EAAO1a,KAAKu0C,+EACZ75B,EAAO1a,KAAKu0C,gBACZ75B,EAAO1a,KAAKu0C,eACZ75B,EAAO1a,KAAKu0C,wBACR18C,EAAQ87C,MAAQ97C,EAAQq4B,UACxBxV,EAAO1a,KAAK,gBACRnI,EAAQ87C,MACRj5B,EAAO1a,KAAK,SAAWnI,EAAQ87C,KAAKn6C,EAAI,IAAM3B,EAAQ87C,KAAKt6C,EAAI,KAC/DxB,EAAQq4B,QACRxV,EAAO1a,KAAK,cAAgBnI,EAAQq4B,OAAO12B,EAAI,IAAM3B,EAAQq4B,OAAO72B,EAAI,KAC5EqhB,EAAO1a,KAAK,MAEhB0a,EAAO1a,KAAK,OACEwrC,EAAW,CACrB,IAAInmC,EAAImmC,EAAUvoC,GACU,mBAAjBoC,EAAE+b,aACT1G,EAAO1a,KAAKu0C,QACZ75B,EAAO1a,KAAKqF,EAAE+b,YAAY,CAAE,UAAa/b,EAAE+Z,aAC3C1E,EAAO1a,KAAKs0C,IAGZp7C,QAAQgM,KAAK,uEAAyEG,EAAE+Z,WAKhG,OAFA1E,EAAO1a,KAAKu0C,YACZ75B,EAAO1a,KAAK,YACL0a,EAAOzV,KAAK,O,gOClFpB,MAAMuvC,EAAM,YAAc,IAAK,GAAI,IAC7BC,EAAO,YAAc,IAAK,GAAI,KAC9BC,EAAS,YAAc,IAAK,GAAI,KAChCC,EAAa,YAAc,IAAK,GAAI,KACpCC,EAAS,YAAc,GAAI,GAAI,KAC/BC,EAAO,YAAc,GAAI,IAAK,KAC9BC,EAAY,YAAc,EAAG,IAAK,KAClCC,EAAO,YAAc,EAAG,IAAK,KAC7BC,EAAO,YAAc,EAAG,IAAK,KAC7BC,EAAQ,YAAc,GAAI,IAAK,IAC/BC,EAAa,YAAc,IAAK,IAAK,IAUrCv4B,EAAY,CACrB63B,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAKSC,EAAoBC,IAC7B,MAAMz7B,EAASlU,MAAM2vC,EAAM77C,QAC3B,IAAK,IAAI0J,EAAI,EAAGA,EAAImyC,EAAM77C,OAAQ0J,IAC9B0W,EAAO1W,GAAK0Z,EAAUy4B,EAAMnyC,GAAK0Z,EAAUpjB,QAE/C,OAAOogB,I,sDC3CX,MACa+C,GAAoB,E,OAAAy4B,kBADV,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,K,oECKhD,MAAM14B,EAAqB,CAC9B,YAAc,EAAG,GAAI,GACrB,YAAc,EAAG,GAAI,IACrB,YAAc,EAAG,GAAI,IACrB,YAAc,EAAG,GAAI,IACrB,YAAc,GAAI,IAAK,IACvB,YAAc,EAAG,GAAI,IACrB,YAAc,EAAG,GAAI,IACrB,YAAc,GAAI,GAAI,IACtB,YAAc,EAAG,GAAI,IACrB,YAAc,EAAG,IAAK,IACtB,YAAc,GAAI,IAAK,O,+BCJpB,MAAM44B,EAUTtvC,cACIjL,KAAKw6C,EAAIx6C,KAAKy6C,EAAIz6C,KAAKwK,EAAI,EAC3BxK,KAAK6zB,EAAI7zB,KAAK6Q,EAAI7Q,KAAKipB,EAAI,EAC3BjpB,KAAKuP,EAAI,EAcbyS,SACI,MAAO,OAAS7a,KAAK2a,MAAM,IAAM9hB,KAAKw6C,GAAK,IAAMrzC,KAAK2a,MAAM,IAAM9hB,KAAKy6C,GAAK,IAAMtzC,KAAK2a,MAAM,IAAM9hB,KAAKwK,GAAK,IAajHkwC,UACI,MAAO,QAAUvzC,KAAK2a,MAAM,IAAM9hB,KAAKw6C,GAAK,IAAMrzC,KAAK2a,MAAM,IAAM9hB,KAAKy6C,GAAK,IAAMtzC,KAAK2a,MAAM,IAAM9hB,KAAKwK,GAAK,IAAMxK,KAAKuP,EAAI,IAWjIorC,MAAQ,OAAO36C,KAAKw6C,EAUpBI,QAAU,OAAO56C,KAAKy6C,EAUtBI,OAAS,OAAO76C,KAAKwK,EAWrBswC,SACI,MAAO,OAAS3zC,KAAK2a,MAAM,IAAM9hB,KAAK6zB,GAAK,IAAM1sB,KAAK2a,MAAM,IAAM9hB,KAAK6Q,GAAK,KAAO1J,KAAK2a,MAAM,IAAM9hB,KAAKipB,GAAK,KAWlH8xB,UACI,MAAO,QAAU5zC,KAAK2a,MAAM,IAAM9hB,KAAK6zB,GAAK,IAAM1sB,KAAK2a,MAAM,IAAM9hB,KAAK6Q,GAAK,KAAO1J,KAAK2a,MAAM,IAAM9hB,KAAKipB,GAAK,KAAO9hB,KAAK2a,MAAM9hB,KAAKuP,GAAK,IAW/IyrC,MAAQ,OAAOh7C,KAAK6zB,EAUpBonB,aAAe,OAAOj7C,KAAK6Q,EAU3BqqC,YAAc,OAAOl7C,KAAKipB,EAW1BkyB,SACI,MAAO,KACF,IAAMn7C,KAAKw6C,EAAI,GAAK,IAAM,IAAMrzC,KAAK2a,MAAM,IAAM9hB,KAAKw6C,GAAGn0B,SAAS,KAClE,IAAMrmB,KAAKy6C,EAAI,GAAK,IAAM,IAAMtzC,KAAK2a,MAAM,IAAM9hB,KAAKy6C,GAAGp0B,SAAS,KAClE,IAAMrmB,KAAKwK,EAAI,GAAK,IAAM,IAAMrD,KAAK2a,MAAM,IAAM9hB,KAAKwK,GAAG6b,SAAS,IAY3E+0B,QAAU,OAAOp7C,KAAKuP,EAGtB8rC,SAASr6B,GACL,GAAI,iBAAmBA,GAAKA,EAAEs6B,QAAQ,MAAQ,GAA0B72B,MAApBzD,EAAIu6B,SAASv6B,IAC7DhhB,KAAK6Q,GAAKmQ,EAAI,QACb,IAAI,iBAAmBA,EAGxB,MAAM,IAAI8M,MAAM,kDAFhB9tB,KAAK6Q,GAAKmQ,EAAI,IAGdhhB,KAAK6Q,EAAI,EACT7Q,KAAK6Q,EAAI,EACJ7Q,KAAK6Q,EAAI,IACd7Q,KAAK6Q,EAAI,GACb0pC,EAAMiB,UAAUC,SAASz7C,MAG7B07C,WAAW16B,GACPhhB,KAAKq7C,SAAS,IAAMr6B,GAGxB26B,QAAQ36B,GACJ,GAAI,iBAAmBA,GAAKA,EAAEs6B,QAAQ,MAAQ,GAA0B72B,MAApBzD,EAAIu6B,SAASv6B,IAC7DhhB,KAAKipB,GAAKjI,EAAI,QACb,IAAI,iBAAmBA,EAGxB,MAAM,IAAI8M,MAAM,kDAFhB9tB,KAAKipB,GAAKjI,EAAI,IAGdhhB,KAAKipB,EAAI,EACTjpB,KAAKipB,EAAI,EACJjpB,KAAKipB,EAAI,IACdjpB,KAAKipB,EAAI,GACbsxB,EAAMiB,UAAUC,SAASz7C,MAG7B47C,OAAO56B,GACHhhB,KAAK27C,QAAQ,IAAM36B,GAGvB66B,OAAO76B,GACH,GAAI,iBAAmBA,GAAKA,EAAEs6B,QAAQ,MAAQ,GAA0B72B,MAApBzD,EAAIu6B,SAASv6B,IAC7DhhB,KAAKuP,GAAKyR,EAAI,QACb,IAAI,iBAAmBA,EAGxB,MAAM,IAAI8M,MAAM,kDAFhB9tB,KAAKuP,GAAKyR,EAAI,IAGdhhB,KAAKuP,EAAI,EACTvP,KAAKuP,EAAI,EACJvP,KAAKuP,EAAI,IACdvP,KAAKuP,EAAI,GACbgrC,EAAMiB,UAAUC,SAASz7C,MAG7B87C,QAAQ96B,GACJhhB,KAAK67C,OAAO,IAAM76B,GAGtB+6B,KAAK/6B,GACD,GAAI,iBAAmBA,GAAKA,EAAEs6B,QAAQ,MAAQ,GAA0B72B,MAApBzD,EAAIu6B,SAASv6B,IAC7DhhB,KAAK6zB,GAAK7S,EAAI,QACb,IAAI,iBAAmBA,EAGxB,MAAM,IAAI8M,MAAM,kDAFhB9tB,KAAK6zB,GAAK7S,EAAI,IAGdhhB,KAAK6zB,EAAI,EACT7zB,KAAK6zB,EAAI,EACJ7zB,KAAK6zB,EAAI,IACd7zB,KAAK6zB,EAAI,GACb0mB,EAAMiB,UAAUC,SAASz7C,MAG7BkiB,kBAAkB85B,GACd,MAAMxsC,EAAI,IAAI+qC,EACd,IAAI0B,EACJ,GAAIC,UAAUz9C,OAAS,GAAKy9C,UAAUz9C,OAAS,EAC3C,MAAM,IAAIqvB,MAAM,2BAQpB,OAPAmuB,EAAY1B,EAAM4B,UAAUC,IAAIF,UAAU,GAAIA,UAAU,GAAIA,UAAU,IACtE1sC,EAAEgrC,EAAIyB,EAAU,GAChBzsC,EAAEirC,EAAIwB,EAAU,GAChBzsC,EAAEhF,EAAIyxC,EAAU,GACQ,GAApBC,UAAUz9C,SACV+Q,EAAED,EAAI2sC,UAAU,IACpB3B,EAAMiB,UAAUa,SAAS7sC,GAClBA,EAGX0S,kBAAkB85B,GACd,MAAMxsC,EAAI,IAAI+qC,EACd,IAAI0B,EACJ,GAAIC,UAAUz9C,OAAS,GAAKy9C,UAAUz9C,OAAS,EAC3C,MAAM,IAAIqvB,MAAM,2BAQpB,OAPAmuB,EAAY1B,EAAM4B,UAAUG,IAAIJ,UAAU,GAAIA,UAAU,GAAIA,UAAU,IACtE1sC,EAAEqkB,EAAIooB,EAAU,GAChBzsC,EAAEqB,EAAIorC,EAAU,GAChBzsC,EAAEyZ,EAAIgzB,EAAU,GACQ,GAApBC,UAAUz9C,SACV+Q,EAAED,EAAI2sC,UAAU,IACpB3B,EAAMiB,UAAUC,SAASjsC,GAClBA,EAGX0S,eAAe7lB,GACX,IAAqB4/C,EAAjBzsC,EAAI,IAAI+qC,EAMZ,GAHIl+C,GAASA,EAAMkgD,WAAW,OAC1BlgD,EAAQA,EAAMmgD,OAAO,IACzBjC,EAAMkC,UAAUC,SAASrgD,GACL,GAAhBA,EAAMoC,OACNw9C,EAAY1B,EAAM4B,UAAUC,IAAIb,SAASl/C,EAAMmgD,OAAO,EAAG,GAAKngD,EAAMmgD,OAAO,EAAG,GAAI,IAAKjB,SAASl/C,EAAMmgD,OAAO,EAAG,GAAKngD,EAAMmgD,OAAO,EAAG,GAAI,IAAKjB,SAASl/C,EAAMmgD,OAAO,EAAG,GAAKngD,EAAMmgD,OAAO,EAAG,GAAI,SAE/L,IAAoB,GAAhBngD,EAAMoC,OAIX,MAAM,IAAIqvB,MAAM,2BAHhBmuB,EAAY1B,EAAM4B,UAAUC,IAAIb,SAASl/C,EAAMmgD,OAAO,EAAG,GAAI,IAAKjB,SAASl/C,EAAMmgD,OAAO,EAAG,GAAI,IAAKjB,SAASl/C,EAAMmgD,OAAO,EAAG,GAAI,KAQrI,OAJAhtC,EAAEgrC,EAAIyB,EAAU,GAChBzsC,EAAEirC,EAAIwB,EAAU,GAChBzsC,EAAEhF,EAAIyxC,EAAU,GAChB1B,EAAMiB,UAAUa,SAAS7sC,GAClBA,EAYX0S,aAAay6B,GACT,QAAkB,IAAPA,EACP,OAAO,KACX,GAA+C,IAA1CA,EAAMA,EAAIC,OAAO3M,eAAexxC,OACjC,OAAO,KACX,GAAIk+C,EAAIJ,WAAW,KACf,OAAOhC,EAAMsC,QAAQF,EAAIG,UAAU,EAAGH,EAAIl+C,SAC9C,GAAIk+C,EAAIJ,WAAW,OAAQ,CACvB,IAAIQ,EAAQ,sDAAsDC,KAAKL,GAEvE,YAAuB,IAAZI,EAAM,GACNxC,EAAM0C,QAAQF,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAExCxC,EAAM0C,QAAQF,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAG7D,KAAM,8BAAgCJ,EAW9Cl/C,QACI,OAAO88C,EAAM0C,QAAQj9C,KAAKw6C,EAAGx6C,KAAKy6C,EAAGz6C,KAAKwK,EAAGxK,KAAKuP,GAatD2tC,YAAY1tC,EAAGoE,GAKX,OAJA5T,KAAKw6C,IAAMhrC,EAAEgrC,EAAIhrC,EAAEgrC,GAAK5mC,EACxB5T,KAAKy6C,IAAMjrC,EAAEirC,EAAIjrC,EAAEirC,GAAK7mC,EACxB5T,KAAKwK,IAAMgF,EAAEhF,EAAIgF,EAAEhF,GAAKoJ,EACxB5T,KAAKuP,IAAMC,EAAED,EAAIC,EAAED,GAAKqE,EACjB5T,MAIfu6C,EAAM4B,UAAY,CACdC,IAAK,YAAaJ,GACd,IAAImB,EAAI,GACR,GAAwB,GAApBjB,UAAUz9C,OACV,MAAO,GAGX,IAAK,IAAI0J,EAAI,EAAGA,EAAI+zC,UAAUz9C,OAAQ0J,IAAK,CACvC,IAAIqH,EAAI0sC,UAAU/zC,GAClB,GAAI,iBAAmBqH,GAAKA,EAAE8rC,QAAQ,MAAQ,EAAG,CAC7C,GAAyB72B,MAApBjV,EAAI+rC,SAAS/rC,IACd,MAAM,IAAIse,MAAM,cACpB,GAAIte,EAAI,GAAKA,EAAI,IACb,MAAM,IAAIse,MAAM,cACpBqvB,EAAEh1C,GAAKqH,EAAI,QAEV,CAED,GAAI,iBAAmBA,GAA0BiV,MAApBjV,EAAI+rC,SAAS/rC,IACtC,MAAM,IAAIse,MAAM,cACpB,GAAIte,EAAI,EACJ,MAAM,IAAIse,MAAM,cAEf,GAAIte,GAAK,GAAKA,EAAI,EACnB2tC,EAAEh1C,GAAKqH,MAEN,MAAIA,GAAK,GAAKA,EAAI,KAInB,MAAM,IAAIse,MAAM,eAAiBte,EAAI,KAHrC2tC,EAAEh1C,GAAKqH,EAAI,MAMvB,OAAO2tC,GAEXb,IAAK,YAAaN,GACd,GAAIE,UAAUz9C,OAAS,GAAKy9C,UAAUz9C,OAAS,EAC3C,MAAM,IAAIqvB,MAAM,6BACpB,IAAI+F,EAAIqoB,UAAU,GAAIrrC,EAAIqrC,UAAU,GAAIjzB,EAAIizB,UAAU,GACtD,GAAI,iBAAmBroB,GAA4BpP,MAAtBoP,EAAIkgB,WAAWlgB,IACxC,MAAM,IAAI/F,MAAM,sBACpB,GAAI+F,EAAI,GAAKA,EAAI,IACb,MAAM,IAAI/F,MAAM,6BAGpB,KAFW,GAAK+F,GAAGynB,QAAQ,MAAQ,GAAKznB,EAAI,IAAgC,IAAzB,GAAKA,GAAGynB,QAAQ,QAC/DznB,GAAK,KACL,iBAAmBhjB,GAAKA,EAAEyqC,QAAQ,MAAQ,EAAG,CAC7C,GAAyB72B,MAApB5T,EAAI0qC,SAAS1qC,IACd,MAAM,IAAIid,MAAM,6BACpB,GAAIjd,EAAI,GAAKA,EAAI,IACb,MAAM,IAAIid,MAAM,6BACpBjd,GAAK,SAEJ,GAAIA,EAAI,GAAKA,EAAI,EAClB,MAAM,IAAIid,MAAM,6BACpB,GAAI,iBAAmB7E,GAAKA,EAAEqyB,QAAQ,MAAQ,EAAG,CAC7C,GAAyB72B,MAApBwE,EAAIsyB,SAAStyB,IACd,MAAM,IAAI6E,MAAM,4BACpB,GAAI7E,EAAI,GAAKA,EAAI,IACb,MAAM,IAAI6E,MAAM,4BACpB7E,GAAK,SAEJ,GAAIA,EAAI,GAAKA,EAAI,EAClB,MAAM,IAAI6E,MAAM,4BACpB,MAAO,CAAC+F,EAAGhjB,EAAGoY,KAGtBsxB,EAAMkC,UAAY,CAIdC,SAAWrgD,IACP,GAAoB,GAAhBA,EAAMoC,QAA+B,GAAhBpC,EAAMoC,OAC3B,MAAM,IAAIqvB,MAAM,2BAA6BzxB,EAAMoC,OAAS,KAAOpC,GACvEA,EAAQA,EAAM4zC,cAEd,IAAK,IAAI9nC,EAAI,EAAGA,EAAI9L,EAAMoC,OAAQ0J,IAAK,CACnC,IAAIqH,EAAInT,EAAM+gD,WAAWj1C,GACzB,KAAOqH,GAAK,IAAMA,GAAK,IAAQA,GAAK,IAAMA,GAAK,KAC3C,MAAM,IAAIse,MAAM,iCAAiCzxB,kBAAsB8L,SAIvFoyC,EAAMiB,UAAY,CAMda,SAAWn+C,IACP,IAAIs8C,EAAIt8C,EAAMs8C,EACVC,EAAIv8C,EAAMu8C,EACVjwC,EAAItM,EAAMsM,EACVgD,EAAMrG,KAAKqG,IAAIgtC,EAAGC,EAAGjwC,GACrBwF,EAAM7I,KAAK6I,IAAIwqC,EAAGC,EAAGjwC,GAEzB,GADAtM,EAAM+qB,GAAKzb,EAAMwC,GAAO,EACpBxC,GAAOwC,EACP9R,EAAM21B,EAAI31B,EAAM2S,EAAI,MAEnB,CACD,IAAItG,EAAIiD,EAAMwC,EAEd,OADA9R,EAAM2S,EAAI3S,EAAM+qB,EAAI,GAAM1e,GAAK,EAAIiD,EAAMwC,GAAOzF,GAAKiD,EAAMwC,GACnDxC,GACJ,KAAKgtC,EACDt8C,EAAM21B,GAAK4mB,EAAIjwC,GAAKD,GAAKkwC,EAAIjwC,EAAI,EAAI,GACrC,MACJ,KAAKiwC,EACDv8C,EAAM21B,GAAKrpB,EAAIgwC,GAAKjwC,EAAI,EACxB,MACJ,KAAKC,EACDtM,EAAM21B,GAAK2mB,EAAIC,GAAKlwC,EAAI,EAGhCrM,EAAM21B,GAAK,IASnB4nB,SAAWv9C,IACP,IAAI21B,EAAI31B,EAAM21B,EACVhjB,EAAI3S,EAAM2S,EACVoY,EAAI/qB,EAAM+qB,EACd,GAAS,GAALpY,EACA3S,EAAMs8C,EAAIt8C,EAAMu8C,EAAIv8C,EAAMsM,EAAIye,MAE7B,CACD,IAAIo0B,EAAIp0B,EAAI,GAAMA,GAAK,EAAIpY,GAAKoY,EAAIpY,EAAIoY,EAAIpY,EACxCjJ,EAAI,EAAIqhB,EAAIo0B,EAChBn/C,EAAMs8C,EAAID,EAAMiB,UAAU8B,QAAQ11C,EAAGy1C,EAAGxpB,EAAI,EAAI,GAChD31B,EAAMu8C,EAAIF,EAAMiB,UAAU8B,QAAQ11C,EAAGy1C,EAAGxpB,GACxC31B,EAAMsM,EAAI+vC,EAAMiB,UAAU8B,QAAQ11C,EAAGy1C,EAAGxpB,EAAI,EAAI,KAGxDypB,QAAS,CAAC11C,EAAGy1C,EAAGzpC,KACRA,EAAI,IACJA,GAAK,GACLA,EAAI,IACJA,GAAK,GACLA,EAAI,EAAI,EACDhM,EAAc,GAATy1C,EAAIz1C,GAASgM,EACzBA,EAAI,GACGypC,EACPzpC,EAAI,EAAI,EACDhM,GAAKy1C,EAAIz1C,IAAM,EAAI,EAAIgM,GAAK,EAChChM,MCrfX21C,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBviC,IAAjBwiC,EACH,OAAOA,EAAathD,QAGrB,IAAIuhD,EAASJ,EAAyBE,GAAY,CAGjDrhD,QAAS,IAOV,OAHAwhD,EAAoBH,GAAU5yC,KAAK8yC,EAAOvhD,QAASuhD,EAAQA,EAAOvhD,QAASohD,GAGpEG,EAAOvhD,QAIfohD,EAAoBK,EAAID,EjDzBpB3hD,EAAW,GACfuhD,EAAoBM,EAAI,CAACj/B,EAAQk/B,EAAUC,EAAIC,KAC9C,IAAGF,EAAH,CAMA,IAAIG,EAAeC,EAAAA,EACnB,IAASh2C,EAAI,EAAGA,EAAIlM,EAASwC,OAAQ0J,IAAK,CAGzC,IAFA,IAAK41C,EAAUC,EAAIC,GAAYhiD,EAASkM,GACpCi2C,GAAY,EACPhwC,EAAI,EAAGA,EAAI2vC,EAASt/C,OAAQ2P,MACpB,EAAX6vC,GAAsBC,GAAgBD,IAAa/hD,OAAO+5B,KAAKunB,EAAoBM,GAAGO,OAAOh8B,GAASm7B,EAAoBM,EAAEz7B,GAAK07B,EAAS3vC,MAC9I2vC,EAAS15B,OAAOjW,IAAK,IAErBgwC,GAAY,EACTH,EAAWC,IAAcA,EAAeD,IAG7C,GAAGG,EAAW,CACbniD,EAASooB,OAAOlc,IAAK,GACrB,IAAIqyC,EAAIwD,SACE9iC,IAANs/B,IAAiB37B,EAAS27B,IAGhC,OAAO37B,EAvBNo/B,EAAWA,GAAY,EACvB,IAAI,IAAI91C,EAAIlM,EAASwC,OAAQ0J,EAAI,GAAKlM,EAASkM,EAAI,GAAG,GAAK81C,EAAU91C,IAAKlM,EAASkM,GAAKlM,EAASkM,EAAI,GACrGlM,EAASkM,GAAK,CAAC41C,EAAUC,EAAIC,IkDJ/BT,EAAoBjzC,EAAI,CAACnO,EAASkiD,KACjC,IAAI,IAAIj8B,KAAOi8B,EACXd,EAAoBL,EAAEmB,EAAYj8B,KAASm7B,EAAoBL,EAAE/gD,EAASimB,IAC5EnmB,OAAOC,eAAeC,EAASimB,EAAK,CAAEk8B,YAAY,EAAMzoC,IAAKwoC,EAAWj8B,MCJ3Em7B,EAAoBL,EAAI,CAACruB,EAAK0vB,IAAUtiD,OAAO0G,UAAUgI,eAAeC,KAAKikB,EAAK0vB,GCClFhB,EAAoBhD,EAAKp+C,IACH,oBAAXqiD,QAA0BA,OAAOC,aAC1CxiD,OAAOC,eAAeC,EAASqiD,OAAOC,YAAa,CAAEriD,MAAO,WAE7DH,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,K,MCAvD,IAAIsiD,EAAkB,CACrB,IAAK,GAaNnB,EAAoBM,EAAE1vC,EAAKwwC,GAA0C,IAA7BD,EAAgBC,GAGxD,IAAIC,EAAuB,CAACC,EAA4BxqB,KACvD,IAGImpB,EAAUmB,GAHTb,EAAUgB,EAAaC,GAAW1qB,EAGhBnsB,EAAI,EAC3B,GAAG41C,EAASkB,MAAMpxB,GAAgC,IAAxB8wB,EAAgB9wB,KAAa,CACtD,IAAI4vB,KAAYsB,EACZvB,EAAoBL,EAAE4B,EAAatB,KACrCD,EAAoBK,EAAEJ,GAAYsB,EAAYtB,IAGhD,GAAGuB,EAAS,IAAIngC,EAASmgC,EAAQxB,GAGlC,IADGsB,GAA4BA,EAA2BxqB,GACrDnsB,EAAI41C,EAASt/C,OAAQ0J,IACzBy2C,EAAUb,EAAS51C,GAChBq1C,EAAoBL,EAAEwB,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBZ,EAAS51C,IAAM,EAEhC,OAAOq1C,EAAoBM,EAAEj/B,IAG1BqgC,EAAqBC,KAAuB,iBAAIA,KAAuB,kBAAK,GAChFD,EAAmBl6C,QAAQ65C,EAAqBO,KAAK,KAAM,IAC3DF,EAAmBh6C,KAAO25C,EAAqBO,KAAK,KAAMF,EAAmBh6C,KAAKk6C,KAAKF,K,GC7CvF,IAAIG,EAAsB7B,EAAoBM,OAAE5iC,EAAW,CAAC,MAAM,IAAOsiC,EAAoB,OAC7F6B,EAAsB7B,EAAoBM,EAAEuB,I","sources":["webpack://ngdg/webpack/runtime/chunk loaded","webpack://ngdg/./src/cjs/BumpMapper.js","webpack://ngdg/./src/cjs/DildoGeneration.js","webpack://ngdg/./src/cjs/DildoGeometry.js","webpack://ngdg/./src/cjs/DildoMaterials.js","webpack://ngdg/./src/cjs/GeometryGenerationHelpers.js","webpack://ngdg/./src/cjs/ImageStore.js","webpack://ngdg/./src/cjs/PathFinder.js","webpack://ngdg/./src/cjs/PlaneMeshIntersection.js","webpack://ngdg/./src/cjs/UVHelpers.js","webpack://ngdg/./src/cjs/clearDuplicateVertices3.js","webpack://ngdg/./src/cjs/computeVertexNormals.js","webpack://ngdg/./src/cjs/constants.js","webpack://ngdg/./src/cjs/defaults.js","webpack://ngdg/./src/cjs/entry.js","webpack://ngdg/./src/cjs/locateVertexInArray.js","webpack://ngdg/./src/cjs/mergeGeometries.js","webpack://ngdg/./src/cjs/ngdg.js","webpack://ngdg/./src/cjs/randomWebColor.js","webpack://ngdg/../plotboilerplate/src/esm/UIDGenerator.js","webpack://ngdg/../plotboilerplate/src/esm/VertexAttr.js","webpack://ngdg/../plotboilerplate/src/esm/VertexListeners.js","webpack://ngdg/../plotboilerplate/src/esm/Vertex.js","webpack://ngdg/../plotboilerplate/src/esm/Polygon.js","webpack://ngdg/../plotboilerplate/src/esm/Bounds.js","webpack://ngdg/../plotboilerplate/src/esm/VertTuple.js","webpack://ngdg/../plotboilerplate/src/esm/Vector.js","webpack://ngdg/../plotboilerplate/src/esm/CubicBezierCurve.js","webpack://ngdg/../plotboilerplate/src/esm/BezierPath.js","webpack://ngdg/../plotboilerplate/src/esm/Line.js","webpack://ngdg/../plotboilerplate/src/esm/Circle.js","webpack://ngdg/../plotboilerplate/src/esm/CircleSector.js","webpack://ngdg/../plotboilerplate/src/esm/drawutilssvg.js","webpack://ngdg/../plotboilerplate/src/esm/draw.js","webpack://ngdg/../plotboilerplate/src/esm/drawgl.js","webpack://ngdg/../plotboilerplate/src/esm/Triangle.js","webpack://ngdg/../plotboilerplate/src/esm/geomutils.js","webpack://ngdg/../plotboilerplate/src/esm/Grid.js","webpack://ngdg/../plotboilerplate/src/esm/KeyHandler.js","webpack://ngdg/../plotboilerplate/src/esm/MouseHandler.js","webpack://ngdg/../plotboilerplate/src/esm/PBImage.js","webpack://ngdg/../plotboilerplate/src/esm/PlotBoilerplate.js","webpack://ngdg/../plotboilerplate/src/esm/VEllipse.js","webpack://ngdg/../plotboilerplate/src/esm/VEllipseSector.js","webpack://ngdg/../plotboilerplate/src/esm/SVGBuilder.js","webpack://ngdg/../plotboilerplate/src/esm/utils/WebColors.js","webpack://ngdg/../plotboilerplate/src/esm/utils/WebColorsContrast.js","webpack://ngdg/../plotboilerplate/src/esm/utils/WebColorsMalachite.js","webpack://ngdg/../plotboilerplate/src/esm/utils/datastructures/Color.js","webpack://ngdg/webpack/bootstrap","webpack://ngdg/webpack/runtime/define property getters","webpack://ngdg/webpack/runtime/hasOwnProperty shorthand","webpack://ngdg/webpack/runtime/make namespace object","webpack://ngdg/webpack/runtime/jsonp chunk loading","webpack://ngdg/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","\"use strict\";\n/**\n * A helper to apply bumpmaps to any rectangular mesh.\n *\n * @author  Ikaros Kappler\n * @date    2021-09-06\n * @version 1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BumpMapper = void 0;\nvar THREE = require(\"three\");\nvar computeVertexNormals_1 = require(\"./computeVertexNormals\");\nvar GeometryGenerationHelpers_1 = require(\"./GeometryGenerationHelpers\");\nexports.BumpMapper = {\n    applyBumpmap: function (dildoGeometry, bufferedGeometry, bumpmap, material, options) {\n        var collectedVertexNormals = (0, computeVertexNormals_1.computeVertexNormals)(dildoGeometry, bufferedGeometry);\n        var dildoNormalGeometry = new THREE.Geometry();\n        dildoNormalGeometry.vertices = collectedVertexNormals.map(function (normalLine) {\n            var endPoint = normalLine.end.clone();\n            GeometryGenerationHelpers_1.GeometryGenerationHelpers.normalizeVectorXYZ(normalLine.start, endPoint, options.bumpmapStrength);\n            return endPoint;\n        });\n        var dildoNormalsMesh = new THREE.Points(dildoNormalGeometry, new THREE.PointsMaterial({\n            size: 1.4,\n            color: 0x00ffff\n        }));\n        // if (options.showBumpmapTargets) {\n        //   dildoNormalsMesh.position.y = -100;\n        //   this.addMesh(dildoNormalsMesh);\n        // }\n        var dildoMesh = null;\n        console.log(\"options.useBumpmap\", options.useBumpmap, \"bumpmap\", bumpmap);\n        // const heightMap = createHeightMapFromImage( bumpmapTexture ):\n        if (options.useBumpmap && bumpmap) {\n            for (var y = 0; y < dildoGeometry.vertexMatrix.length; y++) {\n                for (var x = 0; x < dildoGeometry.vertexMatrix[y].length; x++) {\n                    var vertIndex = dildoGeometry.vertexMatrix[y][x];\n                    var vertex = dildoGeometry.vertices[vertIndex];\n                    var yRatio = 1.0 - y / (dildoGeometry.vertexMatrix.length - 1);\n                    var xRatio = x / (dildoGeometry.vertexMatrix[y].length - 1);\n                    var lerpFactor = bumpmap.getHeightAt(xRatio, yRatio);\n                    var lerpTarget = dildoNormalGeometry.vertices[vertIndex];\n                    vertex.lerp(lerpTarget, lerpFactor);\n                }\n            }\n            // Also lerp top point\n            //   const vertIndex: number = dildoGeometry.topIndex;\n            //   //   const vertIndex: number = dildoGeometry.vertexMatrix[dildoGeometry.vertexMatrix.length - 1][0];\n            //   const vertex: THREE.Vector3 = dildoGeometry.vertices[vertIndex];\n            //   const yRatio: number = 0.0;\n            //   const xRatio: number = 0.5;\n            //   const lerpFactor: number = bumpmap.getHeightAt(xRatio, yRatio);\n            //   const lerpTarget: THREE.Vector3 = dildoNormalGeometry.vertices[vertIndex];\n            //   vertex.lerp(lerpTarget, lerpFactor);\n            // Override the buffered geometry! (bumpmap has been applied)\n            bufferedGeometry = new THREE.BufferGeometry().fromGeometry(dildoGeometry);\n            bufferedGeometry.computeVertexNormals();\n            // Override the mesh! (bumpmap has been applied)\n            dildoMesh = new THREE.Mesh(bufferedGeometry, material);\n        }\n        return { dildoMesh: dildoMesh, dildoNormalsMesh: dildoNormalsMesh };\n    }\n};\n//# sourceMappingURL=BumpMapper.js.map","\"use strict\";\n/**\n * A class to manage 3d scenes and the generation of dildo models.\n *\n * @author   Ikaros Kappler\n * @date     2020-07-01\n * @modified 2020-09-11 Added proper texture loading.\n * @modified 2021-06-07 Fixing `removeCachedGeometries`. Adding bending of model.\n * @modified 2021-08-29 Ported this class to Typescript from vanilla JS.\n * @version  1.2.1\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DildoGeneration = void 0;\nvar THREE = require(\"three\");\nvar VertexNormalsHelper_1 = require(\"three/examples/jsm/helpers/VertexNormalsHelper\");\nvar DildoGeometry_1 = require(\"./DildoGeometry\");\nvar DildoMaterials_1 = require(\"./DildoMaterials\");\nvar GeometryGenerationHelpers_1 = require(\"./GeometryGenerationHelpers\");\nvar mergeGeometries_1 = require(\"./mergeGeometries\");\nvar PathFinder_1 = require(\"./PathFinder\");\nvar randomWebColor_1 = require(\"./randomWebColor\");\nvar constants_1 = require(\"./constants\");\nvar BumpMapper_1 = require(\"./BumpMapper\");\nvar DildoGeneration = /** @class */ (function () {\n    function DildoGeneration(canvasId, options) {\n        this.canvas = document.getElementById(canvasId);\n        this.parent = this.canvas.parentElement;\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10000);\n        this.camera.position.z = 500;\n        var lightDistanceFactor = 10.0;\n        var intensityFactor = 1.0;\n        this.ambientLightA = new THREE.AmbientLight(0x444444);\n        this.ambientLightA.position.set(350, 0, -350).multiplyScalar(lightDistanceFactor * 5);\n        // this.ambientLightA = new THREE.PointLight(0xffffff, intensityFactor * 5.0, 350.0 * lightDistanceFactor, 0.5); // color, intensity, distance, decay);\n        // this.ambientLightA.position.set(350, 0, -350).multiplyScalar(lightDistanceFactor);\n        this.scene.add(this.ambientLightA);\n        this.ambientLightB = new THREE.PointLight(0xffffff, intensityFactor * 5.0, 350.0 * lightDistanceFactor, 0.5); // color, intensity, distance, decay);\n        this.ambientLightB.position.set(-350, 0, 350).multiplyScalar(lightDistanceFactor);\n        this.scene.add(this.ambientLightB);\n        this.directionalLightA = new THREE.DirectionalLight(0xffffff, intensityFactor * 2.0);\n        // this.directionalLightA = new THREE.PointLight(0xffffff, 1.0, 350.0 * lightDistanceFactor, 0.5); // color, intensity, distance, decay);\n        this.directionalLightA.position.set(350, 350, 350).multiplyScalar(lightDistanceFactor);\n        this.scene.add(this.directionalLightA);\n        this.scene.add(this.directionalLightA.target);\n        this.directionalLightB = new THREE.DirectionalLight(0xffffff, intensityFactor * 2.0);\n        this.directionalLightB.position.set(-350, -350, -50).multiplyScalar(lightDistanceFactor);\n        this.scene.add(this.directionalLightB);\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: this.canvas,\n            preserveDrawingBuffer: true,\n            antialias: true // false\n        });\n        // TODO: check if this works!\n        // this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n        this.controls = options.makeOrbitControls(this.camera, this.renderer.domElement);\n        this.controls.update();\n        // Cache all geometries for later removal\n        this.geometries = [];\n        // Remember partial results\n        // Record<string,object>\n        this.partialResults = {};\n        var _self = this;\n        window.addEventListener(\"resize\", function () {\n            _self.resizeCanvas();\n        });\n        this.resizeCanvas();\n        var animate = function () {\n            requestAnimationFrame(animate);\n            _self.controls.update();\n            _self.renderer.render(_self.scene, _self.camera);\n        };\n        animate();\n    }\n    /**\n     * Resize the 3d canvas to fit its container.\n     */\n    DildoGeneration.prototype.resizeCanvas = function () {\n        var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.style.width = \"\" + width + \"px\";\n        this.canvas.style.height = \"\" + height + \"px\";\n        this.canvas.setAttribute(\"width\", \"\" + width + \"px\");\n        this.canvas.setAttribute(\"height\", height + \"px\");\n        this.renderer.setSize(width, height);\n        // What am I doing here?\n        this.camera.setViewOffset(width, height, width / 4, height / 20, width, height);\n    };\n    /**\n     * Clears the current scene and rebuilds everything from scratch according to the\n     * mesh options being passed.\n     *\n     * @param {BezierPath} options.outline\n     * @param {number}     options.segmentCount\n     * @param {number}     options.outlineSegmentCount (>= 2).\n     * @param {number}     options.bendAngle The bending angle in degrees (!).\n     * @param {boolean}    options.performSlice\n     * @param {boolean?}   options.useTextureImage\n     * @param {string?}    options.textureImagePath\n     * @param {boolean?}   options.wireframe\n     * @param {string}     options.renderFaces - \"double\" or \"front\" (default) or \"back\"\n     **/\n    DildoGeneration.prototype.rebuild = function (options) {\n        this.removeCachedGeometries();\n        var baseRadius = options.outline.getBounds().width;\n        var baseShape = GeometryGenerationHelpers_1.GeometryGenerationHelpers.mkCircularPolygon(baseRadius, options.shapeSegmentCount, options.baseShapeExcentricity);\n        var useBumpmap = typeof options.useBumpmap !== \"undefined\" ? options.useBumpmap : false;\n        // const bumpmapPath = \"./assets/img/bumpmap.png\";\n        // const bumpmapTexture: THREE.Texture | null = useBumpmap ? DildoMaterials.loadTextureImage(bumpmapPath) : null;\n        var bumpmap = useBumpmap && options.bumpmap ? options.bumpmap : null;\n        var dildoGeometry = new DildoGeometry_1.DildoGeometry(Object.assign({ baseShape: baseShape /*, bumpmapTexture: bumpmapTexture */ }, options));\n        var useTextureImage = options.useTextureImage && typeof options.textureImagePath !== \"undefined\";\n        var textureImagePath = typeof options.textureImagePath !== \"undefined\" ? options.textureImagePath : null;\n        var doubleSingleSide = options.renderFaces === \"double\" ? THREE.DoubleSide : options.renderFaces === \"back\" ? THREE.BackSide : THREE.FrontSide;\n        var wireframe = typeof options.wireframe !== \"undefined\" ? options.wireframe : false;\n        // const isBumpmappingPossible : boolean = (options.useBumpmap && bumpmapTexture);\n        var material = DildoMaterials_1.DildoMaterials.createMainMaterial(useTextureImage, wireframe, textureImagePath, doubleSingleSide);\n        // This can be overriden in later steps! (after bumpmap was applied)\n        var bufferedGeometry = new THREE.BufferGeometry().fromGeometry(dildoGeometry);\n        bufferedGeometry.computeVertexNormals();\n        // This can be overriden in later steps! (after bumpmap was applied)\n        var dildoMesh = new THREE.Mesh(bufferedGeometry, material);\n        this.camera.lookAt(new THREE.Vector3(20, 0, 150));\n        this.camera.lookAt(dildoMesh.position);\n        var spineGeometry = new THREE.Geometry();\n        dildoGeometry.spineVertices.forEach(function (spineVert) {\n            spineGeometry.vertices.push(spineVert.clone());\n        });\n        if (options.addSpine) {\n            GeometryGenerationHelpers_1.GeometryGenerationHelpers.addSpine(this, spineGeometry);\n        }\n        // Add perpendicular path?\n        if (options.showBasicPerpendiculars) {\n            GeometryGenerationHelpers_1.GeometryGenerationHelpers.addPerpendicularPaths(this, dildoGeometry);\n        }\n        // Show computed dildo normals?\n        // if (options.previewBumpmap || options.useBumpmap) {\n        if (options.useBumpmap) {\n            // const collectedVertexNormals: Array<THREE.Line3> = computeVertexNormals(\n            //   dildoGeometry as unknown as THREE.Geometry,\n            //   bufferedGeometry\n            // );\n            // const dildoNormalGeometry = new THREE.Geometry();\n            // dildoNormalGeometry.vertices = collectedVertexNormals.map((normalLine: THREE.Line3) => {\n            //   const endPoint: THREE.Vector3 = normalLine.end.clone();\n            //   GeometryGenerationHelpers.normalizeVectorXYZ(normalLine.start, endPoint, options.bumpmapStrength);\n            //   return endPoint;\n            // });\n            // const dildoNormalsMesh: THREE.Points = new THREE.Points(\n            //   dildoNormalGeometry,\n            //   new THREE.PointsMaterial({\n            //     size: 1.4,\n            //     color: 0x00ffff\n            //   })\n            // );\n            // if (options.showBumpmapTargets) {\n            //   dildoNormalsMesh.position.y = -100;\n            //   this.addMesh(dildoNormalsMesh);\n            // }\n            // console.log(\"options.useBumpmap\", options.useBumpmap, \"bumpmap\", bumpmap);\n            // // const heightMap = createHeightMapFromImage( bumpmapTexture ):\n            // if (options.useBumpmap && bumpmap) {\n            //   for (var y = 0; y < dildoGeometry.vertexMatrix.length; y++) {\n            //     for (var x = 0; x < dildoGeometry.vertexMatrix[y].length; x++) {\n            //       const vertIndex: number = dildoGeometry.vertexMatrix[y][x];\n            //       const vertex: THREE.Vector3 = dildoGeometry.vertices[vertIndex];\n            //       const yRatio: number = y / (dildoGeometry.vertexMatrix.length - 1);\n            //       const xRatio: number = x / (dildoGeometry.vertexMatrix[y].length - 1);\n            //       const lerpFactor: number = bumpmap.getHeightAt(xRatio, yRatio);\n            //       const lerpTarget: THREE.Vector3 = dildoNormalGeometry.vertices[vertIndex];\n            //       vertex.lerp(lerpTarget, lerpFactor);\n            //     }\n            //   }\n            //   // Override the buffered geometry! (bumpmap has been applied)\n            //   bufferedGeometry = new THREE.BufferGeometry().fromGeometry(dildoGeometry as unknown as THREE.Geometry);\n            //   bufferedGeometry.computeVertexNormals();\n            //   // Override the mesh! (bumpmap has been applied)\n            //   dildoMesh = new THREE.Mesh(bufferedGeometry, material);\n            // }\n            var _a = BumpMapper_1.BumpMapper.applyBumpmap(dildoGeometry, bufferedGeometry, bumpmap, material, options), bumpmappedDildoMesh = _a.dildoMesh, dildoNormalsMesh = _a.dildoNormalsMesh;\n            dildoMesh = bumpmappedDildoMesh;\n            if (options.showBumpmapTargets) {\n                dildoNormalsMesh.position.y = -100;\n                this.addMesh(dildoNormalsMesh);\n            }\n        }\n        if (options.performSlice) {\n            this.__performPlaneSlice(dildoMesh, dildoGeometry, wireframe, useTextureImage, textureImagePath, options);\n            // The CSG operations are not reliable.\n            // this.__performCsgSlice(latheMesh, geometry, material);\n        }\n        else {\n            dildoMesh.position.y = -100;\n            dildoMesh.userData[\"isExportable\"] = true;\n            this.addMesh(dildoMesh);\n            if (options.showNormals) {\n                var vnHelper = new VertexNormalsHelper_1.VertexNormalsHelper(dildoMesh, options.normalsLength, 0x00ff00); // Fourth param 1?\n                // TODO: use addMesh() here?\n                this.scene.add(vnHelper);\n                this.geometries.push(vnHelper);\n            }\n        }\n    };\n    /**\n     * Perform the actual slice operation.\n     *\n     * This will create several new meshes:\n     *  * a left geometry slice (along the z- axis).\n     *  * a right geometry slice (along the z+ axis).\n     *  * an inner slice cut geometry (inside the dildo model, cutting it into two halves).\n     *  * an outer slice cut geometry (inside the mould model, cutting that one into two halves).\n     *\n     * These will always be generated, even if the options tell different; if so then they are set\n     * to be invisible.\n     *\n     * @param {THREE.Geometry} latheMesh - The buffered dildo geometry (required to perform the slice operation).\n     * @param {DildoGeometry} latheUnbufferedGeometry - The unbuffered dildo geometry (required to obtain the perpendicular path lines).\n     * @param {boolean} wireframe\n     */\n    DildoGeneration.prototype.__performPlaneSlice = function (latheMesh, latheUnbufferedGeometry, wireframe, useTextureImage, textureImagePath, options) {\n        // var epsilon = 0.000001;\n        var leftPlane = new THREE.Plane(new THREE.Vector3(0, 0, 1), 0);\n        var leftSliceGeometry = GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeSlice(latheUnbufferedGeometry, leftPlane);\n        var rightPlane = new THREE.Plane(new THREE.Vector3(0, 0, -1), 0);\n        var rightSliceGeometry = GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeSlice(latheUnbufferedGeometry, rightPlane);\n        var sliceMaterial = DildoMaterials_1.DildoMaterials.createSliceMaterial(useTextureImage, wireframe, textureImagePath);\n        // Find points on intersection path (this is a single path in this configuration)\n        var planeGeom = new THREE.PlaneGeometry(300, 500);\n        var planeMesh = new THREE.Mesh(planeGeom, new THREE.MeshBasicMaterial({\n            color: 0x484848,\n            transparent: true,\n            opacity: 0.35,\n            side: THREE.DoubleSide\n        }));\n        planeMesh.rotation.x = Math.PI / 5;\n        this.partialResults[constants_1.KEY_SPLIT_PANE_MESH] = planeMesh;\n        if (options.showSplitPane) {\n            planeMesh.position.z = 0.5;\n            this.addMesh(planeMesh);\n        }\n        var planeIntersectionPoints = GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeAndAddPlaneIntersection(this, latheMesh, latheUnbufferedGeometry, planeMesh, planeGeom, options);\n        // Find the connected path (there is only one if you choose the cut plane properly)\n        // Note that it doesn't matter which slice geometry we use as left and right match\n        // perfectly together at their cut plane.\n        // Array<number[]>\n        var connectedPaths = new PathFinder_1.PathFinder().findAllPathsOnMesh(leftSliceGeometry, planeIntersectionPoints);\n        // TEST what the connected paths look like\n        // TODO: add an option and only add to scene if desired.\n        for (var p = 0; p < connectedPaths.length; p++) {\n            var geometry = new THREE.Geometry();\n            geometry.vertices = connectedPaths[p].map(function (geometryVertexIndex) {\n                return leftSliceGeometry.vertices[geometryVertexIndex];\n            });\n            var linesMesh_1 = new THREE.Line(geometry, new THREE.LineBasicMaterial({\n                color: (0, randomWebColor_1.randomWebColor)(i, \"Mixed\") // 0x8800a8\n            }));\n            linesMesh_1.position.y = -100;\n            // linesMesh.position.z = -50;\n            this.addMesh(linesMesh_1);\n        }\n        if (options.addPrecalculatedShapeOutlines) {\n            // TEST what the line mesh looks like\n            var pointGeometry = new THREE.Geometry();\n            pointGeometry.vertices = planeIntersectionPoints;\n            var linesMesh = new THREE.Line(pointGeometry, new THREE.LineBasicMaterial({\n                color: 0x8800a8\n            }));\n            linesMesh.position.y = -100;\n            linesMesh.position.z = -50;\n            this.addMesh(linesMesh);\n        }\n        // Triangulate connected paths\n        var triangulatedGeometries = [];\n        for (var i = 0; i < connectedPaths.length; i++) {\n            var triangulationGeometry = GeometryGenerationHelpers_1.GeometryGenerationHelpers.makePlaneTriangulation(this, leftSliceGeometry, connectedPaths[i], options);\n            triangulatedGeometries.push(triangulationGeometry);\n            // Merge together left and right slice geometry with the triangulated\n            // cut faces.\n            if (options.closeCutAreas) {\n                (0, mergeGeometries_1.mergeGeometries)(leftSliceGeometry, triangulationGeometry, constants_1.EPS);\n                (0, mergeGeometries_1.mergeGeometries)(rightSliceGeometry, triangulationGeometry, constants_1.EPS);\n            }\n        }\n        if (options.showLeftSplit) {\n            leftSliceGeometry.uvsNeedUpdate = true;\n            // TODO: check if this is still required\n            leftSliceGeometry.buffersNeedUpdate = true;\n            leftSliceGeometry.computeVertexNormals();\n            var slicedMeshLeft = new THREE.Mesh(leftSliceGeometry, sliceMaterial);\n            slicedMeshLeft.position.y = -100;\n            slicedMeshLeft.position.z = -50;\n            slicedMeshLeft.userData[\"isExportable\"] = true;\n            this.addMesh(slicedMeshLeft);\n            if (options.showNormals) {\n                var vnHelper = new VertexNormalsHelper_1.VertexNormalsHelper(slicedMeshLeft, options.normalsLength, 0x00ff00);\n                this.scene.add(vnHelper);\n                this.geometries.push(vnHelper);\n            }\n        }\n        if (options.showRightSplit) {\n            rightSliceGeometry.uvsNeedUpdate = true;\n            // TODO: check if this is still required\n            rightSliceGeometry.buffersNeedUpdate = true;\n            rightSliceGeometry.computeVertexNormals();\n            var slicedMeshRight = new THREE.Mesh(rightSliceGeometry, sliceMaterial);\n            slicedMeshRight.position.y = -100;\n            slicedMeshRight.position.z = 50;\n            slicedMeshRight.userData[\"isExportable\"] = true;\n            this.addMesh(slicedMeshRight);\n            if (options.showNormals) {\n                var vnHelper = new VertexNormalsHelper_1.VertexNormalsHelper(slicedMeshRight, options.normalsLength, 0x00ff00);\n                this.scene.add(vnHelper);\n                this.geometries.push(vnHelper);\n            }\n        }\n        // Remember everything\n        this.partialResults[constants_1.KEY_LEFT_SLICE_PLANE] = leftPlane;\n        this.partialResults[constants_1.KEY_LEFT_SLICE_GEOMETRY] = leftSliceGeometry;\n        this.partialResults[constants_1.KEY_RIGHT_SLICE_PLANE] = rightPlane;\n        this.partialResults[constants_1.KEY_RIGHT_SLICE_GEOMETRY] = rightSliceGeometry;\n        this.partialResults[constants_1.KEY_PLANE_INTERSECTION_POINTS] = planeIntersectionPoints;\n        this.partialResults[constants_1.KEY_SPLIT_TRIANGULATION_GEOMETRIES] = triangulatedGeometries;\n    };\n    //   /**\n    //    * Make a triangulation of the given path specified by the verted indices.\n    //    *\n    //    * @param {Array<number>} connectedPath - An array of vertex indices.\n    //    * @return {THREE.Geometry} trianglesMesh\n    //    */\n    //   var makePlaneTriangulation = function (generator, sliceGeometry, connectedPath, options) {\n    //     // Convert the connected paths indices to [x, y, x, y, x, y, ...] coordinates (requied by earcut)\n    //     var currentPathXYData = connectedPath.reduce(function (earcutInput, vertIndex) {\n    //       var vert = sliceGeometry.vertices[vertIndex];\n    //       earcutInput.push(vert.x, vert.y);\n    //       return earcutInput;\n    //     }, []);\n    //     // Array<number> : triplets of vertex indices in the plain XY array\n    //     var triangles = earcut(currentPathXYData);\n    //     // Convert triangle indices back to a geometry\n    //     var trianglesGeometry = new THREE.Geometry();\n    //     // We will merge the geometries in the end which will create clones of the vertices.\n    //     // No need to clone here.\n    //     // trianglesGeometry.vertices = leftSliceGeometry.vertices;\n    //     trianglesGeometry.vertices = connectedPath.map(function (geometryVertexIndex) {\n    //       return sliceGeometry.vertices[geometryVertexIndex];\n    //     });\n    //     // Array<{x,y}> is compatible with Array<{x,y,z}> here :)\n    //     var flatSideBounds = Bounds.computeFromVertices(trianglesGeometry.vertices);\n    //     for (var t = 0; t < triangles.length; t += 3) {\n    //       var a = triangles[t];\n    //       var b = triangles[t + 1];\n    //       var c = triangles[t + 2];\n    //       trianglesGeometry.faces.push(new THREE.Face3(a, b, c));\n    //       // Add UVs\n    //       UVHelpers.makeFlatTriangleUVs(trianglesGeometry, flatSideBounds, a, b, c);\n    //     }\n    //     trianglesGeometry.uvsNeedUpdate = true;\n    //     trianglesGeometry.buffersNeedUpdate = true;\n    //     trianglesGeometry.computeVertexNormals();\n    //     var trianglesMesh = new THREE.Mesh(\n    //       trianglesGeometry,\n    //       new THREE.MeshBasicMaterial({\n    //         color: 0x0048ff,\n    //         transparent: true,\n    //         opacity: 0.55,\n    //         side: THREE.DoubleSide\n    //       })\n    //     );\n    //     trianglesMesh.position.y = -100;\n    //     // trianglesMesh.position.z += 1.0; // Avoid Moiré with plane mesh?\n    //     trianglesMesh.userData[\"isExportable\"] = false;\n    //     generator.partialResults[KEY_PLANE_INTERSECTION_TRIANGULATION] = trianglesGeometry;\n    //     if (options.showSplitShapeTriangulation) {\n    //       generator.addMesh(trianglesMesh);\n    //     }\n    //     return trianglesGeometry;\n    //   };\n    /**\n     * NOT CURRENTLY IN USE (too unstable?)\n     *\n     * @param {*} latheMesh\n     * @param {*} latheUnbufferedGeometry\n     * @param {*} material\n     */\n    //   __performCsgSlice(latheMesh, latheUnbufferedGeometry, material) {\n    //     latheMesh.updateMatrix();\n    //     var bbox = new THREE.Box3().setFromObject(latheMesh);\n    //     // console.log(bbox);\n    //     var box_material = new THREE.MeshBasicMaterial({ wireframe: true });\n    //     var cube_geometry = new THREE.BoxGeometry( // new THREE.CubeGeometry(\n    //       ((bbox.max.x - bbox.min.x) / 2) * 1.2 + 0.01,\n    //       (bbox.max.y - bbox.min.y) * 1.1,\n    //       (bbox.max.z - bbox.min.z) * 1.2\n    //     );\n    //     var cube_mesh = new THREE.Mesh(cube_geometry, box_material);\n    //     cube_mesh.updateMatrix();\n    //     cube_mesh.position.x = latheMesh.position.x + (bbox.max.x - bbox.min.x) / 4;\n    //     cube_mesh.position.y = bbox.min.y + (bbox.max.y - bbox.min.y) / 2 + -30;\n    //     cube_mesh.position.z = bbox.min.z + (bbox.max.z - bbox.min.z) / 2;\n    //     this.addMesh(cube_mesh);\n    //     var cube_bsp = new ThreeBSP(cube_mesh);\n    //     var mesh_bsp = new ThreeBSP(new THREE.Mesh(latheUnbufferedGeometry, material));\n    //     var subtract_bsp = cube_bsp.subtract(mesh_bsp);\n    //     var result = subtract_bsp.toMesh(material);\n    //     this.addMesh(result);\n    //   };\n    /**\n     * Add a mesh to the underlying scene.\n     *\n     * The function will make some modifications to the rotation of the meshes.\n     * @param {THREE.Mesh} mesh\n     */\n    DildoGeneration.prototype.addMesh = function (mesh) {\n        mesh.rotation.x = Math.PI;\n        this.scene.add(mesh);\n        this.geometries.push(mesh);\n    };\n    DildoGeneration.prototype.removeCachedGeometries = function () {\n        for (var i = 0; i < this.geometries.length; i++) {\n            var old = this.geometries[i];\n            // Remove old object.\n            //  A better way would be to update the lathe in-place. Possible?\n            this.scene.remove(old);\n            //   if (typeof old.dispose == \"function\") old.dispose();\n            //   if (typeof old.material != \"undefined\" && typeof old.material.dispose == \"function\") old.material.dispose();\n            if (old instanceof THREE.Mesh) {\n                old.geometry.dispose();\n                old.material.dispose();\n            }\n        }\n        this.geometries = [];\n    };\n    /**\n     * Generate an STL string from the (exportable) meshes that are currently stored inside this generator.\n     *\n     * @param {function(string)} options.onComplete\n     **/\n    DildoGeneration.prototype.generateSTL = function (options, exporter) {\n        // const exporter: STLExporter = new STLExporter();\n        var stlBuffer = [];\n        // TODO: merge all exportable geometries together and export as one.\n        for (var i in this.geometries) {\n            if (this.geometries[i].userData[\"isExportable\"] === true) {\n                var stlData = exporter.parse(this.geometries[i]);\n                stlBuffer.push(stlData);\n            }\n        }\n        if (typeof options.onComplete === \"function\") {\n            options.onComplete(stlBuffer.join(\"\\n\\n\"));\n        }\n        else {\n            console.warn(\"STL data was generated but no 'onComplete' callback was defined.\");\n        }\n    };\n    return DildoGeneration;\n}()); // END class\nexports.DildoGeneration = DildoGeneration;\n//# sourceMappingURL=DildoGeneration.js.map","\"use strict\";\n/**\n * @require THREE.Geometry\n *\n * @author   Ikaros Kappler\n * @date     2020-07-08\n * @modified 2021-06-11 Fixing top and bottom points; preparing slicing of mesh.\n * @modified 2021-08-29 Ported to Typescript from vanilla JS.\n * @version  1.0.2\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DildoGeometry = exports.DildoBaseClass = void 0;\n// TODOs\n// + Add cut-plane faces when hollow\n// + Move vertex-creating helper functions out of the class\n// + Move face-creating helper functions out of the class\n// + Move UV-creating helper functions out of the class\n// + port to typescript\nvar plotboilerplate_1 = require(\"plotboilerplate\");\nvar THREE = require(\"three\");\nvar GeometryGenerationHelpers_1 = require(\"./GeometryGenerationHelpers\");\n// import { earcut } from \"./thirdparty-ported/earcut\"; // TODO: fix earcut types\nvar earcut_typescript_1 = require(\"earcut-typescript\"); // TODO: fix earcut types\nvar UVHelpers_1 = require(\"./UVHelpers\");\nvar DEG_TO_RAD = Math.PI / 180.0;\n// import { DEG_TO_RAD } from \"./constants\";\n// This is a dirty workaround to\n// avoid direct class extending of THREE.Geometry.\n// I am using `THREE.Geometry.call(this);` instead :/\nvar DildoBaseClass = /** @class */ (function () {\n    function DildoBaseClass() {\n        this.vertices = [];\n        this.faces = [];\n        this.faceVertexUvs = [[]];\n    }\n    return DildoBaseClass;\n}());\nexports.DildoBaseClass = DildoBaseClass;\n// export class DildoGeometry { // extends globalThis.THREE.Geometry {\nvar DildoGeometry = /** @class */ (function (_super) {\n    __extends(DildoGeometry, _super);\n    /**\n     * Create a new dildo geometry from the passed options..\n     *\n     * @param {Polygon} options.baseShape - The base shape to use (this is usually some regular polygon).\n     * @param {BezierPath} options.outline - The lathe outline to use.\n     * @param {number} options.bendAngle - A bend angle (in degrees!). Will only be applied if isBending=true.\n     * @param {number} options.outlineSegmentCount (>= 2).\n     * @param {boolean} options.isBending - Switch bending on/off no matter what the bend angle says.\n     * @param {boolean} options.makeHollow - Make a hollow mold.\n     **/\n    function DildoGeometry(options) {\n        var _this = _super.call(this) || this;\n        THREE.Geometry.call(_this);\n        _this.vertexMatrix = []; // Array<Array<number>>\n        _this.topIndex = -1;\n        _this.bottomIndex = -1;\n        _this.spineVertices = []; // Array<THREE.Vector>\n        _this.outerPerpLines = []; // Array<Three.Line3>\n        _this.innerPerpLines = []; // Array<Three.Line3>\n        _this.flatSidePolygon = null; // Polygon (2d)\n        _this.leftFlatIndices = []; // Array<number>\n        _this.rightFlatIndices = []; // Array<number>\n        _this.leftFlatTriangleIndices = []; // Array[[number,number,number]]\n        _this.rightFlatTriangleIndices = []; // Array[[number,number,number]]\n        _this.flatSideBounds = null; // Bounds\n        // The four corner vertices from the hollow shell plus the bottom vertex indices left and right\n        _this.hollowBottomEdgeVertIndices = []; // [number,number,number,number, number, number]\n        _this.hollowBottomTriagles = []; // Array<[number,number,number]>\n        _this.dildoNormals = [];\n        _this._buildVertices(options);\n        _this._buildFaces(options);\n        _this._buildUVMapping(options);\n        // Fill up missing UVs to avoid warnings\n        // This is a bit dirty, but not in call cases it is useful to create UV mappings\n        // while (this.faceVertexUvs[0].length < this.faces.length) {\n        //   this.faceVertexUvs[0].push([new THREE.Vector2(0, 0), new THREE.Vector2(1, 0), new THREE.Vector2(0.5, 1)]);\n        // }\n        if (options.useBumpmap) {\n            if (options.bumpmapTexture) {\n                _this.__applyBumpmap(options.bumpmapTexture);\n            }\n            else {\n                console.warn(\"Cannot apply bumpmap as desired, because the bumpmap texture is null or undefined.\");\n            }\n        }\n        return _this;\n    }\n    /**\n     *\n     * @param {Polygon} baseShape\n     * @param {Vertex} shapeCenter\n     * @param {Bounds} outlineBounds\n     * @param {THREE.Vertex3} outlineVert\n     * @param {number} sliceIndex\n     * @param {number} heightT A value between 0.0 and 1.0 (inclusive) to indicate the height position.\n     * @param {boolean} isBending\n     * @param {number=} bendAngle Must not be null, NaN or infinity if `isBending==true`\n     * @param {number=} arcRadius\n     * @param {boolean=} normalizePerpendiculars\n     * @param {number=} normalsLength\n     * @param {number=0} shapeTwistAngle - The angle to twist this particular shape around the y axis.\n     * @return { yMin: number, yMax : number }\n     */\n    DildoGeometry.prototype.__buildSlice = function (baseShape, outlineBounds, outlineVert, sliceIndex, heightT, isBending, bendAngle, arcRadius, shapeTwistAngle) {\n        var outlineXPct = (outlineBounds.max.x - outlineVert.x) / outlineBounds.width;\n        // TODO: are these is use?\n        var yMin, yMax;\n        for (var i = 0; i < baseShape.vertices.length; i++) {\n            var shapeVert = baseShape.vertices[i];\n            if (isBending) {\n                var vert = new THREE.Vector3(shapeVert.x * outlineXPct, 0, shapeVert.y * outlineXPct);\n                // Apply twist\n                rotateVertY(vert, shapeTwistAngle, 0, 0);\n                this._bendVertex(vert, bendAngle, arcRadius, heightT);\n                vert.y += outlineBounds.max.y;\n            }\n            else {\n                var vert = new THREE.Vector3(shapeVert.x * outlineXPct, outlineVert.y, shapeVert.y * outlineXPct);\n                // Apply twist\n                rotateVertY(vert, shapeTwistAngle, 0, 0);\n            }\n            this.vertexMatrix[sliceIndex][i] = this.vertices.length;\n            this.vertices.push(vert);\n            if (sliceIndex == 0) {\n                if (i == 0)\n                    yMin = vert.y;\n                if (i + 1 == baseShape.vertices.length)\n                    yMax = vert.y;\n            }\n        } // END for\n    };\n    /**\n     *\n     * @param {Polygon} baseShape\n     * @param {Vertex} shapeCenter\n     * @param {Bounds} outlineBounds\n     * @param {THREE.Vertex3} outlineVert\n     * @param {number} sliceIndex\n     * @param {number} heightT A value between 0.0 and 1.0 (inclusive) to indicate the height position.\n     * @param {boolean} isBending\n     * @param {number=} bendAngle Must not be null, NaN or infinity if `isBending==true`\n     * @param {number=} arcRadius\n     * @param {boolean=} normalizePerpendiculars\n     * @param {number=} normalsLength\n     * @return { yMin: number, yMax : number }\n     */\n    DildoGeometry.prototype.__buildSpine = function (shapeCenter, outlineBounds, outlineVert, heightT, isBending, bendAngle, arcRadius) {\n        var outlineXPct = (outlineBounds.max.x - outlineVert.x) / outlineBounds.width;\n        // Find shape's center point to construct a spine\n        var spineVert = shapeCenter.clone();\n        if (isBending) {\n            var vert = new THREE.Vector3(spineVert.x * outlineXPct, 0, spineVert.y * outlineXPct);\n            this._bendVertex(vert, bendAngle, arcRadius, heightT);\n            vert.y += outlineBounds.max.y;\n        }\n        else {\n            var vert = new THREE.Vector3(spineVert.x * outlineXPct, outlineVert.y, spineVert.y * outlineXPct);\n        }\n        this.spineVertices.push(vert);\n    };\n    /**\n     *\n     * @param {Polygon} baseShape\n     * @param {Bounds} outlineBounds\n     * @param {THREE.Vertex3} outlineVert\n     * @param {number} sliceIndex\n     * @param {number} heightT A value between 0.0 and 1.0 (inclusive) to indicate the height position.\n     * @param {boolean} isBending\n     * @param {number=} bendAngle Must not be null, NaN or infinity if `isBending==true`\n     * @param {number=} arcRadius\n     * @param {boolean=} normalizePerpendiculars\n     * @param {number=} normalsLength\n     * @return { yMin: number, yMax : number }\n     */\n    DildoGeometry.prototype.__buildPerps = function (baseShape, outlineBounds, outlineVert, // THREE.Vector3?\n    perpendicularVert, heightT, isBending, bendAngle, arcRadius, normalizePerpendiculars, normalsLength) {\n        var outlineXPct = (outlineBounds.max.x - outlineVert.x) / outlineBounds.width;\n        var halfIndices = [0, Math.floor(baseShape.vertices.length / 2)];\n        for (var j = 0; j < halfIndices.length; j++) {\n            var i = halfIndices[j];\n            var shapeVert = baseShape.vertices[i];\n            if (isBending) {\n                var vert = new THREE.Vector3(shapeVert.x * outlineXPct, 0, shapeVert.y * outlineXPct);\n                this._bendVertex(vert, bendAngle, arcRadius, heightT);\n                vert.y += outlineBounds.max.y;\n            }\n            else {\n                var vert = new THREE.Vector3(shapeVert.x * outlineXPct, outlineVert.y, shapeVert.y * outlineXPct);\n            }\n            var perpDifference = new THREE.Vector3(outlineVert.x - perpendicularVert.x, outlineVert.y - perpendicularVert.y, 0);\n            // TODO: check (this is in both cases the same)\n            if (i == 0)\n                var endVert = new THREE.Vector3(vert.x - perpendicularVert.x, vert.y + perpendicularVert.y, 0);\n            else\n                var endVert = new THREE.Vector3(vert.x + perpendicularVert.x, vert.y + perpendicularVert.y, 0);\n            rotateVert(endVert, bendAngle * heightT, vert.x, vert.y);\n            var outerPerpVert = vert.clone();\n            outerPerpVert.x += perpDifference.x;\n            outerPerpVert.y += perpDifference.y;\n            outerPerpVert.z += perpDifference.z;\n            if (normalizePerpendiculars) {\n                GeometryGenerationHelpers_1.GeometryGenerationHelpers.normalizeVectorXY(vert, endVert, normalsLength);\n            }\n            if (i == 0) {\n                this.outerPerpLines.push(new THREE.Line3(vert, endVert));\n            }\n            else {\n                this.innerPerpLines.push(new THREE.Line3(vert, endVert));\n            }\n        } // END for\n    };\n    //   /**\n    //    *\n    //    * @param {Polygon} baseShape\n    //    * @param {Bounds} outlineBounds\n    //    * @param {THREE.Vertex3} outlineVert\n    //    * @param {number} sliceIndex\n    //    * @param {number} heightT A value between 0.0 and 1.0 (inclusive) to indicate the height position.\n    //    * @param {boolean} isBending\n    //    * @param {number=} bendAngle Must not be null, NaN or infinity if `isBending==true`\n    //    * @param {number=} arcRadius\n    //    * @param {boolean=} normalizePerpendiculars\n    //    * @param {number=} normalsLength\n    //    * @return { yMin: number, yMax : number }\n    //    */\n    //   __buildNormals(\n    //     outlineSegmentIndex: number,\n    //     baseShape: Polygon,\n    //     outlineBounds: Bounds,\n    //     outlineVert: Vertex, // THREE.Vector3?\n    //     perpendicularVert: Vertex,\n    //     heightT: number,\n    //     isBending: boolean,\n    //     bendAngle: number,\n    //     arcRadius: number,\n    //     normalizePerpendiculars: boolean,\n    //     normalsLength: number\n    //   ) {\n    //     // var outlineXPct = (outlineBounds.max.x - outlineVert.x) / outlineBounds.width;\n    //     // var halfIndices = [0, Math.floor(baseShape.vertices.length / 2)];\n    //     // for (var j = 0; j < halfIndices.length; j++) {\n    //     //   var i = halfIndices[j];\n    //     //   var shapeVert = baseShape.vertices[i];\n    //     //   if (isBending) {\n    //     //     var vert = new THREE.Vector3(shapeVert.x * outlineXPct, 0, shapeVert.y * outlineXPct);\n    //     //     this._bendVertex(vert, bendAngle, arcRadius, heightT);\n    //     //     vert.y += outlineBounds.max.y;\n    //     //   } else {\n    //     //     var vert = new THREE.Vector3(shapeVert.x * outlineXPct, outlineVert.y, shapeVert.y * outlineXPct);\n    //     //   }\n    //     //   var perpDifference = new THREE.Vector3(outlineVert.x - perpendicularVert.x, outlineVert.y - perpendicularVert.y, 0);\n    //     //   if (i == 0) var endVert = new THREE.Vector3(vert.x - perpendicularVert.x, vert.y + perpendicularVert.y, 0);\n    //     //   else var endVert = new THREE.Vector3(vert.x + perpendicularVert.x, vert.y + perpendicularVert.y, 0);\n    //     //   rotateVert(endVert, bendAngle * heightT, vert.x, vert.y);\n    //     //   var outerPerpVert = vert.clone();\n    //     //   outerPerpVert.x += perpDifference.x;\n    //     //   outerPerpVert.y += perpDifference.y;\n    //     //   outerPerpVert.z += perpDifference.z;\n    //     //   if (normalizePerpendiculars) {\n    //     //     normalizeVectorXY(vert, endVert, normalsLength);\n    //     //   }\n    //     //   if (i == 0) {\n    //     //     this.outerPerpLines.push(new THREE.Line3(vert, endVert));\n    //     //   } else {\n    //     //     this.innerPerpLines.push(new THREE.Line3(vert, endVert));\n    //     //   }\n    //     // } // END for\n    //     var outlineXPct = (outlineBounds.max.x - outlineVert.x) / outlineBounds.width;\n    //     var halfIndices = [0, Math.floor(baseShape.vertices.length / 2)];\n    //     // Just append? Should be growing from 0 to n-1\n    //     this.dildoNormals[outlineSegmentIndex] = [];\n    //     // for (var j = 0; j < halfIndices.length; j++) {\n    //     console.log(\"baseShape.vertices.length\", baseShape.vertices.length);\n    //     for (var i = 0; i < baseShape.vertices.length; i++) {\n    //       //   var i = halfIndices[j];\n    //       var shapeVert = baseShape.vertices[i];\n    //       var perpDifference = new THREE.Vector3(outlineVert.x - perpendicularVert.x, outlineVert.y - perpendicularVert.y, 0);\n    //       normalizeVectorXY(outlineVert, perpDifference, normalsLength);\n    //       rotateVertY(perpDifference, bendAngle * heightT, vert.x, vert.y);\n    //       if (i == 0) {\n    //         console.log(\"perpDifference\", perpDifference);\n    //       }\n    //       if (isBending) {\n    //         var vert = new THREE.Vector3(shapeVert.x * outlineXPct, 0, shapeVert.y * outlineXPct);\n    //         // vert.add(new THREE.Vector3(perpDifference.x, 0, perpDifference.y));\n    //         // vert.sub(perpDifference);\n    //         this._bendVertex(vert, bendAngle, arcRadius, heightT);\n    //         vert.y += outlineBounds.max.y;\n    //       } else {\n    //         var vert = new THREE.Vector3(shapeVert.x * outlineXPct, outlineVert.y, shapeVert.y * outlineXPct);\n    //         // vert.add(new THREE.Vector3(perpDifference.x, perpDifference.y, 0));\n    //         // vert.sub(perpDifference);\n    //       }\n    //       //   var perpDifference = new THREE.Vector3(outlineVert.x - perpendicularVert.x, outlineVert.y - perpendicularVert.y, 0);\n    //       // TODO: check (this is in both cases the same)\n    //       //   if (i == 0) var endVert = new THREE.Vector3(vert.x - perpendicularVert.x, vert.y + perpendicularVert.y, vert.z);\n    //       //   //0);\n    //       //   else var endVert = new THREE.Vector3(vert.x + perpendicularVert.x, vert.y + perpendicularVert.y, vert.z); // 0);\n    //       // var endVert = new THREE.Vector3(vert.x + perpendicularVert.x, vert.y + perpendicularVert.y, vert.z);\n    //       //   rotateVert(endVert, bendAngle * heightT, vert.x, vert.y);\n    //       var outerPerpVert = vert.clone();\n    //       outerPerpVert.x += perpDifference.x;\n    //       outerPerpVert.y += perpDifference.y;\n    //       outerPerpVert.z += perpDifference.z;\n    //       // TODO: re-check\n    //       if (true || normalizePerpendiculars) {\n    //         // normalizeVectorXY(vert, endVert, normalsLength);\n    //         // normalizeVectorXYZ(vert, endVert, normalsLength);\n    //       }\n    //       // Add to cut lines?\n    //       //   if (i == 0) {\n    //       //     this.outerPerpLines.push(new THREE.Line3(vert, endVert));\n    //       //   } else if (i == halfIndices[1]) {\n    //       //     this.innerPerpLines.push(new THREE.Line3(vert, endVert));\n    //       //   }\n    //       // Add to regular normals\n    //       this.dildoNormals[outlineSegmentIndex].push(vert);\n    //       if (i == 0) {\n    //         // console.log(\"endVert\", outerPerpVert);\n    //       }\n    //     } // END for\n    //   }\n    /**\n     * Pre: perpLines are already built.\n     *\n     * Note: the last indices in the array will show to the point equivalent to the bottom point.\n     *\n     * @param {*} options\n     */\n    DildoGeometry.prototype.__makeFlatSideVertices = function (shapeRadius) {\n        // We are using the earcut algorithm later\n        //  + create an outline of the perpendicular end points\n        //  + shift the outline to the left bound of the mesh\n        //  + [LATER] run earcut\n        //  + [LATER] add all triangle faces\n        //  + [LATER] create a copy of the vertices and the triangulation the the right side\n        // Step 1: serialize the 2d vertex data along the perpendicular path\n        // var polygon = new Polygon(this.getPerpendicularPathVertices(true), false);\n        this.flatSidePolygon = new plotboilerplate_1.Polygon(this.getPerpendicularPathVertices(true), false);\n        this.flatSideBounds = this.flatSidePolygon.getBounds();\n        // Step 2: Add the 3d vertices to this geometry (and store positions in left-/rightFlatIndices array)\n        for (var i = 0; i < this.flatSidePolygon.vertices.length; i++) {\n            var nextIndex = this.vertices.length;\n            this.leftFlatIndices.push(nextIndex);\n            this.vertices.push(new THREE.Vector3(this.flatSidePolygon.vertices[i].x, this.flatSidePolygon.vertices[i].y, shapeRadius));\n            if (i === 0 || i + 1 === this.flatSidePolygon.vertices.length || i + 2 === this.flatSidePolygon.vertices.length) {\n                // Keep track of the four corner points (two left, two right)\n                this.hollowBottomEdgeVertIndices.push(nextIndex);\n            }\n        }\n        for (var i = 0; i < this.flatSidePolygon.vertices.length; i++) {\n            var nextIndex = this.vertices.length;\n            this.rightFlatIndices.push(nextIndex);\n            this.vertices.push(new THREE.Vector3(this.flatSidePolygon.vertices[i].x, this.flatSidePolygon.vertices[i].y, -shapeRadius));\n            if (i === 0 || i + 1 === this.flatSidePolygon.vertices.length || i + 2 === this.flatSidePolygon.vertices.length) {\n                // Keep track of the four corner points (two left, two right)\n                this.hollowBottomEdgeVertIndices.push(nextIndex);\n            }\n        }\n    };\n    /**\n     * Pre: perpLines are already built.\n     *\n     * Note: the last indices in the array will show to the point equivalent to the bottom point.\n     *\n     * @param {*}\n     */\n    DildoGeometry.prototype.__makeFlatSideFaces = function () {\n        // We are using the earcut algorithm here\n        //  + [DONE before] create an outline of the perpendicular end points\n        //  + [DONE before] shift the outline to the left bound of the mesh\n        //  + run earcut\n        //  + add all triangle faces\n        //  + create a copy of the vertices and the triangulation the the right side\n        var _self = this;\n        // Array<THREE.Vector3>  (compatible with XYCoords :)\n        var polygonVertices = this.leftFlatIndices.map(function (flatSideIndex) {\n            return _self.vertices[flatSideIndex];\n        });\n        var polygonData = GeometryGenerationHelpers_1.GeometryGenerationHelpers.flattenVert2dArray(polygonVertices);\n        // Step 3: run Earcut\n        var triangleIndices = (0, earcut_typescript_1.earcut)(polygonData);\n        // Step 4: process the earcut result;\n        //         add the retrieved triangles as geometry faces.\n        for (var i = 0; i + 2 < triangleIndices.length; i += 3) {\n            var a = triangleIndices[i];\n            var b = triangleIndices[i + 1];\n            var c = triangleIndices[i + 2];\n            GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeFace3(this, this.leftFlatIndices[a], this.leftFlatIndices[b], this.leftFlatIndices[c]);\n            this.leftFlatTriangleIndices.push([this.leftFlatIndices[a], this.leftFlatIndices[b], this.leftFlatIndices[c]]);\n        }\n        for (var i = 0; i + 2 < triangleIndices.length; i += 3) {\n            var a = triangleIndices[i];\n            var b = triangleIndices[i + 1];\n            var c = triangleIndices[i + 2];\n            GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeFace3(this, this.rightFlatIndices[a], this.rightFlatIndices[c], this.rightFlatIndices[b]);\n            this.rightFlatTriangleIndices.push([this.rightFlatIndices[a], this.rightFlatIndices[b], this.rightFlatIndices[c]]);\n        }\n    };\n    DildoGeometry.prototype.getPerpendicularPathVertices = function (includeBottomVert, getInner) {\n        // Array<XYCoords>\n        var polygonVertices = [];\n        for (var i = 0; i < this.innerPerpLines.length; i++) {\n            polygonVertices.push(getInner ? this.innerPerpLines[i].start : this.innerPerpLines[i].end);\n        }\n        // Reverse the outer path segment (both begin at bottom and meet at the top)\n        for (var i = this.outerPerpLines.length - 1; i >= 0; i--) {\n            polygonVertices.push(getInner ? this.outerPerpLines[i].start : this.outerPerpLines[i].end);\n        }\n        // Also add base point at last index\n        if (includeBottomVert) {\n            polygonVertices.push(this.vertices[this.bottomIndex]);\n        }\n        return polygonVertices;\n    };\n    DildoGeometry.prototype.getPerpendicularHullLines = function () {\n        // Array<XYCoords>\n        var perpLines = [];\n        for (var i = 0; i < this.innerPerpLines.length; i++) {\n            perpLines.push(this.innerPerpLines[i]);\n        }\n        // Reverse the outer path segment (both begin at bottom and meet at the top)\n        for (var i = this.outerPerpLines.length - 1; i >= 0; i--) {\n            perpLines.push(this.outerPerpLines[i]);\n        }\n        return perpLines;\n    };\n    /**\n     * Construct the top vertex that's used to closed the cylinder geometry at the top.\n     *\n     * @param {plotboilerplate.Bounds} outlineBounds\n     * @param {boolean} isBending\n     * @param {number|NaN|undefined} bendAngle\n     * @param {number|undefined} arcRadius\n     * @returns THREE.Vector\n     */\n    DildoGeometry.prototype._getTopVertex = function (outlineBounds, isBending, bendAngle, arcRadius) {\n        if (isBending) {\n            var topPoint = new THREE.Vector3(0, 0, 0);\n            this._bendVertex(topPoint, bendAngle, arcRadius, 1.0);\n            topPoint.y += outlineBounds.max.y;\n            return topPoint;\n        }\n        else {\n            return new THREE.Vector3(0, outlineBounds.min.y, 0);\n        }\n    };\n    /**\n     * Construct the bottom vertex that's used to closed the cylinder geometry at the bottom.\n     *\n     * @param {plotboilerplate.Bounds} outlineBounds\n     * @param {boolean} isBending\n     * @returns THREE.Vector\n     */\n    DildoGeometry.prototype._getBottomVertex = function (outlineBounds) {\n        var bottomPoint = new THREE.Vector3(0, outlineBounds.max.y, 0);\n        // if (isBending) {\n        // No need to bend the bottom point (no effect)\n        // this._bendVertex(bottomPoint, bendAngle, arcRadius, 0.0);\n        // }\n        return bottomPoint;\n    };\n    /**\n     * A helper function to 'bend' a vertex position around the desired bend axis (angle + radius).\n     * @private\n     * @param {} vert\n     * @param {*} bendAngle\n     * @param {*} arcRadius\n     * @param {*} heightT\n     */\n    DildoGeometry.prototype._bendVertex = function (vert, bendAngle, arcRadius, heightT) {\n        var axis = new THREE.Vector3(0, 0, 1);\n        var angle = bendAngle * heightT;\n        // Move slice point along radius, rotate, then move back\n        // (equivalent to rotation around arc center)\n        vert.x -= arcRadius;\n        vert.applyAxisAngle(axis, angle);\n        vert.x += arcRadius;\n    };\n    /**\n     * Rotate a 3d vector around the z axis (back-front-axis).\n     *\n     * @param {THREE.Vector3} vert\n     * @param {THREE.Vector3} angle\n     * @param {number} xCenter\n     * @param {number} yCenter\n     * @returns\n     */\n    //   // TODO: move to helpers\n    //   var rotateVert = function (vert, angle, xCenter, yCenter) {\n    //     var axis = new THREE.Vector3(0, 0, 1);\n    //     vert.x -= xCenter;\n    //     vert.y -= yCenter;\n    //     vert.applyAxisAngle(axis, angle);\n    //     vert.x += xCenter;\n    //     vert.y += yCenter;\n    //     return vert;\n    //   };\n    //   /**\n    //    * Rotate a 3d vector around the y axis (up-down-axis).\n    //    *\n    //    * @param {THREE.Vector3} vert\n    //    * @param {THREE.Vector3} angle\n    //    * @param {number} xCenter\n    //    * @param {number} zCenter\n    //    * @returns\n    //    */\n    //   // TODO: move to helpers\n    //   var rotateVertY = function (vert, angle, xCenter, zCenter) {\n    //     var axis = new THREE.Vector3(0, 1, 0);\n    //     vert.x -= xCenter;\n    //     vert.z -= zCenter;\n    //     vert.applyAxisAngle(axis, angle);\n    //     vert.x += xCenter;\n    //     vert.z += zCenter;\n    //     return vert;\n    //   };\n    //   /**\n    //    * Normalize a 2D vector to a given length.\n    //    *\n    //    * @param {XYCoords} base - The start point.\n    //    * @param {XYCoords} extend - The end point.\n    //    * @param {number} normalLength - The desired length\n    //    */\n    //   var normalizeVectorXY = function (base, extend, normalLength) {\n    //     var diff = { x: extend.x - base.x, y: extend.y - base.y }; // XYCoords\n    //     var length = Math.sqrt(diff.x * diff.x + diff.y * diff.y);\n    //     var ratio = normalLength / length;\n    //     extend.x = base.x + diff.x * ratio;\n    //     extend.y = base.y + diff.y * ratio;\n    //   };\n    // computeVertexNormals() {\n    //   for( var f = 0; f < this.faces.length; f++ ) {\n    //       var face = this.faces[f];\n    //   }\n    // }\n    // TODO\n    DildoGeometry.prototype.applyBumpMap = function (bumpMapTexture) {\n        // Build normals\n        for (var i = 0; i < this.vertexMatrix.length; i++) {\n            for (var j = 0; j < this.vertexMatrix[i].length; j++) {\n                var vertIndex = this.vertexMatrix[i][j];\n                var vertex = this.vertices[vertIndex];\n            }\n        }\n    };\n    /**\n     * Build up the faces for this geometry.\n     * @param {*} options\n     */\n    // DildoGeometry.prototype._buildFaces = function (options) {\n    DildoGeometry.prototype._buildFaces = function (options) {\n        var baseShape = options.baseShape;\n        var outlineSegmentCount = options.outlineSegmentCount;\n        var closeTop = Boolean(options.closeTop);\n        var closeBottom = Boolean(options.closeBottom);\n        var makeHollow = Boolean(options.makeHollow);\n        var baseShapeSegmentCount = baseShape.vertices.length;\n        this.faceVertexUvs[0] = [];\n        for (var s = 0; s < outlineSegmentCount; s++) {\n            for (var i = 0; i < baseShapeSegmentCount; i++) {\n                if (s > 0) {\n                    if (i > 0) {\n                        this.addFace4ByIndices(s, i - 1, s - 1, i, makeHollow);\n                        if (i + 1 == baseShape.vertices.length) {\n                            // Close the gap on the shape\n                            this.addFace4ByIndices(s, i, s - 1, 0, makeHollow);\n                        }\n                    }\n                }\n            } // END for\n        } // END for\n        if (makeHollow) {\n            this.__makeFlatSideFaces();\n            this.__makeBackFrontFaces();\n        }\n        if (closeBottom) {\n            if (makeHollow)\n                this._buildHollowBottomFaces();\n            else\n                this._buildEndFaces(this.bottomIndex, 0, baseShapeSegmentCount, false);\n        }\n        if (closeTop) {\n            this._buildEndFaces(this.topIndex, this.vertexMatrix.length - 1, baseShapeSegmentCount, makeHollow);\n        }\n    };\n    DildoGeometry.prototype._buildHollowBottomFaces = function () {\n        var _self = this;\n        var edgeVertices = this.hollowBottomEdgeVertIndices.map(function (edgeVertIndex) {\n            return _self.vertices[edgeVertIndex];\n        });\n        var findClosestEdgeIndex = function (vert) {\n            // THREE.Vector\n            var index = 0;\n            var distance = Number.MAX_VALUE;\n            var tmpDist;\n            for (var i = 0; i < edgeVertices.length; i++) {\n                var tmpIndex = _self.hollowBottomEdgeVertIndices[i];\n                if ((tmpDist = edgeVertices[i].distanceTo(vert)) < distance) {\n                    index = tmpIndex;\n                    distance = tmpDist;\n                }\n            }\n            return index;\n        };\n        // 'Last index' starts at last point at all : )\n        var n = this.vertexMatrix[0].length;\n        var lastIndex = findClosestEdgeIndex(this.vertices[n - 1]);\n        var triangleIndices; // = []; // [number,number,number]\n        // Use first slice (at bottom position)\n        for (var i = 0; i < n; i++) {\n            var curIndex = findClosestEdgeIndex(this.vertices[this.vertexMatrix[0][i]]);\n            // Close gap to last (different shell index)\n            triangleIndices = [lastIndex, this.vertexMatrix[0][i == 0 ? n - 1 : i - 1], this.vertexMatrix[0][i]];\n            this.faces.push(new THREE.Face3(triangleIndices[0], triangleIndices[1], triangleIndices[2])); // Same?\n            this.hollowBottomTriagles.push(triangleIndices);\n            if (lastIndex !== curIndex) {\n                // Add normal triangle to same shell index\n                triangleIndices = [curIndex, lastIndex, this.vertexMatrix[0][i]];\n                this.faces.push(new THREE.Face3(triangleIndices[0], triangleIndices[1], triangleIndices[2]));\n                this.hollowBottomTriagles.push(triangleIndices);\n            }\n            lastIndex = curIndex;\n        }\n    };\n    /**\n     * Build the face and the top or bottom end of the geometry. Imagine the dildo geometry\n     * as a closed cylinder: this function created the top or the bottom 'circle'.\n     *\n     * @param {number} endVertexIndex - This should be `this.topIndex` or `this.bottomIndex`.\n     * @param {number} shapeIndex - This should be `0` (top) or `outlineSegmentCount-1` (bottom).\n     * @param {number} baseShapeSegmentCount - The number of shape segments.\n     * @param {boolean=false} inverseFaceDirection - If true then the face will have left winding order (instead of right which is the default).\n     */\n    DildoGeometry.prototype._buildEndFaces = function (endVertexIndex, shapeIndex, baseShapeSegmentCount, inverseFaceDirection) {\n        // Close at top.\n        for (var i = 1; i < baseShapeSegmentCount; i++) {\n            GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeFace3(this, this.vertexMatrix[shapeIndex][i - 1], endVertexIndex, this.vertexMatrix[shapeIndex][i], inverseFaceDirection);\n            if (i + 1 == baseShapeSegmentCount) {\n                GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeFace3(this, this.vertexMatrix[shapeIndex][i], endVertexIndex, this.vertexMatrix[shapeIndex][0], inverseFaceDirection);\n            }\n        }\n    };\n    /**\n     * Pre: flatSides are made\n     *\n     * @param {*} options\n     */\n    DildoGeometry.prototype.__makeBackFrontFaces = function () {\n        // Connect left and right side (important: ignore bottom vertex at last index)\n        for (var i = 1; i + 1 < this.flatSidePolygon.vertices.length; i++) {\n            GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeFace4(this, this.leftFlatIndices[i], this.leftFlatIndices[i - 1], this.rightFlatIndices[i], this.rightFlatIndices[i - 1]);\n        }\n    };\n    /**\n     * Build the texture UV mapping for all faces.\n     *\n     * @param {Polygon} options.baseShape\n     * @param {number} options.outlineSegmentCount\n     * @param {number} options.vertices.length\n     */\n    // DildoGeometry.prototype._buildUVMapping = function (options) {\n    DildoGeometry.prototype._buildUVMapping = function (options) {\n        var baseShape = options.baseShape;\n        var outlineSegmentCount = options.outlineSegmentCount;\n        var baseShapeSegmentCount = baseShape.vertices.length;\n        var closeTop = Boolean(options.closeTop);\n        var closeBottom = Boolean(options.closeBottom);\n        var makeHollow = Boolean(options.makeHollow);\n        // https://stackoverflow.com/questions/20774648/three-js-generate-uv-coordinate\n        for (var s = 1; s < outlineSegmentCount; s++) {\n            for (var i = 1; i < baseShape.vertices.length; i++) {\n                GeometryGenerationHelpers_1.GeometryGenerationHelpers.addCylindricUV4(this, s, i - 1, s - 1, i, outlineSegmentCount, baseShapeSegmentCount, makeHollow);\n                if (i + 1 == baseShape.vertices.length) {\n                    // Close the gap on the shape\n                    GeometryGenerationHelpers_1.GeometryGenerationHelpers.addCylindricUV4(this, s, i - 1, s - 1, i, outlineSegmentCount, baseShapeSegmentCount, makeHollow);\n                }\n            }\n        }\n        if (makeHollow) {\n            // Make flat side UVS (left)\n            // Note: left flat side and right flat side have the same number of polygon vertices\n            for (var i = 0; i < this.leftFlatTriangleIndices.length; i++) {\n                var leftA = this.leftFlatTriangleIndices[i][0];\n                var leftB = this.leftFlatTriangleIndices[i][1];\n                var leftC = this.leftFlatTriangleIndices[i][2];\n                UVHelpers_1.UVHelpers.makeFlatTriangleUVs(this, this.flatSideBounds, leftA, leftB, leftC);\n            }\n            // Make flat side UVS (right)\n            for (var i = 0; i < this.rightFlatTriangleIndices.length; i++) {\n                // NOTE: as the triangles are computed on the left flat side -> for the right side\n                //          change the winding order!!!\n                var rightA = this.rightFlatTriangleIndices[i][0];\n                var rightB = this.rightFlatTriangleIndices[i][2];\n                var rightC = this.rightFlatTriangleIndices[i][1];\n                UVHelpers_1.UVHelpers.makeFlatTriangleUVs(this, this.flatSideBounds, rightA, rightB, rightC);\n            }\n            // TODO: add these as function\n            for (var i = 1; i + 1 < this.flatSidePolygon.vertices.length; i++) {\n                var ratioI = (i - 1) / (this.flatSidePolygon.vertices.length - 1);\n                var ratioJ = i / (this.flatSidePolygon.vertices.length - 1);\n                this.faceVertexUvs[0].push([\n                    new THREE.Vector2(0.0, ratioJ),\n                    new THREE.Vector2(0.0, ratioI),\n                    new THREE.Vector2(1.0, ratioJ)\n                ]);\n                this.faceVertexUvs[0].push([\n                    new THREE.Vector2(0.0, ratioI),\n                    new THREE.Vector2(1.0, ratioI),\n                    new THREE.Vector2(1.0, ratioJ)\n                ]);\n            }\n        } // END if[makeHollow]\n        // Build UV mapping for the bottom (base)\n        if (closeBottom) {\n            if (makeHollow) {\n                makeHollowBottomUVs(this, this.hollowBottomEdgeVertIndices, this.hollowBottomTriagles);\n            }\n            else {\n                for (var i = 1; i < baseShapeSegmentCount; i++) {\n                    GeometryGenerationHelpers_1.GeometryGenerationHelpers.addPyramidalBaseUV3(this, i - 1, baseShapeSegmentCount);\n                    if (i + 1 == baseShapeSegmentCount) {\n                        // Close the gap on the shape\n                        GeometryGenerationHelpers_1.GeometryGenerationHelpers.addPyramidalBaseUV3(this, i - 1, baseShapeSegmentCount);\n                    }\n                }\n            }\n        }\n        // Build UV mapping for the top (closing element)\n        if (closeTop) {\n            var lastIndex = outlineSegmentCount - 1;\n            for (var i = 1; i < baseShapeSegmentCount; i++) {\n                GeometryGenerationHelpers_1.GeometryGenerationHelpers.addPyramidalBaseUV3(this, i - 1, baseShapeSegmentCount);\n                if (i + 1 == baseShapeSegmentCount) {\n                    // Close the gap on the shape\n                    GeometryGenerationHelpers_1.GeometryGenerationHelpers.addPyramidalBaseUV3(this, lastIndex, baseShapeSegmentCount);\n                }\n            }\n        }\n        this.uvsNeedUpdate = true;\n    };\n    /**\n     * Build a triangulated face4 (two face3) for the given matrix index pairs. The method will create\n     * two right-turning triangles.\n     *\n     * <pre>\n     *       (a,b)---(c,b)\n     *         |    /  |\n     *         |   /   |\n     *         |  /    |\n     *       (a,d)---(c,d)\n     * </pre>\n     *\n     * @param {number} a - The first primary index in the `vertexMatrix` array.\n     * @param {number} b - The first seconday index in the `vertexMatrix[a]` array.\n     * @param {number} c - The second primary index in the `vertexMatrix` array.\n     * @param {number} d - The second seconday index in the `vertexMatrix[c]` array.\n     * @param {boolean=false} inverseFaceDirection - If true then the face will have left winding order (instead of right which is the default).\n     */\n    DildoGeometry.prototype.addFace4ByIndices = function (a, b, c, d, inverseFaceDirection) {\n        GeometryGenerationHelpers_1.GeometryGenerationHelpers.makeFace4(this, this.vertexMatrix[a][b], this.vertexMatrix[c][b], this.vertexMatrix[a][d], this.vertexMatrix[c][d], inverseFaceDirection);\n    };\n    /**\n     * Build up the vertices in this geometry.\n     *\n     * @param {} options\n     */\n    DildoGeometry.prototype._buildVertices = function (options) {\n        var baseShape = options.baseShape;\n        var outline = options.outline;\n        var outlineSegmentCount = options.outlineSegmentCount;\n        var makeHollow = Boolean(options.makeHollow);\n        var bendAngleRad = (options.bendAngle / 180) * Math.PI;\n        var hollowStrengthX = options.hollowStrengthX; // default=15.0? // TODO: hollow strength as param\n        var twistAngle = options.twistAngle * DEG_TO_RAD;\n        var normalizePerpendiculars = Boolean(options.normalizePerpendiculars);\n        var normalsLength = typeof options.normalsLength !== \"undefined\" ? options.normalsLength : 10.0;\n        var outlineBounds = outline.getBounds();\n        var shapeHeight = outlineBounds.height;\n        var shapeBounds = baseShape.getBounds();\n        var shapeCenter = shapeBounds.getCenter();\n        var arcLength = shapeHeight;\n        var arcRadius = arcLength / bendAngleRad;\n        var isBending = options.isBending &&\n            !isNaN(arcRadius) &&\n            arcRadius !== Number.POSITIVE_INFINITY &&\n            arcRadius !== Number.NEGATIVE_INFINITY &&\n            Math.abs(bendAngleRad) > 0.01;\n        for (var s = 0; s < outlineSegmentCount; s++) {\n            var t = Math.min(1.0, Math.max(0.0, s / (outlineSegmentCount - 1)));\n            this.vertexMatrix[s] = [];\n            var outlineVert = outline.getPointAt(t);\n            var perpendicularVert = outline.getPerpendicularAt(t);\n            var heightT = (outlineBounds.max.y - outlineVert.y) / shapeHeight;\n            var outlineT = s / (outlineSegmentCount - 1);\n            this.__buildSlice(baseShape, outlineBounds, outlineVert, s, heightT, isBending, bendAngleRad, arcRadius, twistAngle * outlineT);\n            this.__buildSpine(shapeCenter, outlineBounds, outlineVert, heightT, isBending, bendAngleRad, arcRadius);\n            this.__buildPerps(baseShape, outlineBounds, outlineVert, perpendicularVert, heightT, isBending, bendAngleRad, arcRadius, normalizePerpendiculars, normalsLength);\n            // this.__buildNormals(\n            //   s,\n            //   baseShape,\n            //   outlineBounds,\n            //   outlineVert,\n            //   perpendicularVert,\n            //   heightT,\n            //   isBending,\n            //   bendAngleRad,\n            //   arcRadius,\n            //   normalizePerpendiculars,\n            //   normalsLength\n            // );\n        } // END for\n        var topVertex = this._getTopVertex(outlineBounds, isBending, bendAngleRad, arcRadius);\n        var bottomVertex = this._getBottomVertex(outlineBounds);\n        this.topIndex = this.vertices.length;\n        this.vertices.push(topVertex);\n        this.bottomIndex = this.vertices.length;\n        this.vertices.push(bottomVertex);\n        if (makeHollow) {\n            // Construct the left and the right flat bounds (used to make a casting mould)\n            this.__makeFlatSideVertices(Math.max(shapeBounds.width, shapeBounds.height) / 2.0 + hollowStrengthX);\n        }\n    };\n    DildoGeometry.prototype.__applyBumpmap = function (bumpmapTexture) {\n        var tmp = this;\n        for (var i = 0; i < this.vertexMatrix.length; i++) {\n            for (var j = 0; j < this.vertexMatrix[i].length; j++) {\n                // apply local bump map\n                // const normal = tmp.\n            }\n        }\n    };\n    return DildoGeometry;\n}(DildoBaseClass)); // END class\nexports.DildoGeometry = DildoGeometry;\n// TODO: move to helpers\nvar rotateVert = function (vert, angle, xCenter, yCenter) {\n    var axis = new THREE.Vector3(0, 0, 1);\n    vert.x -= xCenter;\n    vert.y -= yCenter;\n    vert.applyAxisAngle(axis, angle);\n    vert.x += xCenter;\n    vert.y += yCenter;\n    return vert;\n};\n/**\n * Rotate a 3d vector around the y axis (up-down-axis).\n *\n * @param {THREE.Vector3} vert\n * @param {THREE.Vector3} angle\n * @param {number} xCenter\n * @param {number} zCenter\n * @returns\n */\n// TODO: move to helpers\nvar rotateVertY = function (vert, angle, xCenter, zCenter) {\n    var axis = new THREE.Vector3(0, 1, 0);\n    vert.x -= xCenter;\n    vert.z -= zCenter;\n    vert.applyAxisAngle(axis, angle);\n    vert.x += xCenter;\n    vert.z += zCenter;\n    return vert;\n};\n// /**\n//  * Normalize a 2D vector to a given length.\n//  *\n//  * @param {XYCoords} base - The start point.\n//  * @param {XYCoords} extend - The end point.\n//  * @param {number} normalLength - The desired length\n//  */\n// // TODO: add types\n// var normalizeVectorXY = function (base, extend, normalLength) {\n//   var diff = { x: extend.x - base.x, y: extend.y - base.y }; // XYCoords\n//   var length = Math.sqrt(diff.x * diff.x + diff.y * diff.y);\n//   var ratio = normalLength / length;\n//   extend.x = base.x + diff.x * ratio;\n//   extend.y = base.y + diff.y * ratio;\n// };\n/**\n * Normalize a 2D vector to a given length.\n *\n * @param {THREE.Vector3} base - The start point.\n * @param {THREE.Vector3} extend - The end point.\n * @param {number} normalLength - The desired length\n */\n// TOTO: add types\nvar normalizeVectorXYZ = function (base, extend, normalLength) {\n    var diff = { x: extend.x - base.x, y: extend.y - base.y, z: extend.z - base.z };\n    var length = Math.sqrt(diff.x * diff.x + diff.y * diff.y + diff.z * diff.z);\n    var ratio = normalLength / length;\n    extend.x = base.x + diff.x * ratio;\n    extend.y = base.y + diff.y * ratio;\n    extend.z = base.z + diff.z * ratio;\n};\n/**\n *\n * @param {THREE.Geometry} thisGeometry\n * @param {Array<number>} containingPolygonIndices\n * @param {Array<[number,number,number]>} triangles\n */\nvar makeHollowBottomUVs = function (thisGeometry, containingPolygonIndices, triangles) {\n    // Compute polyon bounds\n    var polygonBounds = plotboilerplate_1.Bounds.computeFromVertices(containingPolygonIndices.map(function (vertIndex) {\n        return new plotboilerplate_1.Vertex(thisGeometry.vertices[vertIndex].x, thisGeometry.vertices[vertIndex].z);\n    }));\n    var getUVRatios = function (vert) {\n        // console.log((vert.x - shapeBounds.min.x) / shapeBounds.width, (vert.y - shapeBounds.min.y) / shapeBounds.height);\n        return new THREE.Vector2((vert.x - polygonBounds.min.x) / polygonBounds.width, (vert.z - polygonBounds.min.y) / polygonBounds.height);\n    };\n    // ON the x-z-plane {x, *, z}\n    for (var t = 0; t < triangles.length; t++) {\n        var vertA = thisGeometry.vertices[triangles[t][0]];\n        var vertB = thisGeometry.vertices[triangles[t][1]];\n        var vertC = thisGeometry.vertices[triangles[t][2]];\n        thisGeometry.faceVertexUvs[0].push([getUVRatios(vertA), getUVRatios(vertB), getUVRatios(vertC)]);\n    }\n};\n//# sourceMappingURL=DildoGeometry.js.map","\"use strict\";\n/**\n * A collection of materials and material making functions.\n *\n * @require THREE\n *\n * @author Ikaros Kappler\n * @date 2021-07-02\n * @modified 2021-08-04 Ported to Typescript from vanilla JS.\n * @version 1.0.1\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DildoMaterials = void 0;\nvar THREE = require(\"three\");\nexports.DildoMaterials = (function () {\n    /**\n     * Map<string,texture>\n     */\n    var textureStore = new Map();\n    var DildoMaterials = {\n        /**\n         * Create a new mesh material from the given parameters.\n         *\n         * @param {boolean} useTextureImage - Load and use the given texture (at `textureImagePath`) if set to true.\n         * @param {boolean} wireframe - Create a wireframe material if true.\n         * @param {string} textureImagePath - The texture path to use (if useTextureImage is set to true).\n         * @param {THREE.DoubleSide|THREE.FrontSide|THREE.Backside} doubleSingleSide - Wether to display one one or both face sides.\n         * @returns\n         */\n        createMainMaterial: function (useTextureImage, wireframe, textureImagePath, doubleSingleSide) {\n            return useTextureImage\n                ? new THREE.MeshLambertMaterial({\n                    color: 0xffffff,\n                    wireframe: wireframe,\n                    //   flatShading: false,\n                    depthTest: true,\n                    opacity: 1.0,\n                    // side: THREE.DoubleSide,\n                    side: doubleSingleSide,\n                    visible: true,\n                    emissive: 0x0,\n                    reflectivity: 1.0,\n                    refractionRatio: 0.89,\n                    map: DildoMaterials.loadTextureImage(textureImagePath)\n                })\n                : new THREE.MeshPhongMaterial({\n                    color: 0x3838ff,\n                    wireframe: wireframe,\n                    flatShading: false,\n                    depthTest: true,\n                    opacity: 1.0,\n                    // side: THREE.DoubleSide,\n                    side: doubleSingleSide,\n                    visible: true,\n                    emissive: 0x0,\n                    reflectivity: 1.0,\n                    refractionRatio: 0.89,\n                    map: null\n                });\n        },\n        createSliceMaterial: function (useTextureImage, wireframe, textureImagePath) {\n            if (wireframe) {\n                return new THREE.MeshBasicMaterial({ wireframe: true });\n                // return new THREE.MeshStandardMaterial({ wireframe: true });\n            }\n            else {\n                return new THREE.MeshLambertMaterial({\n                    color: useTextureImage ? 0x888888 : 0xa1848a8,\n                    wireframe: false,\n                    // flatShading: false,\n                    depthTest: true,\n                    opacity: 1.0,\n                    side: THREE.DoubleSide,\n                    // side: doubleSingleSide,\n                    visible: true,\n                    emissive: 0x0,\n                    reflectivity: 1.0,\n                    refractionRatio: 0.89,\n                    map: useTextureImage ? DildoMaterials.loadTextureImage(textureImagePath) : null,\n                    vertexColors: false\n                });\n            }\n        },\n        /**\n         * Load a texture or get it from the internal buffer if it was already loaded before.\n         *\n         * @param {string} path - The path (absolute or relative) to the texture image to load.\n         * @returns {THREE.Texture}\n         */\n        loadTextureImage: function (path) {\n            var texture = textureStore.get(path);\n            if (!texture) {\n                // TODO: use a singleton here?\n                var loader = new THREE.TextureLoader();\n                texture = loader.load(path);\n                textureStore.set(path, texture);\n            }\n            return texture;\n        }\n    };\n    return DildoMaterials;\n})();\n//# sourceMappingURL=DildoMaterials.js.map","\"use strict\";\n/**\n * A collection of helper function used to generate dildo meshes.\n *\n * @require sliceGeometry\n *\n * @author   Ikaros Kappler\n * @date     2021-06-30\n * @modified 2021-08-29 Ported to Typescript from vanilla JS.\n * @version  0.0.1-alpha\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GeometryGenerationHelpers = void 0;\nvar THREE = require(\"three\");\n// import { earcut } from \"./thirdparty-ported/earcut\"; // TODO: fix earcut types, convert to custum library\nvar earcut_typescript_1 = require(\"earcut-typescript\");\nvar plotboilerplate_1 = require(\"plotboilerplate\");\n// import { sliceGeometry } from \"./thirdparty-ported/threejs-slice-geometry\"; // TODO: convert to custom library\nvar threejs_slice_geometry_typescript_1 = require(\"threejs-slice-geometry-typescript\"); // TODO: convert to custom library\nvar PlaneMeshIntersection_1 = require(\"./PlaneMeshIntersection\");\nvar clearDuplicateVertices3_1 = require(\"./clearDuplicateVertices3\");\nvar UVHelpers_1 = require(\"./UVHelpers\");\nvar constants_1 = require(\"./constants\");\nexports.GeometryGenerationHelpers = {\n    /**\n     * Create a (right-turning) triangle of the three vertices at index A, B and C.\n     *\n     * The default direction (right) can be changed to left to pass `invsereFaceDirection=true`.\n     *\n     * @param {THREE.Geometry} geometry - The geometry to add the face to.\n     * @param {number} vertIndexA\n     * @param {number} vertIndexB\n     * @param {number} vertIndexC\n     * @param {boolean=false} inverseFaceDirection - If true then the face will have left winding order (instead of right which is the default).\n     */\n    makeFace3: function (geometry, vertIndexA, vertIndexB, vertIndexC, inverseFaceDirection) {\n        if (inverseFaceDirection) {\n            geometry.faces.push(new THREE.Face3(vertIndexC, vertIndexB, vertIndexA));\n        }\n        else {\n            geometry.faces.push(new THREE.Face3(vertIndexA, vertIndexB, vertIndexC));\n        }\n    },\n    /**\n     * Build a triangulated face4 (two face3) for the given vertex indices. The method will create\n     * two right-turning triangles by default, or two left-turning triangles if `inverseFaceDirection`.\n     *\n     * <pre>\n     *         A-----B\n     *         |   / |\n     *         |  /  |\n     *         | /   |\n     *         C-----D\n     * </pre>\n     *\n     * @param {THREE.Geometry} geometry - The geometry to add the face to.\n     * @param {number} vertIndexA - The first vertex index.\n     * @param {number} vertIndexB - The second vertex index.\n     * @param {number} vertIndexC - The third vertex index.\n     * @param {number} vertIndexD - The fourth vertex index.\n     * @param {boolean=false} inverseFaceDirection - If true then the face will have left winding order (instead of right which is the default).\n     */\n    makeFace4: function (geometry, vertIndexA, vertIndexB, vertIndexC, vertIndexD, inverseFaceDirection) {\n        if (inverseFaceDirection) {\n            // Just inverse the winding order of both face3 elements\n            exports.GeometryGenerationHelpers.makeFace3(geometry, vertIndexA, vertIndexC, vertIndexB, false);\n            exports.GeometryGenerationHelpers.makeFace3(geometry, vertIndexC, vertIndexD, vertIndexB, false);\n        }\n        else {\n            exports.GeometryGenerationHelpers.makeFace3(geometry, vertIndexA, vertIndexB, vertIndexC, false);\n            exports.GeometryGenerationHelpers.makeFace3(geometry, vertIndexB, vertIndexD, vertIndexC, false);\n        }\n    },\n    /**\n     * Create texture UV coordinates for the rectangular two  triangles at matrix indices a, b, c and d.\n     *\n     * @param {THREE.Geometry} geometry - The geometry to add the face to.\n     * @param {number} a - The first face-4 vertex index.\n     * @param {number} b - The second face-4 vertex index.\n     * @param {number} c - The third face-4 vertex index.\n     * @param {number} d - The fourth face-4 vertex index.\n     * @param {number} outlineSegmentCount - The total number of segments on the outline.\n     * @param {number} baseShapeSegmentCount - The total number of segments on the base shape.\n     * @param {boolean=false} inverseFaceDirection - If true then the UV mapping is applied in left winding order (instead of right which is the default).\n     */\n    addCylindricUV4: function (geometry, a, b, c, d, outlineSegmentCount, baseShapeSegmentCount, inverseFaceDirection) {\n        if (inverseFaceDirection) {\n            // change: abc -> acb\n            // change: bdc -> cdb\n            geometry.faceVertexUvs[0].push([\n                new THREE.Vector2(a / outlineSegmentCount, b / baseShapeSegmentCount),\n                new THREE.Vector2(a / outlineSegmentCount, d / baseShapeSegmentCount),\n                new THREE.Vector2(c / outlineSegmentCount, b / baseShapeSegmentCount)\n            ]);\n            geometry.faceVertexUvs[0].push([\n                new THREE.Vector2(a / outlineSegmentCount, d / baseShapeSegmentCount),\n                new THREE.Vector2(c / outlineSegmentCount, d / baseShapeSegmentCount),\n                new THREE.Vector2(c / outlineSegmentCount, b / baseShapeSegmentCount)\n            ]);\n        }\n        else {\n            geometry.faceVertexUvs[0].push([\n                new THREE.Vector2(a / outlineSegmentCount, b / baseShapeSegmentCount),\n                new THREE.Vector2(c / outlineSegmentCount, b / baseShapeSegmentCount),\n                new THREE.Vector2(a / outlineSegmentCount, d / baseShapeSegmentCount)\n            ]);\n            geometry.faceVertexUvs[0].push([\n                new THREE.Vector2(c / outlineSegmentCount, b / baseShapeSegmentCount),\n                new THREE.Vector2(c / outlineSegmentCount, d / baseShapeSegmentCount),\n                new THREE.Vector2(a / outlineSegmentCount, d / baseShapeSegmentCount)\n            ]);\n        }\n    },\n    /**\n     * Create texture UV coordinates for the triangle at matrix indices a, b and c.\n     *\n     * @param {THREE.Geometry} geometry - The geometry to add the new faces to.\n     * @param {number} a - The current base shape segment index, must be inside [0,baseShapeSegmentCount-1].\n     * @param {number} baseShapeSegmentCount - The total number of base shape segments.\n     */\n    addPyramidalBaseUV3: function (geometry, a, baseShapeSegmentCount) {\n        // Create a mirrored texture to avoid hard visual cuts\n        var ratioA = 1.0 - Math.abs(0.5 - a / baseShapeSegmentCount) * 2;\n        var ratioB = 1.0 - Math.abs(0.5 - (a + 1) / baseShapeSegmentCount) * 2;\n        geometry.faceVertexUvs[0].push([new THREE.Vector2(ratioA, 0), new THREE.Vector2(0.5, 1), new THREE.Vector2(ratioB, 0)]);\n    },\n    /**\n     * Flatten an array of 2d vertices into a flat array of coordinates.\n     * (required by the earcut algorithm for example).\n     *\n     * @param {Array<XYCoords>} vertices2d\n     * @returns {Array<number>}\n     */\n    flattenVert2dArray: function (vertices2d) {\n        // Array<number>\n        var coordinates = [];\n        for (var i = 0; i < vertices2d.length; i++) {\n            coordinates.push(vertices2d[i].x, vertices2d[i].y);\n        }\n        return coordinates;\n    },\n    /**\n     * A helper function to create (discrete) circular 2d shapes.\n     *\n     * @param {number} radius - The radius of the circle.\n     * @param {number} pointCount - The number of vertices to construct the circle with.\n     * @param {number=1.0} excentricity - To create ellipses (default is 1.0).\n     * @returns {Polygon}\n     */\n    mkCircularPolygon: function (radius, pointCount, excentricity) {\n        if (typeof excentricity === \"undefined\") {\n            excentricity = 1.0;\n        }\n        var vertices = [];\n        var phi;\n        for (var i = 0; i < pointCount; i++) {\n            phi = Math.PI * 2 * (i / pointCount);\n            vertices.push(new plotboilerplate_1.Vertex(Math.cos(phi) * radius * excentricity, Math.sin(phi) * radius));\n        }\n        return new plotboilerplate_1.Polygon(vertices, false);\n    },\n    /**\n     * Slice a geometry at the given plane and add the remaining part(s).\n     *\n     * Note that only the right half (on the positive z axis) is kept. To obtain both you\n     * need to run the algorithm twice with two flipped planes.\n     *\n     * Note also that the mesh is open at the cut plane.\n     *\n     * @param {THREE.Geometry} unbufferedGeometry - The geometry to slice.\n     * @param {THREE.Plane} plane PlaneGeometry???\n     * @return {THREE.Geometry}\n     */\n    makeSlice: function (unbufferedGeometry, plane) {\n        // Slice mesh into two\n        // See https://github.com/tdhooper/threejs-slice-geometry\n        var closeHoles = false; // This might be configurable in a later version.\n        // TODO: cc\n        // var sliceMaterial = DildoMaterials.createSliceMaterial(wireframe);\n        // var slicedGeometry = sliceGeometry(unbufferedGeometry, plane, closeHoles);\n        var slicedGeometry = (0, threejs_slice_geometry_typescript_1.sliceGeometry)(unbufferedGeometry, plane, closeHoles);\n        // Now note that it's possible that the result might contain multiple vertices\n        // at the same position, which makes further calculations quite difficult.\n        // -> Merge multiple vertices into one\n        slicedGeometry.mergeVertices();\n        // And don't forget to compute the normals.\n        slicedGeometry.computeFaceNormals();\n        // var slicedMesh = new THREE.Mesh(slicedGeometry, sliceMaterial);\n        // var slicedMesh = new THREE.Mesh(new THREE.BufferGeometry().fromGeometry(slicedGeometry), sliceMaterial);\n        //   slicedMesh.position.y = -100;\n        //   slicedMesh.position.z = zOffset;\n        //   slicedMesh.userData[\"isExportable\"] = true;\n        //   thisGenerator.addMesh(slicedMesh);\n        return slicedGeometry;\n    },\n    /**\n     * This function creates the cut intersection elements to fill the (open) slice meshes.\n     *\n     * @param {DildoGeneration} thisGenerator\n     * @param {THREE.Mesh} mesh\n     * @param {IDildoGeometry} unbufferedGeometry\n     * @param {THREE.Plane} planeGeometry\n     * @returns\n     */\n    makeAndAddPlaneIntersection: function (thisGenerator, mesh, unbufferedGeometry, // THREE.Geometry,\n    planeGeometry, // THREE.Plane, // THREE.PlaneGeometry, // THREE.Plane ???\n    planeGeometryReal, \n    // TODO: use a proper global interface here\n    options // { showSplitShape?: boolean }\n    ) {\n        // Find the cut path\n        var planeMeshIntersection = new PlaneMeshIntersection_1.PlaneMeshIntersection();\n        // Array<THREE.Vector3>  (compatible with XYCoords :)\n        var intersectionPoints = planeMeshIntersection.getIntersectionPoints(mesh, unbufferedGeometry, planeGeometry, planeGeometryReal);\n        var EPS = 0.000001;\n        var uniqueIntersectionPoints = (0, clearDuplicateVertices3_1.clearDuplicateVertices3)(intersectionPoints, EPS);\n        var pointGeometry = new THREE.Geometry();\n        pointGeometry.vertices = uniqueIntersectionPoints;\n        var pointsMaterial = new THREE.PointsMaterial({\n            size: 1.4,\n            color: 0x00ffff\n        });\n        var pointsMesh = new THREE.Points(pointGeometry, pointsMaterial);\n        if (options.showSplitShape) {\n            pointsMesh.position.y = -100;\n            pointsMesh.position.z = -50;\n            thisGenerator.addMesh(pointsMesh);\n        }\n        // TODO: convert point set to path\n        // Test: make a triangulation to see what the path looks like\n        var polygonData = exports.GeometryGenerationHelpers.flattenVert2dArray(uniqueIntersectionPoints);\n        // Run Earcut\n        var triangleIndices = (0, earcut_typescript_1.earcut)(polygonData);\n        // Process the earcut result;\n        //         add the retrieved triangles as geometry faces.\n        var triangleGeometry = new THREE.Geometry();\n        for (var i = 0; i < uniqueIntersectionPoints.length; i++) {\n            triangleGeometry.vertices.push(uniqueIntersectionPoints[i].clone());\n        }\n        for (var i = 0; i + 2 < triangleIndices.length; i += 3) {\n            var a = triangleIndices[i];\n            var b = triangleIndices[i + 1];\n            var c = triangleIndices[i + 2];\n            exports.GeometryGenerationHelpers.makeFace3(triangleGeometry, a, b, c);\n        }\n        if (options.addRawIntersectionTriangleMesh) {\n            // This is more a quick experimental preview feature.\n            // The data is often faulty and too unprecise.\n            var triangleMesh = new THREE.Mesh(triangleGeometry, new THREE.LineBasicMaterial({\n                color: 0xff8800\n            }));\n            triangleMesh.position.y = -100;\n            triangleMesh.position.z = -50;\n            thisGenerator.addMesh(triangleMesh);\n        }\n        // Make the actual models\n        // CURRENTLY NOT IN USE. THE UNDERLYING MODEL IS A NON-TWISTED ONE.\n        if (options.addPrecalculatedMassiveFaces) {\n            exports.GeometryGenerationHelpers.makeAndAddMassivePlaneIntersection(thisGenerator, unbufferedGeometry);\n        }\n        if (options.addPrecalculatedHollowFaces) {\n            exports.GeometryGenerationHelpers.makeAndAddHollowPlaneIntersection(thisGenerator, unbufferedGeometry);\n        }\n        return uniqueIntersectionPoints;\n    },\n    // CURRENTLY NOT REALLY IN USE. THE UNDERLYING MODEL IS A NON-TWISTED ONE.\n    makeAndAddMassivePlaneIntersection: function (thisGenerator, unbufferedGeometry) {\n        var intersectionPoints = unbufferedGeometry.getPerpendicularPathVertices(true, true); // includeBottom=true, getInner=true\n        var pointGeometry = new THREE.Geometry();\n        pointGeometry.vertices = intersectionPoints;\n        var pointsMaterial = new THREE.MeshBasicMaterial({\n            wireframe: false,\n            color: 0xff0000,\n            opacity: 0.5,\n            side: THREE.DoubleSide,\n            transparent: true\n        });\n        // Array<number,number,number,...>\n        var polygonData = exports.GeometryGenerationHelpers.flattenVert2dArray(intersectionPoints);\n        // Step 3: run Earcut\n        var triangleIndices = (0, earcut_typescript_1.earcut)(polygonData);\n        // Step 4: process the earcut result;\n        //         add the retrieved triangles as geometry faces.\n        for (var i = 0; i + 2 < triangleIndices.length; i += 3) {\n            var a = triangleIndices[i];\n            var b = triangleIndices[i + 1];\n            var c = triangleIndices[i + 2];\n            exports.GeometryGenerationHelpers.makeFace3(pointGeometry, a, b, c);\n        }\n        var pointsMesh = new THREE.Mesh(pointGeometry, pointsMaterial);\n        pointsMesh.position.y = -100;\n        pointsMesh.position.z = 50;\n        pointsMesh.userData[\"isExportable\"] = false;\n        thisGenerator.addMesh(pointsMesh);\n    },\n    // CURRENTLY NOT REALLY IN USE. THE UNDERLYING MODEL IS A NON-TWISTED ONE.\n    makeAndAddHollowPlaneIntersection: function (thisGenerator, unbufferedGeometry) {\n        var pointGeometry = new THREE.Geometry();\n        var perpLines = unbufferedGeometry.getPerpendicularHullLines();\n        for (var i = 0; i < perpLines.length; i++) {\n            var innerPoint = perpLines[i].start;\n            var outerPoint = perpLines[i].end;\n            pointGeometry.vertices.push(innerPoint, outerPoint);\n            var vertIndex = pointGeometry.vertices.length;\n            if (i > 0) {\n                pointGeometry.faces.push(new THREE.Face3(vertIndex - 4, vertIndex - 2, vertIndex - 3));\n                pointGeometry.faces.push(new THREE.Face3(vertIndex - 3, vertIndex - 2, vertIndex - 1));\n            }\n        }\n        var pointsMaterial = new THREE.MeshBasicMaterial({\n            wireframe: false,\n            color: 0xff0000,\n            opacity: 0.5,\n            side: THREE.DoubleSide,\n            transparent: true\n        });\n        var pointsMesh = new THREE.Mesh(pointGeometry, pointsMaterial);\n        pointsMesh.position.y = -100;\n        pointsMesh.position.z = -50;\n        pointsMesh.userData[\"isExportable\"] = false;\n        thisGenerator.addMesh(pointsMesh);\n    },\n    /**\n     * Add an orange colored line mesh from a spine geometry..\n     *\n     * @param {DildoGeneration} thisGenerator - The generator to add the new mesh to.\n     * @param {THREE.Geometry} spineGeometry - The spine geometry itself.\n     */\n    addSpine: function (thisGenerator, spineGeometry) {\n        var spineMesh = new THREE.LineSegments(spineGeometry, new THREE.LineBasicMaterial({\n            color: 0xff8800\n        }));\n        spineMesh.position.y = -100;\n        thisGenerator.addMesh(spineMesh);\n    },\n    /**\n     * This function creates two line-meshes in red and green indicating the perpendicular cut\n     * path along the geometry to be sliced.\n     *\n     * @param {DildoGeneration} thisGenerator - The generator to add the new two meshes to.\n     * @param {DildoGeometry} unbufferedDildoGeometry - The dildo geometry to retrieve the perpendicular path from.\n     */\n    addPerpendicularPaths: function (thisGenerator, unbufferedDildoGeometry) {\n        exports.GeometryGenerationHelpers.addPerpendicularPath(thisGenerator, unbufferedDildoGeometry.outerPerpLines, 0xff0000);\n        exports.GeometryGenerationHelpers.addPerpendicularPath(thisGenerator, unbufferedDildoGeometry.innerPerpLines, 0x00ff00);\n    },\n    /**\n     * Add the given array of perpendicular lines (perpendicular to the mesh surface along the cut path)\n     * as a THREE.LineSegments geometry.\n     *\n     * @param {DildoGeneration} thisGenerator - The generator to add the created line mesh to.\n     * @param {Array<THREE.Line3>} perpLines - The lines to\n     * @param {number} materialColor - A color for the material to use (like 0xff0000 for red).\n     */\n    addPerpendicularPath: function (thisGenerator, perpLines, materialColor) {\n        var outerPerpGeometry = new THREE.Geometry();\n        perpLines.forEach(function (perpLine) {\n            outerPerpGeometry.vertices.push(perpLine.start.clone());\n            outerPerpGeometry.vertices.push(perpLine.end.clone());\n        });\n        var outerPerpMesh = new THREE.LineSegments(outerPerpGeometry, new THREE.LineBasicMaterial({\n            color: materialColor\n        }));\n        outerPerpMesh.position.y = -100;\n        thisGenerator.addMesh(outerPerpMesh);\n    },\n    // TODO: add to global helper functions\n    /**\n     * Make a triangulation of the given path specified by the verted indices.\n     *\n     * @param {Array<number>} connectedPath - An array of vertex indices.\n     * @return {THREE.Geometry} trianglesMesh\n     */\n    makePlaneTriangulation: function (generator, sliceGeometry, connectedPath, options) {\n        // Convert the connected paths indices to [x, y, x, y, x, y, ...] coordinates (requied by earcut)\n        var currentPathXYData = connectedPath.reduce(function (earcutInput, vertIndex) {\n            var vert = sliceGeometry.vertices[vertIndex];\n            earcutInput.push(vert.x, vert.y);\n            return earcutInput;\n        }, []);\n        // Array<number> : triplets of vertex indices in the plain XY array\n        var triangles = (0, earcut_typescript_1.earcut)(currentPathXYData);\n        // Convert triangle indices back to a geometry\n        var trianglesGeometry = new THREE.Geometry();\n        // We will merge the geometries in the end which will create clones of the vertices.\n        // No need to clone here.\n        // trianglesGeometry.vertices = leftSliceGeometry.vertices;\n        trianglesGeometry.vertices = connectedPath.map(function (geometryVertexIndex) {\n            return sliceGeometry.vertices[geometryVertexIndex];\n        });\n        // Array<{x,y}> is compatible with Array<{x,y,z}> here :)\n        var flatSideBounds = plotboilerplate_1.Bounds.computeFromVertices(trianglesGeometry.vertices.map(function (vector3) { return new plotboilerplate_1.Vertex(vector3.x, vector3.y); }));\n        for (var t = 0; t < triangles.length; t += 3) {\n            var a = triangles[t];\n            var b = triangles[t + 1];\n            var c = triangles[t + 2];\n            trianglesGeometry.faces.push(new THREE.Face3(a, b, c));\n            // Add UVs\n            UVHelpers_1.UVHelpers.makeFlatTriangleUVs(trianglesGeometry, flatSideBounds, a, b, c);\n        }\n        trianglesGeometry.uvsNeedUpdate = true;\n        // TODO: check if this is still required\n        trianglesGeometry.buffersNeedUpdate = true;\n        trianglesGeometry.computeVertexNormals();\n        var trianglesMesh = new THREE.Mesh(trianglesGeometry, new THREE.MeshBasicMaterial({\n            color: 0x0048ff,\n            transparent: true,\n            opacity: 0.55,\n            side: THREE.DoubleSide\n        }));\n        trianglesMesh.position.y = -100;\n        // trianglesMesh.position.z += 1.0; // Avoid Moiré with plane mesh?\n        trianglesMesh.userData[\"isExportable\"] = false;\n        generator.partialResults[constants_1.KEY_PLANE_INTERSECTION_TRIANGULATION] = trianglesGeometry;\n        if (options.showSplitShapeTriangulation) {\n            generator.addMesh(trianglesMesh);\n        }\n        return trianglesGeometry;\n    },\n    /**\n     * Normalize a 2D vector to a given length.\n     *\n     * @param {XYCoords} base - The start point.\n     * @param {XYCoords} extend - The end point.\n     * @param {number} normalLength - The desired length\n     */\n    // TODO: add types\n    normalizeVectorXY: function (base, extend, normalLength) {\n        var diff = { x: extend.x - base.x, y: extend.y - base.y }; // XYCoords\n        var length = Math.sqrt(diff.x * diff.x + diff.y * diff.y);\n        var ratio = normalLength / length;\n        extend.x = base.x + diff.x * ratio;\n        extend.y = base.y + diff.y * ratio;\n    },\n    /**\n     * Normalize a 2D vector to a given length.\n     *\n     * @param {XYCoords} base - The start point.\n     * @param {XYCoords} extend - The end point.\n     * @param {number} normalLength - The desired length\n     */\n    // TODO: add types\n    normalizeVectorXYZ: function (base, extend, normalLength) {\n        var diff = { x: extend.x - base.x, y: extend.y - base.y, z: extend.z - base.z };\n        var length = Math.sqrt(diff.x * diff.x + diff.y * diff.y + diff.z * diff.z);\n        var ratio = normalLength / length;\n        extend.x = base.x + diff.x * ratio;\n        extend.y = base.y + diff.y * ratio;\n        extend.z = base.z + diff.z * ratio;\n    },\n    /**\n     * A helper function to clear all child nodes from the given HTML DOM node.\n     *\n     * @param {HTMLElement} rootNoode\n     */\n    removeAllChildNodes: function (rootNode) {\n        while (rootNode.lastChild) {\n            rootNode.removeChild(rootNode.lastChild);\n        }\n    },\n    /**\n     * Clamp the given number into the passed min-max interval.\n     *\n     * @param {number} n\n     * @param {number} min\n     * @param {number} max\n     * @returns\n     */\n    clamp: function (n, min, max) {\n        return Math.max(Math.min(n, max), min);\n    }\n};\n//# sourceMappingURL=GeometryGenerationHelpers.js.map","\"use strict\";\n/**\n * @author  Ikaros Kappler\n * @date    2021-09-02\n * @version 1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImageStore = void 0;\nexports.ImageStore = (function () {\n    var imageMap = new Map();\n    var Store = {\n        getImage: function (path, onComplete) {\n            // Try to find in store\n            var image = imageMap.get(path);\n            if (!image) {\n                image = document.createElement(\"img\"); // as HTMLImageElement;\n                imageMap.set(path, image);\n                image.onload = function () {\n                    onComplete(image);\n                };\n                image.setAttribute(\"src\", path);\n            }\n            return image;\n        },\n        isImageLoaded: function (image) {\n            return image.complete && image.naturalHeight !== 0 && image.naturalHeight !== undefined;\n        }\n    };\n    return Store;\n})();\n//# sourceMappingURL=ImageStore.js.map","\"use strict\";\n/**\n * The PathFinger tool will find the connected path on a mesh surface, given by a set\n * of vertices that lay on the geometry's surface.\n *\n * Each vertex in the path elements array must be at some gometry vertex position. The position\n * does not necessarily need to be exact, some epsilon is used (default epsilon is 0.000001).\n *\n * @author   Ikaros Kappler\n * @modified 2021-08-29 Ported to Typescript from vanilla JS.\n * @date     2021-07-06\n * @version  1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PathFinder = void 0;\n// var EPS = 0.000001;\nvar constants_1 = require(\"./constants\");\nvar PathFinder = /** @class */ (function () {\n    /**\n     * Construct a new PathFinder.\n     *\n     * @param {number=0.000001} epsilon - (optional) Specity any custom epsilon here if the default epsilon is too large/small. Must be >= 0.\n     */\n    function PathFinder(epsilon) {\n        this.visitedVertices = new Set();\n        this.unvisitedVertIndices = new Set(); // <number>\n        this.numVisitedVertices = 0;\n        this.epsilon = typeof epsilon !== \"undefined\" && epsilon >= 0 ? epsilon : constants_1.EPS;\n    }\n    /**\n     * Find all connected paths specified by the path vertex array, that lay on the geometry's surface.\n     *\n     * If the vertices depict more than one path, then the returned array will contain\n     * multiple paths, too.\n     *\n     * The pathVertices array must not contain duplicates.\n     *\n     * @param {THREE.Geometry} unbufferedGeometry - The geometry itself containing the path vertices.\n     * @param {THREE.Vector3[]} pathVertices - The unsorted vertices (must form a connected path on the geometry).\n     * @return {Array<number[]>} An array of paths; each path consists of an array of path vertex indices in the `pathVertices` param.\n     */\n    PathFinder.prototype.findAllPathsOnMesh = function (unbufferedGeometry, pathVertices) {\n        var collectedPaths = []; // Array<number[]>\n        this.visitedVertices.clear();\n        this.unvisitedVertIndices.clear();\n        // Map path vertices to vertices in the geometry.\n        //\n        // Please note that the index array might be shorter than the vertex array itself, if some vertices could\n        // not be located in the geometry.\n        //\n        var pathVertIndices = mapVerticesToGeometryIndices(unbufferedGeometry, pathVertices, this.epsilon);\n        var n = pathVertIndices.length;\n        // Initially build up an array of path vertices, marking them all as unvisited.\n        this.unvisitedVertIndices = new Set(pathVertIndices.map(function (_pathVert, index) {\n            return index;\n        }));\n        // As long as there are path vertices unvisited, there are sill portions of the path(s)\n        // to be processed.\n        while (this.numVisitedVertices < n) {\n            var nextUnvisitedIndex = this.unvisitedVertIndices.values().next().value;\n            // Array<number>\n            var path = this.findUnvisitedPaths(unbufferedGeometry, pathVertIndices, nextUnvisitedIndex);\n            collectedPaths.push(path);\n        }\n        // Try to find adjacent paths to connect them.\n        return this.combineAdjacentPaths(collectedPaths, unbufferedGeometry);\n    };\n    /**\n     * Find the next sequence unvisited path (indices) of vertices that are directly connected\n     * via some faces on the geometry's surface.\n     *\n     * Be aware that path detection only works in one direction, so you will probably end up\n     * in several paths that can still be connected, if you start with some random vertex\n     * index.\n     *\n     * @param {THREE.Geometry} unbufferedGeometry - The geometry to use to find connected vertices (use it's faces).\n     * @param {Array<number>} pathVertIndices - The indices of all vertices that form the path(s). Each index must match a vertex in the geometry's `vertices` array.\n     * @param {number} unvisitedIndex - The path vertex (index) to start with. This can be picked randomly.\n     * @returns {Array<number>} The indices of the found path in an array (index sequence).\n     */\n    PathFinder.prototype.findUnvisitedPaths = function (unbufferedGeometry, pathVertIndices, unvisitedIndex) {\n        var path = [unvisitedIndex]; // which elements?\n        this.visitedVertices.add(unvisitedIndex);\n        this.unvisitedVertIndices.delete(unvisitedIndex);\n        this.numVisitedVertices++;\n        // Find the the face for this vertex's index\n        // var faceAndVertIndex; // { faceIndex: number, vertIndex: number }\n        var adjacentVertIndex;\n        while ((adjacentVertIndex = this.findAdjacentFace(unbufferedGeometry, pathVertIndices, unvisitedIndex)) !== -1) {\n            // Retrieved face/vertex tuple represents the next element on the path\n            path.push(adjacentVertIndex);\n            this.visitedVertices.add(adjacentVertIndex);\n            this.unvisitedVertIndices.delete(adjacentVertIndex);\n            this.numVisitedVertices++;\n            unvisitedIndex = adjacentVertIndex;\n        }\n        return path;\n    };\n    /**\n     * Find the next unvisited vertex index that connects the given (unvisited) vertex\n     * index of the path.\n     *\n     * To find that the geometry's faces will be used.\n     *\n     * @param {THREE.Geometry} unbufferedGeometry\n     * @param {Array<number>} pathVertIndices\n     * @param {number} unvisitedIndex\n     * @returns {number} The next adjacent face index or -1 if none can be found.\n     */\n    PathFinder.prototype.findAdjacentFace = function (unbufferedGeometry, pathVertIndices, unvisitedIndex) {\n        var faceCount = unbufferedGeometry.faces.length;\n        for (var f = 0; f < faceCount; f++) {\n            if (faceHasVertIndex(unbufferedGeometry, f, unvisitedIndex)) {\n                // Face is a canditate to extend the path.\n                // Check if there is a second un-visited path vertex\n                for (var i = 0; i < pathVertIndices.length; i++) {\n                    var pathVertIndex = pathVertIndices[i];\n                    if (pathVertIndex === unvisitedIndex) {\n                        continue;\n                    }\n                    if (this.isVisited(pathVertIndex)) {\n                        continue;\n                    }\n                    if (!this.isVisited(pathVertIndex) && faceHasVertIndex(unbufferedGeometry, f, pathVertIndex)) {\n                        return pathVertIndex;\n                    }\n                    if (faceHasVertIndex(unbufferedGeometry, f, pathVertIndex)) {\n                        return pathVertIndex;\n                    }\n                } // END for\n            } // END if\n        } // END for\n        // At this point no matching face was found\n        return -1;\n    };\n    /**\n     * Checks if the given vertex index (one of the path vertices) was already\n     * marked as being visited.\n     *\n     * @param {number} vertIndex\n     * @returns {boolean}\n     */\n    PathFinder.prototype.isVisited = function (vertIndex) {\n        return this.visitedVertices.has(vertIndex);\n    };\n    /**\n     * Find adjacent paths and connect them.\n     *\n     * @param {Array<number[]>} collectedPaths\n     * @param {THREE.Geometry} unbufferedGeometry\n     * @param {THREE.Vector3[]} pathVertices\n     * @return {Array<number[]>} A new sequence of paths (a path is an array of vertex indices).\n     */\n    PathFinder.prototype.combineAdjacentPaths = function (collectedPaths, unbufferedGeometry) {\n        var resultPaths = [];\n        // First build up an unvisited path set (set of path indices)\n        var unvisitedPathIndexSet = new Set(collectedPaths.map(function (_path, index) {\n            return index;\n        }));\n        while (unvisitedPathIndexSet.size > 0) {\n            var currentPathIndex = unvisitedPathIndexSet.values().next().value;\n            unvisitedPathIndexSet.delete(currentPathIndex);\n            var currentPath = collectedPaths[currentPathIndex];\n            var nextPath = null; // TODO: type?\n            do {\n                nextPath = findAdjacentPath(collectedPaths, currentPath[currentPath.length - 1], unvisitedPathIndexSet, unbufferedGeometry);\n                if (!nextPath && currentPath.length > 1) {\n                    // If path's end point has no connection try reversed path\n                    currentPath = currentPath.reverse();\n                    nextPath = findAdjacentPath(collectedPaths, currentPath[currentPath.length - 1], unvisitedPathIndexSet, unbufferedGeometry);\n                }\n                if (nextPath) {\n                    currentPath = currentPath.concat(nextPath);\n                }\n            } while (nextPath);\n            // All adjacent paths found and connected.\n            resultPaths.push(currentPath);\n        }\n        return resultPaths;\n    };\n    return PathFinder;\n}()); // END class\nexports.PathFinder = PathFinder;\n/**\n * A simple check to determine if a face of the geometry (given by the face index)\n * is adjacent to the given vertex index (a vertex index in the geometry.).\n *\n * @param {THREE.Geometry} unbufferedGeometry\n * @param {number} faceIndex\n * @param {number} geometryVertexIndex\n * @returns\n */\nvar faceHasVertIndex = function (unbufferedGeometry, faceIndex, geometryVertexIndex) {\n    var face = unbufferedGeometry.faces[faceIndex];\n    return face.a === geometryVertexIndex || face.b === geometryVertexIndex || face.c === geometryVertexIndex;\n};\n/**\n * Get an array of vertex indices inside the geometry that represent the given path vertices,\n *\n * If no equivalent geometry vertex can be found (for a path vertex) then the path vertex\n * will be skipped.\n * So the returned array might be shorter than the path – and thus, have gaps.\n *\n * @param {THREE.Geometry} unbufferedGeometry - The Three.js geometry to use.\n * @param {Array<THREE.Vector3>} pathVertices - The acual mesh vertices of the current path.\n * @param {number} epsilon - Is required here (just pass through).\n * @returns\n */\nvar mapVerticesToGeometryIndices = function (unbufferedGeometry, pathVertices, epsilon) {\n    var pathVertIndices = [];\n    for (var i = 0; i < pathVertices.length; i++) {\n        var pathVert = pathVertices[i];\n        var foundIndex = -1;\n        var foundDist = epsilon;\n        for (var j = 0; j < unbufferedGeometry.vertices.length; j++) {\n            var curDist = unbufferedGeometry.vertices[j].distanceTo(pathVert);\n            if (curDist <= foundDist) {\n                // Remember geometry index if closest to path vertex\n                if (foundIndex === -1 ||\n                    // By convention use smalled vertex index if multiple found\n                    (foundIndex !== -1 && unbufferedGeometry.vertices[foundIndex].distanceTo(pathVert) >= curDist && foundIndex > j)) {\n                    foundIndex = j;\n                    foundDist = curDist;\n                }\n            }\n        }\n        if (foundIndex === -1) {\n            console.warn(\"PathFinder.mapVerticesToGeometryIndices could not find a matching geometry vertex for path point \" +\n                i +\n                \". The final result might be locally broken.\");\n        }\n        else {\n            // Note: it may be possible that NO MATCHING GEOMETRY VERT was found (foundIndex = -1).\n            pathVertIndices.push(foundIndex);\n        }\n    } // END for i\n    return pathVertIndices;\n};\n/**\n * This is a helper function to find adjacent sub paths and connect them.\n * It expects basic path segments already to be found and that they are\n * somehow connected. Unconnected paths – which are possible in non-convex\n * geometries – will stay unconnected.\n *\n * It locates the next path that connects to the given (current) path\n * and returns the acual path indices in the correct order. Forward paths\n * and backward paths are detected here and being brought into the correct\n * order.\n *\n * Example: if a path connects with it's end vertex to the end of the given\n * path, then it will be reversed.\n *\n * @param {Array<number[]>} collectedPaths - The array of paths (array of array)\n * @param {number} currentVertIndex - The vertex index in the geometry to find the next adjacent path for.\n * @param {Set<number>} unvisitedPathIndexSet - A set to keep track of unvisited vertex indices. Will be updated.\n * @param {THREE.Geometry} unbufferedGeometry - The geometry to find the path on.\n * @returns\n */\nvar findAdjacentPath = function (collectedPaths, currentVertIndex, unvisitedPathIndexSet, unbufferedGeometry) {\n    for (var f = 0; f < unbufferedGeometry.faces.length; f++) {\n        if (faceHasVertIndex(unbufferedGeometry, f, currentVertIndex)) {\n            // Now find any unvisited path (first or last point) that connects here.\n            for (var p = 0; p < collectedPaths.length; p++) {\n                if (!unvisitedPathIndexSet.has(p)) {\n                    // Path already visited\n                    continue;\n                }\n                var nextPath = collectedPaths[p];\n                if (faceHasVertIndex(unbufferedGeometry, f, nextPath[0])) {\n                    // Concat forwards\n                    unvisitedPathIndexSet.delete(p);\n                    return nextPath;\n                }\n                else if (faceHasVertIndex(unbufferedGeometry, f, nextPath[nextPath.length - 1])) {\n                    // Concat backwards\n                    unvisitedPathIndexSet.delete(p);\n                    return nextPath.reverse();\n                }\n            }\n        }\n    }\n};\n//# sourceMappingURL=PathFinder.js.map","\"use strict\";\n/**\n * Compute the intersection of a mesh and a plane.\n *\n * Inspired by\n *    https://stackoverflow.com/questions/42348495/three-js-find-all-points-where-a-mesh-intersects-a-plane\n *    https://jsfiddle.net/prisoner849/8uxw667m/\n *\n * @co-author Ikaros Kappler\n * @date 2021-06-11\n * @modified 2021-08-29 Ported to Typescript from vanilla JS.\n * @version 1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlaneMeshIntersection = void 0;\nvar THREE = require(\"three\");\nvar PlaneMeshIntersection = /** @class */ (function () {\n    /**\n     * Constructor.\n     */\n    function PlaneMeshIntersection() {\n        var _this = this;\n        /**\n         *\n         * @param {THREE.Mesh} mesh\n         * @param {THREE.Geometry} geometry\n         * @param {THREE.Mesh} plane {THREE.PlaneGeometry ???\n         * @returns {Array<THREE.Vector3>}\n         */\n        // TODO: plane type???\n        this.getIntersectionPoints = function (mesh, geometry, plane, planeGeometryReal) {\n            // Note: this could also work with a directly passed Mesh.Plane object instead a THREE.PlaneGeometry.\n            _this.pointsOfIntersection = [];\n            var mathPlane = new THREE.Plane();\n            // var planeGeometry : THREE.Geometry = (plane as unknown).geometry;\n            // plane.localToWorld(this.planePointA.copy(plane.geometry.vertices[plane.geometry.faces[0].a]));\n            // plane.localToWorld(this.planePointB.copy(plane.geometry.vertices[plane.geometry.faces[0].b]));\n            // plane.localToWorld(this.planePointC.copy(plane.geometry.vertices[plane.geometry.faces[0].c]));\n            plane.localToWorld(_this.planePointA.copy(planeGeometryReal.vertices[planeGeometryReal.faces[0].a]));\n            plane.localToWorld(_this.planePointB.copy(planeGeometryReal.vertices[planeGeometryReal.faces[0].b]));\n            plane.localToWorld(_this.planePointC.copy(planeGeometryReal.vertices[planeGeometryReal.faces[0].c]));\n            mathPlane.setFromCoplanarPoints(_this.planePointA, _this.planePointB, _this.planePointC);\n            var _self = _this;\n            geometry.faces.forEach(function (face) {\n                mesh.localToWorld(_self.a.copy(geometry.vertices[face.a]));\n                mesh.localToWorld(_self.b.copy(geometry.vertices[face.b]));\n                mesh.localToWorld(_self.c.copy(geometry.vertices[face.c]));\n                _self.lineAB = new THREE.Line3(_self.a, _self.b);\n                _self.lineBC = new THREE.Line3(_self.b, _self.c);\n                _self.lineCA = new THREE.Line3(_self.c, _self.a);\n                _self.__setPointOfIntersection(_self.lineAB, mathPlane);\n                _self.__setPointOfIntersection(_self.lineBC, mathPlane);\n                _self.__setPointOfIntersection(_self.lineCA, mathPlane);\n            });\n            return _this.pointsOfIntersection;\n        };\n        this.__setPointOfIntersection = function (line, plane) {\n            var intersectionPoint = plane.intersectLine(line, this.pointOfIntersection);\n            if (intersectionPoint) {\n                this.pointsOfIntersection.push(intersectionPoint.clone());\n            }\n        };\n        //   Vector3[]\n        this.pointsOfIntersection = [];\n        this.a = new THREE.Vector3();\n        this.b = new THREE.Vector3();\n        this.c = new THREE.Vector3();\n        this.planePointA = new THREE.Vector3();\n        this.planePointB = new THREE.Vector3();\n        this.planePointC = new THREE.Vector3();\n        this.lineAB = new THREE.Line3();\n        this.lineBC = new THREE.Line3();\n        this.lineCA = new THREE.Line3();\n        this.pointOfIntersection = new THREE.Vector3();\n    }\n    return PlaneMeshIntersection;\n}());\nexports.PlaneMeshIntersection = PlaneMeshIntersection;\n//# sourceMappingURL=PlaneMeshIntersection.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2021-08-03\n * @modified 2021-08-04 Ported to Typsescript from vanilla JS.\n * @version  1.0.1\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UVHelpers = void 0;\nvar THREE = require(\"three\");\nexports.UVHelpers = {\n    /**\n     * Helper function to create triangular UV Mappings for a triangle.\n     *\n     * @param {THREE.Geometry} thisGeometry\n     * @param {Bounds} shapeBounds\n     * @param {number} vertIndexA - The index in the geometry's vertices array.\n     * @param {number} vertIndexB - ...\n     * @param {number} vertIndexC - ...\n     */\n    makeFlatTriangleUVs: function (thisGeometry, // THREE.Geometry does not longer exist since r125 and will be replaced by BufferGeometry\n    shapeBounds, vertIndexA, vertIndexB, vertIndexC) {\n        var vertA = thisGeometry.vertices[vertIndexA];\n        var vertB = thisGeometry.vertices[vertIndexB];\n        var vertC = thisGeometry.vertices[vertIndexC];\n        // Convert a position vertex { x, y, * } to UV coordinates { u, v }\n        var getUVRatios = function (vert) {\n            return new THREE.Vector2((vert.x - shapeBounds.min.x) / shapeBounds.width, (vert.y - shapeBounds.min.y) / shapeBounds.height);\n        };\n        thisGeometry.faceVertexUvs[0].push([getUVRatios(vertA), getUVRatios(vertB), getUVRatios(vertC)]);\n    }\n};\n//# sourceMappingURL=UVHelpers.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2021-07-13\n * @modified 2021-08-04 Ported to Typescript from vainlla JS.\n * @version  1.0.1\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clearDuplicateVertices3 = void 0;\nvar EPS = 0.000001;\n/**\n * Filter the array and clear all duplicates.\n *\n * The original array is left unchanged. The vertices in the array are not cloned.\n *\n * @param {THREE.Vector3[]} vertices\n * @param {number=EPS} epsilon\n * @return {THREE.Vector3[]}\n */\nvar clearDuplicateVertices3 = function (vertices, epsilon) {\n    if (typeof epsilon === \"undefined\") {\n        epsilon = EPS;\n    }\n    var result = [];\n    for (var i = 0; i < vertices.length; i++) {\n        if (!containsElementFrom(vertices, vertices[i], i + 1, epsilon)) {\n            result.push(vertices[i]);\n        }\n    }\n    return result;\n};\nexports.clearDuplicateVertices3 = clearDuplicateVertices3;\n/**\n * A distance checker: check if the passed to vertices are no more than 'eps' units apart.\n *\n * @param {THREE.Vector3} vertA\n * @param {THREE.Vector3} vertB\n * @param {number} eps\n * @returns {boolean}\n */\nvar isCloseTo = function (vertA, vertB, eps) {\n    return vertA.distanceTo(vertB) < eps;\n};\n/**\n * Try to find an element in the given vertex array, starting at a given position (inclusive).\n *\n * @param {THREE.Vector3[]} vertices\n * @param {THREE.Vector3} vertex\n * @param {number} fromIndex\n * @param {number} epsilon\n * @returns {boolan}\n */\nvar containsElementFrom = function (vertices, vertex, fromIndex, epsilon) {\n    for (var i = fromIndex; i < vertices.length; i++) {\n        if (isCloseTo(vertices[i], vertex, epsilon)) {\n            return true;\n        }\n    }\n    return false;\n};\n//# sourceMappingURL=clearDuplicateVertices3.js.map","\"use strict\";\n/**\n * Calculate the vertex normals of a mesh from the pre-calculated face normals.\n *\n * jkmott writing about this challenge:\n *   >> If you have a large complex mesh with small faces you can get away with\n *   >> computing the vertex normals by taking the average of the face normals\n *   >> that surround it, and that’s a fine strategy.\n *\n * https://meshola.wordpress.com/2016/07/24/three-js-vertex-normals/\n *\n * @author  Ikaros Kappler\n * @date    2021-08-31\n * @version 1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.computeVertexNormals = void 0;\nvar THREE = require(\"three\");\n/**\n * Compute the vertex normals of a base geometry and its buffered counterpart (both parts are required here).\n *\n * Note that unbufferedGeometry.computeVertexNormals() must have been called for this to work.\n *\n * @param {THREE.Geometry} unbufferedGeometry - The base geometry.\n * @param {THREE.BufferedGeometry} bufferedGeometry - The buffered geometry.\n * @returns\n */\nvar computeVertexNormals = function (unbufferedGeometry, bufferedGeometry) {\n    // Fetch the face normals from the buffers.\n    var vertexNormals = bufferedGeometry.getAttribute(\"normal\");\n    //   console.log(\"normals\", vertexNormals);\n    //   console.log(\n    //     \"unbufferedGeometry.vertices.length\",\n    //     unbufferedGeometry.vertices.length,\n    //     \"unbufferedGeometry.faces.length\",\n    //     unbufferedGeometry.faces.length,\n    //     \"vertexNormals.array.length/3\",\n    //     vertexNormals.array.length / 3\n    //   );\n    var collectedFaceNormals = Array(unbufferedGeometry.faces.length);\n    // For each face get the three face normals, each of which consists of 3 float values itself.\n    // So each face consumes 9 floats from the array buffer.\n    for (var f = 0; f < unbufferedGeometry.faces.length; f++) {\n        var face = unbufferedGeometry.faces[f];\n        var faceNormalA = new THREE.Vector3(vertexNormals.array[f * 9 + 0], vertexNormals.array[f * 9 + 1], vertexNormals.array[f * 9 + 2]);\n        var faceNormalB = new THREE.Vector3(vertexNormals.array[f * 9 + 3], vertexNormals.array[f * 9 + 4], vertexNormals.array[f * 9 + 5]);\n        var faceNormalC = new THREE.Vector3(vertexNormals.array[f * 9 + 6], vertexNormals.array[f * 9 + 7], vertexNormals.array[f * 9 + 8]);\n        addVertexNormal(collectedFaceNormals, face.a, faceNormalA);\n        addVertexNormal(collectedFaceNormals, face.b, faceNormalB);\n        addVertexNormal(collectedFaceNormals, face.c, faceNormalC);\n    } // END for\n    //   console.log(\"collectedFaceNormals\", collectedFaceNormals);\n    var normals = new Array(unbufferedGeometry.vertices.length);\n    for (var i = 0; i < unbufferedGeometry.vertices.length; i++) {\n        var averageNormal = computeAverageVector(collectedFaceNormals[i]);\n        averageNormal.add(unbufferedGeometry.vertices[i]);\n        normals[i] = new THREE.Line3(unbufferedGeometry.vertices[i], averageNormal);\n    }\n    return normals;\n};\nexports.computeVertexNormals = computeVertexNormals;\n/**\n * Add the computed face normal to the given vertex normal buffer.\n *\n * Each vertex normal buffer ends up with multiple face normals associated with it (from the\n * adjacent faces). The aim is to calculate the average vector from all.\n *\n * @param {Array<THREE.Vector3[]>} buffer\n * @param {number} vertIndex\n * @param {THREE.Vector3} vertexNormal\n */\nvar addVertexNormal = function (buffer, vertIndex, vertexNormal) {\n    if (vertIndex >= buffer.length || typeof buffer[vertIndex] === \"undefined\") {\n        buffer[vertIndex] = [];\n    }\n    buffer[vertIndex].push(vertexNormal);\n};\n/**\n * Compute the average vector from a sequence of (nromal) vectors.\n *\n * @param {Array<THREE.Vector3>} vectors - The vectors to get the average vector for.\n * @returns {THREE.Vector3} The average vector from all given.\n */\nvar computeAverageVector = function (vectors) {\n    var avg = new THREE.Vector3(0, 0, 0);\n    if (vectors) {\n        vectors.forEach(function (nrml) {\n            avg.add(nrml);\n        });\n        avg.divideScalar(vectors.length);\n    }\n    return avg;\n};\n//# sourceMappingURL=computeVertexNormals.js.map","\"use strict\";\n/**\n * @author  Ikaros Kappler\n * @version 1.0.0\n * @date    2021-08-30\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KEY_SPLIT_TRIANGULATION_GEOMETRIES = exports.KEY_PLANE_INTERSECTION_TRIANGULATION = exports.KEY_PLANE_INTERSECTION_POINTS = exports.KEY_SPLIT_PANE_MESH = exports.KEY_RIGHT_SLICE_PLANE = exports.KEY_LEFT_SLICE_PLANE = exports.KEY_RIGHT_SLICE_GEOMETRY = exports.KEY_LEFT_SLICE_GEOMETRY = exports.DEG_TO_RAD = exports.EPS = void 0;\nexports.EPS = 0.000001;\nexports.DEG_TO_RAD = Math.PI / 180.0;\nexports.KEY_LEFT_SLICE_GEOMETRY = \"KEY_LEFT_SLICE_GEOMETRY\"; // THREE.Geometry\nexports.KEY_RIGHT_SLICE_GEOMETRY = \"KEY_RIGHT_SLICE_GEOMETRY\"; // THREE.Geometry\nexports.KEY_LEFT_SLICE_PLANE = \"KEY_LEFT_SLICE_PLANE\"; // THREE.Plane\nexports.KEY_RIGHT_SLICE_PLANE = \"KEY_RIGHT_SLICE_PLANE\"; // THREE.Plane\nexports.KEY_SPLIT_PANE_MESH = \"KEY_SPLIT_PANE_MESH\"; // THREE.Mesh\nexports.KEY_PLANE_INTERSECTION_POINTS = \"KEY_PLANE_INTERSECTION_POINTS\"; // Array<Vector3>\nexports.KEY_PLANE_INTERSECTION_TRIANGULATION = \"KEY_PLANE_INTERSECTION_TRIANGULATION\"; // THREE.Geometry\nexports.KEY_SPLIT_TRIANGULATION_GEOMETRIES = \"KEY_SPLIT_TRIANGULATION_GEOMETRIES\"; // Array<THREE.Geometry>\n//# sourceMappingURL=constants.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_BEZIER_JSON = void 0;\n// Refactored from dildo-generator\nexports.DEFAULT_BEZIER_JSON = \n//'[ { \"startPoint\" : [-122,77.80736634304651], \"endPoint\" : [-65.59022229786551,21.46778533702511], \"startControlPoint\": [-121.62058129515852,25.08908859418696], \"endControlPoint\" : [-79.33419353770395,48.71529293460728] }, { \"startPoint\" : [-65.59022229786551,21.46778533702511], \"endPoint\" : [-65.66917273472913,-149.23537680826058], \"startControlPoint\": [-52.448492057756646,-4.585775770903305], \"endControlPoint\" : [-86.1618869001374,-62.11613821618976] }, { \"startPoint\" : [-65.66917273472913,-149.23537680826058], \"endPoint\" : [-61.86203591980055,-243.8368165606738], \"startControlPoint\": [-53.701578771473564,-200.1123697454778], \"endControlPoint\" : [-69.80704300441666,-205.36451303641783] }, { \"startPoint\" : [-61.86203591980055,-243.8368165606738], \"endPoint\" : [-21.108966092052256,-323], \"startControlPoint\": [-54.08681426887413,-281.486963896856], \"endControlPoint\" : [-53.05779349623559,-323] } ]';\n\"\\n  [\\n    {\\n       \\\"startPoint\\\":[\\n          -122,\\n          77.80736634304651\\n       ],\\n       \\\"endPoint\\\":[\\n          -65.59022229786551,\\n          21.46778533702511\\n       ],\\n       \\\"startControlPoint\\\":[\\n          -121.62058129515852,\\n          25.08908859418696\\n       ],\\n       \\\"endControlPoint\\\":[\\n          -79.33419353770395,\\n          48.71529293460728\\n       ]\\n    },\\n    {\\n       \\\"startPoint\\\":[\\n          -65.59022229786551,\\n          21.46778533702511\\n       ],\\n       \\\"endPoint\\\":[\\n          -65.66917273472913,\\n          -149.23537680826058\\n       ],\\n       \\\"startControlPoint\\\":[\\n          -52.448492057756646,\\n          -4.585775770903305\\n       ],\\n       \\\"endControlPoint\\\":[\\n          -86.1618869001374,\\n          -62.11613821618976\\n       ]\\n    },\\n    {\\n       \\\"startPoint\\\":[\\n          -65.66917273472913,\\n          -149.23537680826058\\n       ],\\n       \\\"endPoint\\\":[\\n          -61.86203591980055,\\n          -243.8368165606738\\n       ],\\n       \\\"startControlPoint\\\":[\\n          -53.701578771473564,\\n          -200.1123697454778\\n       ],\\n       \\\"endControlPoint\\\":[\\n          -69.80704300441666,\\n          -205.36451303641783\\n       ]\\n    },\\n    {\\n       \\\"startPoint\\\":[\\n          -61.86203591980055,\\n          -243.8368165606738\\n       ],\\n       \\\"endPoint\\\":[\\n          -21.108966092052256,\\n          -323\\n       ],\\n       \\\"startControlPoint\\\":[\\n          -54.08681426887413,\\n          -281.486963896856\\n       ],\\n       \\\"endControlPoint\\\":[\\n          -53.05779349623559,\\n          -323\\n       ]\\n    }\\n ]\\n  \";\n//# sourceMappingURL=defaults.js.map","\"use strict\";\n\n// Export the library to the global scope:\nglobalThis.ngdg = require(\"./ngdg\").ngdg;\n","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2021-07-26\n * @modified 2021-08-04 Ported to Typescript from vanilla JS.\n * @version  1.0.1\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.locateVertexInArray = void 0;\n/**\n * Find that vertex in the array that is closest to the given vertex.\n *\n * The epsilon is not optional.\n *\n * @param {Array<THREE.Vector3>} vertArray\n * @param {THREE.Vector3} vertex\n * @param {number} epsilon\n * @returns {number} The index of the found vertex or -1 if not found.\n */\nvar locateVertexInArray = function (vertArray, vertex, epsilon) {\n    var closestDist = Number.POSITIVE_INFINITY;\n    var closestIndex = -1;\n    for (var i = 0; i < vertArray.length; i++) {\n        var dist = vertArray[i].distanceTo(vertex);\n        if (closestIndex === -1 && dist < closestDist && dist < epsilon) {\n            closestIndex = i;\n            closestDist = dist;\n        }\n    }\n    return closestIndex;\n};\nexports.locateVertexInArray = locateVertexInArray;\n//# sourceMappingURL=locateVertexInArray.js.map","\"use strict\";\n/**\n * Merge one geometry (all vertices and faces) into the other.\n *\n * @require locateVertexInArray\n *\n * @author   Ikaros Kappler\n * @date     2021-07-26\n * @modified 2021-08-04 Ported to Typescript from vanilla JS.\n * @version  1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mergeAndMapVertices = exports.mergeGeometries = void 0;\nvar THREE = require(\"three\");\n// import { Geometry, Face3 } from \"three/examples/jsm/deprecated/Geometry\";\nvar locateVertexInArray_1 = require(\"./locateVertexInArray\");\nvar EPS = 0.000001;\n// import { EPS } from \"./constants\";\n/**\n * This function tries to merge the 'mergeGeometry' into the 'baseGeometry'.\n * It assumes that both geometries are somehow connected, so it will try to\n * local equal vertices first instead of just copying all 'mergeGeometry' vertices\n * into the other one.\n *\n * The merged vertices will be cloned.\n *\n * @param {THREE.Geometry} baseGeometry\n * @param {THREE.Geometry} mergeGeometry\n */\nvar mergeGeometries = function (baseGeometry, mergeGeometry, epsilon) {\n    if (typeof epsilon === \"undefined\") {\n        epsilon = EPS;\n    }\n    var vertexMap = (0, exports.mergeAndMapVertices)(baseGeometry, mergeGeometry, epsilon);\n    for (var f = 0; f < mergeGeometry.faces.length; f++) {\n        var face = mergeGeometry.faces[f];\n        var a = vertexMap[face.a];\n        var b = vertexMap[face.b];\n        var c = vertexMap[face.c];\n        // baseGeometry.faces.push(new THREE.Face3(a, b, c));\n        // TODO: how to use this here?\n        // Face3 is not a constructor!!! Just a type!!!\n        baseGeometry.faces.push(new THREE.Face3(a, b, c));\n        if (mergeGeometry.faceVertexUvs.length > 0 && f < mergeGeometry.faceVertexUvs[0].length) {\n            var uvData = mergeGeometry.faceVertexUvs[0][f]; // [Vector2,Vector2,Vector2]\n            baseGeometry.faceVertexUvs[0].push([uvData[0].clone(), uvData[1].clone(), uvData[2].clone()]);\n        }\n        else {\n            baseGeometry.faceVertexUvs[0].push([new THREE.Vector2(0.0, 0.0), new THREE.Vector2(0.0, 1.0), new THREE.Vector2(1.0, 0.5)]);\n        }\n    }\n};\nexports.mergeGeometries = mergeGeometries;\n/**\n * This function merges the vertices from a given geometry into a base geometry.\n * It will ty to locate existing vertices within an epsilon range and keep those. Vertices that\n * have no close existing counterpart in the base geometry will be added.\n *\n * The function returns a mapping of new/merged vertices inside the base geometry, showing\n * which vertex (index) was mapped whereto.\n *\n * @param {THREE-Geometry} baseGeometry\n * @param {THREE-Geometry} mergeGeometry\n * @param {number} epsilon\n * @returns Array<number>\n */\nvar mergeAndMapVertices = function (baseGeometry, mergeGeometry, epsilon) {\n    var vertexMap = [];\n    for (var v = 0; v < mergeGeometry.vertices.length; v++) {\n        var mergeVert = mergeGeometry.vertices[v];\n        var indexInBase = (0, locateVertexInArray_1.locateVertexInArray)(baseGeometry.vertices, mergeVert, epsilon);\n        if (indexInBase === -1) {\n            // The current vertex cannot be found in the base geometry.\n            //  -> add to geometry and remember new index.\n            vertexMap.push(baseGeometry.vertices.length);\n            baseGeometry.vertices.push(mergeVert.clone());\n        }\n        else {\n            vertexMap.push(indexInBase);\n        }\n    }\n    return vertexMap;\n};\nexports.mergeAndMapVertices = mergeAndMapVertices;\n//# sourceMappingURL=mergeGeometries.js.map","\"use strict\";\n/**\n * This defines the globally exported wrapper library.\n *\n * See ./src/cjs/entry.js\n *\n * @author  Ikaros Kappler\n * @version 1.0.0\n * @date    2021-09-27\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ngdg = void 0;\nvar defaults_1 = require(\"./defaults\");\nvar ImageStore_1 = require(\"./ImageStore\");\nvar DildoGeneration_1 = require(\"./DildoGeneration\");\nexports.ngdg = {\n    DEFAULT_BEZIER_JSON: defaults_1.DEFAULT_BEZIER_JSON,\n    DildoGeneration: DildoGeneration_1.DildoGeneration,\n    ImageStore: ImageStore_1.ImageStore\n};\n//# sourceMappingURL=ngdg.js.map","\"use strict\";\n/**\n * Refactored from some older code from 2020.\n *\n * @requires WebColors\n * @requires WebColorsMalachite\n * @requires WebColorsContrast\n *\n * @author   Ikaros Kappler\n * @date     2021-07-14\n * @modified 2021-08-29 Ported to Typescript from vanilla Js.\n * @version  1.0.1\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomWebColor = void 0;\nvar WebColorsMalachite_1 = require(\"plotboilerplate/src/esm/utils/WebColorsMalachite\");\nvar WebColorsContrast_1 = require(\"plotboilerplate/src/esm/utils/WebColorsContrast\");\nvar WebColors_1 = require(\"plotboilerplate/src/esm/utils/WebColors\");\n/**\n * Pick a color from the WebColors array.\n *\n * All params are optional.\n *\n * @param {number=undefined} index\n * @param {\"Malachite\"|\"Mixed\"|\"WebColors\"} colorSet\n **/\nvar randomWebColor = function (index, colorSet) {\n    if (typeof index === \"undefined\") {\n        var maxLen = Math.max(typeof WebColorsMalachite_1.WebColorsMalachite !== \"undefined\" ? WebColorsMalachite_1.WebColorsMalachite.length : 0, typeof WebColorsContrast_1.WebColorsContrast !== \"undefined\" ? WebColorsContrast_1.WebColorsContrast.length : 0, typeof WebColors_1.WebColors !== \"undefined\" ? WebColors_1.WebColors.length : 0);\n        index = Math.round(Math.random() * maxLen);\n    }\n    switch (colorSet) {\n        case \"Malachite\":\n            if (typeof WebColorsMalachite_1.WebColorsMalachite !== \"undefined\") {\n                return WebColorsMalachite_1.WebColorsMalachite[index % WebColorsMalachite_1.WebColorsMalachite.length].cssRGB();\n            }\n            else {\n                console.warn(\"You decided to use the 'WebColorsMalachite' color palette but it is not installed. Falling back.\");\n            }\n        case \"Mixed\":\n            if (typeof WebColorsContrast_1.WebColorsContrast !== \"undefined\") {\n                return WebColorsContrast_1.WebColorsContrast[index % WebColorsContrast_1.WebColorsContrast.length].cssRGB();\n            }\n            else {\n                console.warn(\"You decided to use the 'WebColorsContrast' color palette but it is not installed. Falling back.\");\n            }\n        case \"WebColors\":\n        default:\n            return WebColors_1.WebColors[index % WebColors_1.WebColors.length].cssRGB();\n    }\n};\nexports.randomWebColor = randomWebColor;\n//# sourceMappingURL=randomWebColor.js.map","/**\n * @classdesc A static UIDGenerator.\n *\n * @author  Ikaros Kappler\n * @date    2021-01-20\n * @version 1.0.0\n */\nexport class UIDGenerator {\n    static next() {\n        return `${UIDGenerator.current++}`;\n    }\n}\nUIDGenerator.current = 0;\n//# sourceMappingURL=UIDGenerator.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n */\nexport class VertexAttr {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    constructor() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        this.visible = true;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n}\n/**\n * This is the global attribute model. Set these object on the initialization\n * of your app to gain all VertexAttr instances have these attributes.\n *\n * @type {object}\n **/\nVertexAttr.model = {\n    draggable: true,\n    selectable: true,\n    isSelected: false,\n    visible: true\n};\n//# sourceMappingURL=VertexAttr.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-11-17 Added the `click` handler.\n * @version  1.1.0\n *\n * @file VertexListeners\n * @public\n **/\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n */\nexport class VertexListeners {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    constructor(vertex) {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    ;\n    /**\n     * Add a click listener.\n     *\n     * @method addClickListener\n     * @param {VertexListeners~dragListener} listener - The click listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addClickListener(listener) {\n        VertexListeners._addListener(this.click, listener);\n        return this;\n    }\n    ;\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeClickListener(listener) {\n        this.click = VertexListeners._removeListener(this.click, listener);\n        return this;\n    }\n    ;\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragListener(listener) {\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    }\n    ;\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragListener(listener) {\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    }\n    ;\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragStartListener(listener) {\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    }\n    ;\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragStartListener(listener) {\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    }\n    ;\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragEndListener(listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    }\n    ;\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n    * Remove a drag listener.\n    *\n    * @method removeDragEndListener\n    * @param {VertexListeners~clickListener} listener - The drag listener to remove (a callback).\n    * @return {VertexListeners} this (for chaining)\n    * @instance\n    * @memberof VertexListeners\n    **/\n    removeDragEndListener(listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    }\n    ;\n    /**\n     * Fire a click event with the given event instance to all\n     * installed click listeners.\n     *\n     * @method fireClickEvent\n     * @param {VertEvent|XMouseEvent} e - The click event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireClickEvent(e) {\n        VertexListeners._fireEvent(this, this.click, e);\n    }\n    ;\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEvent(e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    }\n    ;\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragStartEvent(e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    }\n    ;\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEndEvent(e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    }\n    ;\n    /**\n     * @private\n     **/\n    static _fireEvent(_self, listeners, e) {\n        const ve = e;\n        if (typeof ve.params == 'undefined')\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    }\n    ;\n    /**\n     * @private\n     */\n    static _addListener(listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    }\n    ;\n    /**\n     * @private\n     */\n    static _removeListener(listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    }\n    ;\n}\n//# sourceMappingURL=VertexListeners.js.map","/**\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @modified 2020-10-30 Changed the warnings in `sub(...)` and `add(...)` into real errors.\n * @modified 2021-03-01 Changed the second param `center` in the `rotate` function from Vertex to XYCoords.\n * @version  2.4.2\n *\n * @file Vertex\n * @public\n **/\nimport { VertexAttr } from \"./VertexAttr\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VertexListeners } from \"./VertexListeners\";\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires IVertexAttr\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires VertexAttr\n * @requires VertexListeners\n * @requires XYCoords\n *\n */\nexport class Vertex {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    constructor(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        this.uid = UIDGenerator.next();\n        if (typeof x == \"undefined\") {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr();\n        this.listeners = new VertexListeners(this);\n    }\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    set(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x = x;\n                else if (typeof x == \"undefined\")\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == \"number\")\n                    this.y = y;\n                else if (typeof y == \"undefined\")\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    }\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invX() {\n        this.x = -this.x;\n        return this;\n    }\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invY\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invY() {\n        this.y = -this.y;\n        return this;\n    }\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    add(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x += x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == \"number\")\n                    this.y += y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addXY(amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    }\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addX(amountX) {\n        this.x += amountX;\n        return this;\n    }\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addY(amountY) {\n        this.y += amountY;\n        return this;\n    }\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    sub(x, y) {\n        if (typeof x == \"number\" && typeof y == \"number\") {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == \"number\")\n                    this.x -= x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == \"number\")\n                    this.y -= y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    equals(vertex) {\n        var eqX = Math.abs(this.x - vertex.x) < Vertex.EPSILON;\n        var eqY = Math.abs(this.y - vertex.y) < Vertex.EPSILON;\n        var result = eqX && eqY;\n        return result;\n    }\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    clone() {\n        return new Vertex(this.x, this.y);\n    }\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {XYCoords} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    distance(vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    }\n    /**\n     * Get the angle of this point (relative to (0,0) or to the given other origin point).\n     *\n     * @method angle\n     * @param {XYCoords} origin - The vertex to measure the angle from.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    angle(origin) {\n        const a = typeof origin === \"undefined\"\n            ? Math.PI / 2 - Math.atan2(this.x, this.y)\n            : Math.PI / 2 - Math.atan2(origin.x - this.x, origin.y - this.y);\n        // Map to positive value\n        return a < 0 ? Math.PI * 2 + a : a;\n    }\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    difference(vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    }\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {Vertex=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    scale(factor, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.x = center.x + (this.x - center.x) * factor;\n        this.y = center.y + (this.y - center.y) * factor;\n        return this;\n    }\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {XYCoords=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    rotate(angle, center) {\n        if (!center || typeof center === \"undefined\") {\n            center = { x: 0, y: 0 };\n        }\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        let len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    }\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    multiplyScalar(scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    }\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    round() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    }\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    inv() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    toString() {\n        return \"(\" + this.x + \",\" + this.y + \")\";\n    }\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push(\"<circle\");\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.x + '\"');\n        buffer.push(' cy=\"' + this.y + '\"');\n        buffer.push(' r=\"2\"');\n        buffer.push(\" />\");\n        return buffer.join(\"\");\n    }\n    // END Vertex\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    static randomVertex(viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    }\n}\nVertex.ZERO = new Vertex(0, 0);\n/**\n * An epsilon for comparison\n *\n * @private\n * @readonly\n **/\nVertex.EPSILON = 1.0e-6;\nVertex.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {Vertex} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n    buildArrowHead: (zA, zB, headlen, scaleX, scaleY) => {\n        // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n        var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        var vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - headlen * Math.cos(angle), zB.y * scaleY - headlen * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle - Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - headlen * 1.35 * Math.cos(angle + Math.PI / 8), zB.y * scaleY - headlen * 1.35 * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    }\n};\n//# sourceMappingURL=Vertex.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-10-30 Added the `addVertex` function.\n * @modified 2020-10-31 Added the `getVertexAt` function.\n * @modified 2020-11-06 Added the `move` function.\n * @modified 2020-11-10 Added the `getBounds` function.\n * @modified 2020-11-11 Generalized `move(Vertex)` to `move(XYCoords)`.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-01-29 Added the `signedArea` function (was global function in the demos before).\n * @modified 2021-01-29 Added the `isClockwise` function.\n * @modified 2021-01-29 Added the `area` function.\n * @modified 2021-01-29 Changed the param type for `containsVert` from Vertex to XYCoords.\n * @version 1.7.0\n *\n * @file Polygon\n * @public\n **/\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A polygon class. Any polygon consists of an array of vertices; polygons can be open or closed.\n *\n * @requires BezierPath\n * @requires Bounds\n * @requires SVGSerializabe\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n * @requires XYCoords\n */\nexport class Polygon {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    constructor(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        this.uid = UIDGenerator.next();\n        if (typeof vertices == 'undefined')\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen;\n    }\n    ;\n    /**\n     * Add a vertex to the end of the `vertices` array.\n     *\n     * @method addVert\n     * @param {Vertex} vert - The vertex to add.\n     * @instance\n     * @memberof Polygon\n     **/\n    addVertex(vert) {\n        this.vertices.push(vert);\n    }\n    ;\n    /**\n     * Get the polygon vertex at the given position (index).\n     *\n     * The index may exceed the total vertex count, and will be wrapped around then (modulo).\n     *\n     * For k >= 0:\n     *  - getVertexAt( vertices.length )     == getVertexAt( 0 )\n     *  - getVertexAt( vertices.length + k ) == getVertexAt( k )\n     *  - getVertexAt( -k )                  == getVertexAt( vertices.length -k )\n     *\n     * @metho getVertexAt\n     * @param {number} index - The index of the desired vertex.\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex} At the given index.\n     **/\n    getVertexAt(index) {\n        if (index < 0)\n            return this.vertices[this.vertices.length - (Math.abs(index) % this.vertices.length)];\n        else\n            return this.vertices[index % this.vertices.length];\n    }\n    ;\n    /**\n     * Move the polygon's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this for chaining\n     **/\n    move(vert) {\n        for (var i in this.vertices) {\n            this.vertices[i].add(vert);\n        }\n        return this;\n    }\n    ;\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {XYCoords} vert - The vertex to check. The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    containsVert(vert) {\n        // ray-casting algorithm based on\n        //    http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            let xi = this.vertices[i].x, yi = this.vertices[i].y;\n            let xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = ((yi > vert.y) != (yj > vert.y))\n                && (vert.x < (xj - xi) * (vert.y - yi) / (yj - yi) + xi);\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    }\n    ;\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @method area\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    area() {\n        return Polygon.utils.area(this.vertices);\n    }\n    ;\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @method signedArea\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    signedArea() {\n        return Polygon.utils.signedArea(this.vertices);\n    }\n    ;\n    /**\n     * Get the winding order of this polgon: clockwise or counterclockwise.\n     *\n     * @method isClockwise\n     * @instance\n     * @memberof Polygon\n     * @return {boolean}\n     */\n    isClockwise() {\n        return Polygon.utils.signedArea(this.vertices) < 0;\n    }\n    ;\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    scale(factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == 'function')\n                this.vertices[i].scale(factor, center);\n            else\n                console.log('There seems to be a null vertex!', this.vertices[i]);\n        }\n        return this;\n    }\n    ;\n    /**\n     * Rotate the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this, for chaining.\n     **/\n    rotate(angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    }\n    ;\n    /**\n     * Get the bounding box (bounds) of this polygon.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Polygon\n     * @return {Bounds} The rectangular bounds of this polygon.\n     **/\n    getBounds() {\n        return Bounds.computeFromVertices(this.vertices);\n    }\n    ;\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierData() {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    }\n    ;\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierSVGString() {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push('Q ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y);\n        }\n        return buffer.join(' ');\n    }\n    ;\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierData(threshold) {\n        if (typeof threshold == 'undefined')\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    }\n    ;\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierSVGString(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push('C ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y + ', ' + qdata[i + 2].x + ' ' + qdata[i + 2].y);\n        }\n        return buffer.join(' ');\n    }\n    ;\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierPath(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath.fromArray(pathdata);\n    }\n    ;\n    /**\n     * Create an SVG representation of this polygon.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Polygon\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        if (this.vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(this.vertices[0].x.toString());\n            buffer.push(' ');\n            buffer.push(this.vertices[0].y.toString());\n            for (var i = 1; i < this.vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(this.vertices[i].x.toString());\n                buffer.push(' ');\n                buffer.push(this.vertices[i].y.toString());\n            }\n            if (!this.isOpen) {\n                buffer.push(' Z');\n            }\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    }\n    ;\n}\nPolygon.utils = {\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @name area\n     * @return {number}\n     */\n    area(vertices) {\n        // Found at:\n        //    https://stackoverflow.com/questions/16285134/calculating-polygon-area\n        let total = 0.0;\n        for (var i = 0, l = vertices.length; i < l; i++) {\n            const addX = vertices[i].x;\n            const addY = vertices[(i + 1) % l].y;\n            const subX = vertices[(i + 1) % l].x;\n            const subY = vertices[i].y;\n            total += (addX * addY * 0.5);\n            total -= (subX * subY * 0.5);\n        }\n        return Math.abs(total);\n    },\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @name signedArea\n     * @return {number}\n     */\n    signedArea(vertices) {\n        let sum = 0;\n        const n = vertices.length;\n        for (var i = 0; i < n; i++) {\n            const j = (i + 1) % n;\n            sum += (vertices[j].x - vertices[i].x) * (vertices[i].y + vertices[j].y);\n        }\n        return sum;\n    }\n};\n//# sourceMappingURL=Polygon.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @modified 2020-10-30 Added the static computeFromVertices function.\n * @modified 2020-11-19 Set min, max, width and height to private.\n * @modified 2021-02-02 Added the `toPolygon` method.\n * @modified 2021-06-21 (mid-summer) Added `getCenter` method.\n * @version  1.3.0\n **/\nimport { Polygon } from \"./Polygon\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A bounds class with min and max values. Implementing IBounds.\n *\n * @requires XYCoords\n * @requires Vertex\n * @requires IBounds\n **/\nexport class Bounds {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    constructor(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    /**\n     * Convert this rectangular bounding box to a polygon with four vertices.\n     *\n     * @method toPolygon\n     * @instance\n     * @memberof Bounds\n     * @return {Polygon} This bound rectangle as a polygon.\n     */\n    toPolygon() {\n        return new Polygon([new Vertex(this.min), new Vertex(this.max.x, this.min.y), new Vertex(this.max), new Vertex(this.min.x, this.max.y)], false);\n    }\n    getCenter() {\n        return new Vertex(this.min.x + (this.max.x - this.min.x) / 2.0, this.min.y + (this.max.y - this.min.y) / 2);\n    }\n    /**\n     * Compute the minimal bounding box for a given set of vertices.\n     *\n     * An empty vertex array will return an empty bounding box located at (0,0).\n     *\n     * @static\n     * @method computeFromVertices\n     * @memberof Bounds\n     * @param {Array<Vertex>} vertices - The set of vertices you want to get the bounding box for.\n     * @return The minimal Bounds for the given vertices.\n     **/\n    static computeFromVertices(vertices) {\n        if (vertices.length == 0)\n            return new Bounds(new Vertex(0, 0), new Vertex(0, 0));\n        let xMin = vertices[0].x;\n        let xMax = vertices[0].x;\n        let yMin = vertices[0].y;\n        let yMax = vertices[0].y;\n        let vert;\n        for (var i in vertices) {\n            vert = vertices[i];\n            xMin = Math.min(xMin, vert.x);\n            xMax = Math.max(xMax, vert.x);\n            yMin = Math.min(yMin, vert.y);\n            yMax = Math.max(yMax, vert.y);\n        }\n        return new Bounds(new Vertex(xMin, yMin), new Vertex(xMax, yMax));\n    }\n} // END class bounds\n//# sourceMappingURL=Bounds.js.map","/**\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modified 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @modified 2020-11-11 Generalized the `add` and `sub` param from `Vertex` to `XYCoords`.\n * @modified 2020-12-04 Changed`vtutils.dist2` params from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Changed `getClosestT` param from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Added the `hasPoint(XYCoords)` function.\n * @modified 2021-01-20 Added UID.\n * @version 1.1.0\n */\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires UID\n * @requires Vertex\n * @requires XYCoords\n */\nexport class VertTuple {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    constructor(a, b, factory) {\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    length() {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    }\n    ;\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    setLength(length) {\n        return this.scale(length / this.length());\n    }\n    ;\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {XYCoords} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    sub(amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    }\n    ;\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    add(amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    }\n    ;\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    normalize() {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    }\n    ;\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    scale(factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    }\n    ;\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    moveTo(newA) {\n        let diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    }\n    ;\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    angle(line) {\n        if (line == null || typeof line == 'undefined') {\n            line = this.factory(new Vertex(0, 0), new Vertex(100, 0));\n        }\n        // Compute the angle from x axis and the return the difference :)\n        const v0 = this.b.clone().sub(this.a);\n        const v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    }\n    ;\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    vertAt(t) {\n        return new Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    }\n    ;\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    denominator(line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return ((line.b.y - line.a.y) * (this.b.x - this.a.x)) - ((line.b.x - line.a.x) * (this.b.y - this.a.y));\n    }\n    ;\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    colinear(line) {\n        return Math.abs(this.denominator(line)) < Vertex.EPSILON;\n    }\n    ;\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @name getClosetT\n     * @method getClosestT\n     * @param {XYCoords} p The point (vertex) to measure the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestT(p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Do not wrap to [0,1] here.\n        // Other results are of interest, too.\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    }\n    ;\n    /**\n     * Check if the given point is located on this line. Optionally also check if\n     * that point is located between point `a` and `b`.\n     *\n     * @method hasPoint\n     * @param {Vertex} point The point to check.\n     * @param {boolean=} insideBoundsOnly If set to to true (default=false) the point must be between start and end point of the line.\n     * @return {boolean} True if the given point is on this line.\n     * @instance\n     * @memberof VertTuple\n     */\n    hasPoint(point, insideBoundsOnly) {\n        const t = this.getClosestT(point);\n        // Compare to pointDistance?\n        if (typeof insideBoundsOnly !== \"undefined\" && insideBoundsOnly) {\n            const distance = Math.sqrt(VertTuple.vtutils.dist2(point, this.vertAt(t)));\n            return distance < Vertex.EPSILON && t >= 0 && t <= 1;\n        }\n        else {\n            return t >= 0 && t <= 1;\n        }\n    }\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestPoint(p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    }\n    ;\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    pointDistance(p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    }\n    ;\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    clone() {\n        return this.factory(this.a.clone(), this.b.clone());\n    }\n    ;\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    toString() {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    }\n    ;\n}\n/**\n * @private\n **/\nVertTuple.vtutils = {\n    dist2: (v, w) => {\n        return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n    }\n};\n//# sourceMappingURL=VertTuple.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2021-01-20 Added UID.\n * @version  1.3.0\n *\n * @file Vector\n * @public\n **/\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires VertTuple\n * @requires Vertex\n **/\nexport class Vector extends VertTuple {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    constructor(vertA, vertB) {\n        super(vertA, vertB, (a, b) => new Vector(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vector\";\n    }\n    ;\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    perp() {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex(), new Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    }\n    ;\n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    inverse() {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    }\n    ;\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    inv() {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    }\n    ;\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    intersection(line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    }\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @override\n     * @param {object=} options - A set of options, like 'className'.\n     * @return {string} The SVG string representation.\n     * @instance\n     * @memberof Vector\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        var vertices = Vector.utils.buildArrowHead(this.a, this.b, 8, 1.0, 1.0);\n        buffer.push('<g');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push('>');\n        buffer.push('   <line');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + vertices[0].x + '\"');\n        buffer.push(' y2=\"' + vertices[0].y + '\"');\n        buffer.push(' />');\n        // Add arrow head\n        buffer.push('   <polygon points=\"');\n        for (var i = 0; i < vertices.length; i++) {\n            if (i > 0)\n                buffer.push(' ');\n            buffer.push('' + vertices[i].x + ',' + vertices[i].y);\n        }\n        buffer.push('\"/>');\n        buffer.push('</g>');\n        return buffer.join('');\n    }\n    ;\n}\nVector.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {Vertex} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    buildArrowHead: (zA, zB, headlen, scaleX, scaleY) => {\n        var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        var vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    }\n};\n//# sourceMappingURL=Vector.js.map","/**\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @modified 2021-01-20 Added UID.\n * @version 2.5.0\n *\n * @file CubicBezierCurve\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { Vector } from \"./Vector\";\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires Vector\n * @requires XYCoords\n * @requires UID\n * @requires UIDGenerator\n */\nexport class CubicBezierCurve {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    constructor(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.uid = UIDGenerator.next();\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        this.arcLength = null;\n        this.updateArcLengths();\n    }\n    ;\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    moveCurvePoint(pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(`[CubicBezierCurve.moveCurvePoint] pointID '${pointID}' invalid.`);\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    }\n    ;\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    translate(amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    }\n    ;\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    reverse() {\n        let tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    }\n    ;\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    getLength() {\n        return this.arcLength;\n    }\n    ;\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    updateArcLengths() {\n        let pointA = this.startPoint.clone();\n        let pointB = new Vertex(0, 0);\n        let curveStep = 1.0 / this.curveIntervals;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        let newLength = 0.0;\n        var t = 0.0;\n        let tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    }\n    ;\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    getClosestT(p) {\n        // We would like to have an error that's not larger than 1.0.\n        var desiredEpsilon = 1.0;\n        var result = { t: 0, tPrev: 0.0, tNext: 1.0 };\n        var iteration = 0;\n        do {\n            result = this.locateIntervalByDistance(p, result.tPrev, result.tNext, this.curveIntervals);\n            iteration++;\n            // Be sure: stop after 4 iterations\n        } while (iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon);\n        return result.t;\n    }\n    ;\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    locateIntervalByDistance(p, tStart, tEnd, stepCount) {\n        var minIndex = -1;\n        var minDist = 0;\n        var t = 0.0;\n        const tDiff = tEnd - tStart;\n        for (var i = 0; i <= stepCount; i++) {\n            t = tStart + tDiff * (i / stepCount);\n            var vert = this.getPointAt(t);\n            var dist = vert.distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n            }\n        }\n        return { t: tStart + tDiff * (minIndex / stepCount),\n            tPrev: tStart + tDiff * (Math.max(0, minIndex - 1) / stepCount),\n            tNext: tStart + tDiff * (Math.min(stepCount, minIndex + 1) / stepCount)\n        };\n    }\n    ;\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @return {Bounds} The bounds of this curve.\n     **/\n    getBounds() {\n        var min = new Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        let v;\n        for (var i = 0; i < this.segmentCache.length; i++) {\n            v = this.segmentCache[i];\n            min.x = Math.min(min.x, v.x);\n            min.y = Math.min(min.y, v.y);\n            max.x = Math.max(max.x, v.x);\n            max.y = Math.max(max.y, v.y);\n        }\n        return new Bounds(min, max);\n    }\n    ;\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    getStartPoint() {\n        return this.startPoint;\n    }\n    ;\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    getEndPoint() {\n        return this.endPoint;\n    }\n    ;\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    getStartControlPoint() {\n        return this.startControlPoint;\n    }\n    ;\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    getEndControlPoint() {\n        return this.endControlPoint;\n    }\n    ;\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointByID(id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(`Invalid point ID '${id}'.`);\n    }\n    ;\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointAt(t) {\n        // Perform some powerful math magic\n        const x = this.startPoint.x * Math.pow(1.0 - t, 3) + this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.x * Math.pow(t, 3);\n        const y = this.startPoint.y * Math.pow(1.0 - t, 3) + this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.y * Math.pow(t, 3);\n        return new Vertex(x, y);\n    }\n    ;\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPoint(u) {\n        return this.getPointAt(u / this.arcLength);\n    }\n    ;\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangentAt(t) {\n        const a = this.getStartPoint();\n        const b = this.getStartControlPoint();\n        const c = this.getEndControlPoint();\n        const d = this.getEndPoint();\n        // This is the shortened one\n        const t2 = t * t;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        const nt2 = 1 - 2 * t + t2;\n        const tX = -3 * a.x * nt2 +\n            b.x * (3 * nt2 - 6 * (t - t2)) +\n            c.x * (6 * (t - t2) - 3 * t2) +\n            3 * d.x * t2;\n        const tY = -3 * a.y * nt2 +\n            b.y * (3 * nt2 - 6 * (t - t2)) +\n            c.y * (6 * (t - t2) - 3 * t2) +\n            3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex(tX, tY);\n    }\n    ;\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    getSubCurveAt(tStart, tEnd) {\n        const startVec = new Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        const endVec = new Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    }\n    ;\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    convertU2T(u) {\n        return Math.max(0.0, Math.min(1.0, (u / this.arcLength)));\n    }\n    ;\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangent(u) {\n        return this.getTangentAt(this.convertU2T(u));\n    }\n    ;\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicular(u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    }\n    ;\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicularAt(t) {\n        const tangentVector = this.getTangentAt(t);\n        return new Vertex(tangentVector.y, -tangentVector.x);\n    }\n    ;\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    clone() {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    }\n    ;\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    equals(curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint ||\n            !curve.endPoint ||\n            !curve.startControlPoint ||\n            !curve.endControlPoint)\n            return false;\n        return this.startPoint.equals(curve.startPoint)\n            && this.endPoint.equals(curve.endPoint)\n            && this.startControlPoint.equals(curve.startControlPoint)\n            && this.endControlPoint.equals(curve.endControlPoint);\n    }\n    ;\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    static isInstance(obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    }\n    ;\n    /**\n     * Create an SVG path data representation of this bézier curve.\n     *\n     * Path data string format is:<br>\n     *  <pre>'M x0 y1 C dx0 dy1 dx1 dy1 x1 x2'</pre><br>\n     * or in other words<br>\n     *   <pre>'M startoint.x startPoint.y C startControlPoint.x startControlPoint.y endControlPoint.x endControlPoint.y endPoint.x endPoint.y'</pre>\n     *\n     * @method toSVGPathData\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string}  The SVG path data string.\n     **/\n    toSVGPathData() {\n        var buffer = [];\n        buffer.push('M ');\n        buffer.push(this.startPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startPoint.y.toString());\n        buffer.push(' C ');\n        buffer.push(this.startControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.y.toString());\n        return buffer.join('');\n    }\n    ;\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    toJSON(prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startPoint\\\" : [\" + this.getStartPoint().x + \",\" + this.getStartPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endPoint\\\" : [\" + this.getEndPoint().x + \",\" + this.getEndPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startControlPoint\\\": [\" + this.getStartControlPoint().x + \",\" + this.getStartControlPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endControlPoint\\\" : [\" + this.getEndControlPoint().x + \",\" + this.getEndControlPoint().y + \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    }\n    ;\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    }\n    ;\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromObject(obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw \"Object member \\\"startPoint\\\" missing.\";\n        if (!obj.endPoint)\n            throw \"Object member \\\"endPoint\\\" missing.\";\n        if (!obj.startControlPoint)\n            throw \"Object member \\\"startControlPoint\\\" missing.\";\n        if (!obj.endControlPoint)\n            throw \"Object member \\\"endControlPoint\\\" missing.\";\n        return new CubicBezierCurve(new Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    }\n    ;\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromArray(arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    }\n    ;\n}\n/** @constant {number} */\nCubicBezierCurve.START_POINT = 0;\n/** @constant {number} */\nCubicBezierCurve.START_CONTROL_POINT = 1;\n/** @constant {number} */\nCubicBezierCurve.END_CONTROL_POINT = 2;\n/** @constant {number} */\nCubicBezierCurve.END_POINT = 3;\n//# sourceMappingURL=CubicBezierCurve.js.map","/**\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @modified 2020-12-29 Constructor is now private (no explicit use intended).\n * @modified 2021-05-25 Added BezierPath.fromReducedList( Array<number> ).\n * @version 2.3.1\n *\n * @file BezierPath\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A BezierPath class.\n *\n * This was refactored from an older project.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires CubicBezierCurve\n * @requires XYCoords\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class BezierPath {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    constructor(pathPoints) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        this.uid = UIDGenerator.next();\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n    }\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    addCurve(curve) {\n        if (curve == null || typeof curve == \"undefined\")\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,\n            true // updateArcLengths\n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    }\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    locateCurveByStartPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByEndPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByStartControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    locateCurveByEndControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    getLength() {\n        return this.totalArcLength;\n    }\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    updateArcLengths() {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    }\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    getCurveCount() {\n        return this.bezierCurves.length;\n    }\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    getCurveAt(curveIndex) {\n        return this.bezierCurves[curveIndex];\n    }\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n      BezierPath.prototype.removeEndPoint = function() {\n      if( this.bezierCurves.length <= 1 )\n          return false;\n      \n      var newArray = [ this.bezierCurves.length-1 ];\n      for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n          newArray[i] = this.bezierCurves[i];\n      }\n      \n      // Update arc length\n      this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n      this.bezierCurves = newArray;\n      return true;\n      }\n      */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n      BezierPath.prototype.removeStartPoint = function() {\n  \n      if( this.bezierCurves.length <= 1 )\n          return false;\n  \n      var newArray = [ this.bezierCurves.length-1 ];\n      for( var i = 1; i < this.bezierCurves.length; i++ ) {\n  \n          newArray[i-1] = this.bezierCurves[i];\n  \n      }\n      \n      // Update arc length\n      this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n      this.bezierCurves = newArray;\n      \n      return true;\n      }\n      */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n      BezierPath.prototype.joinAt = function( curveIndex ) {\n  \n      if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n          return false;\n      \n      var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n      var rightCurve = this.bezierCurves[ curveIndex ];\n  \n      // Make the length of the new handle double that long\n      var leftControlPoint = leftCurve.getStartControlPoint().clone();\n      leftControlPoint.sub( leftCurve.getStartPoint() );\n      leftControlPoint.multiplyScalar( 2.0 );\n      leftControlPoint.add( leftCurve.getStartPoint() );\n      \n      var rightControlPoint = rightCurve.getEndControlPoint().clone();\n      rightControlPoint.sub( rightCurve.getEndPoint() );\n      rightControlPoint.multiplyScalar( 2.0 );\n      rightControlPoint.add( rightCurve.getEndPoint() );\n  \n      var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                            rightCurve.getEndPoint(),\n                            leftControlPoint,\n                            rightControlPoint\n                          );\n      // Place into array\n      var newArray = [ this.bezierCurves.length - 1 ];\n  \n      for( var i = 0; i < curveIndex-1; i++ )\n          newArray[ i ] = this.bezierCurves[i];\n      \n      newArray[ curveIndex-1 ] = newCurve;\n      \n      // Shift trailing curves left\n      for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n          newArray[ i ] = this.bezierCurves[ i+1 ];\n          \n      this.bezierCurves = newArray;\n      this.updateArcLengths();\n  \n      return true;\n      }\n      */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n      BezierPath.prototype.splitAt = function( curveIndex,\n                           segmentIndex\n                         ) {\n      // Must be a valid curve index\n      if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n          return false;\n  \n      var oldCurve = this.bezierCurves[ curveIndex ];\n  \n      // Segment must be an INNER point!\n      // (the outer points are already bezier end/start points!)\n      if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n          return false;\n  \n      // Make room for a new curve\n      for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n          // Move one position to the right\n          this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n      }\n  \n      // Accumulate segment lengths\n      var u = 0;\n      for( var i = 0; i < segmentIndex; i++ )\n          u += oldCurve.segmentLengths[i];\n      //var tangent = oldCurve.getTangentAt( u );\n      var tangent = oldCurve.getTangent( u );\n      tangent = tangent.multiplyScalar( 0.25 );\n  \n      var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n      leftEndControlPoint.sub( tangent );\n      \n      var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n      rightStartControlPoint.add( tangent );\n      \n      // Make the old existing handles a quarter that long\n      var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n      // move to (0,0)\n      leftStartControlPoint.sub( oldCurve.getStartPoint() );\n      leftStartControlPoint.multiplyScalar( 0.25 );\n      leftStartControlPoint.add( oldCurve.getStartPoint() );\n  \n      var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n      // move to (0,0)\n      rightEndControlPoint.sub( oldCurve.getEndPoint() );\n      rightEndControlPoint.multiplyScalar( 0.25 );\n      rightEndControlPoint.add( oldCurve.getEndPoint() );\n  \n      var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                           oldCurve.segmentCache[ segmentIndex ],         // new end point\n                           leftStartControlPoint,                         // old start control point\n                           leftEndControlPoint                            // new end control point\n                         );\n      var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                           oldCurve.getEndPoint(),                        // old end point\n                           rightStartControlPoint,                        // new start control point\n                           rightEndControlPoint                           // old end control point\n                         );\n      \n      // Insert split curve(s) at free index\n      this.bezierCurves[ curveIndex ]     = newLeft;\n      this.bezierCurves[ curveIndex + 1 ] = newRight;\n      \n      // Update total arc length, even if there is only a very little change!\n      this.totalArcLength -= oldCurve.getLength();\n      this.totalArcLength += newLeft.getLength();\n      this.totalArcLength += newRight.getLength();\n  \n      return true;\n      };\n      */\n    /*\n      insertVertexAt( t:number ) : void {\n      console.log('Inserting vertex at', t );\n      // Find the curve index\n      var u : number = 0;\n      var curveIndex : number = -1;\n      var localT : number = 0.0;\n      for( var i = 0; curveIndex == -1 && i < this.bezierCurves.length; i++ ) {\n          \n      }\n      }; */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    translate(amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    scale(anchor, scaling) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scale(scaling, anchor);\n            curve.getStartControlPoint().scale(scaling, anchor);\n            curve.getEndControlPoint().scale(scaling, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaling, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    }\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    rotate(angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    }\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    getClosestT(p) {\n        // Find the spline to extract the value from\n        var minIndex = -1;\n        var minDist = 0.0;\n        var dist = 0.0;\n        var curveT = 0.0;\n        var uMin = 0.0;\n        var u = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            curveT = this.bezierCurves[i].getClosestT(p);\n            dist = this.bezierCurves[i].getPointAt(curveT).distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n                uMin = u + curveT * this.bezierCurves[i].getLength();\n            }\n            u += this.bezierCurves[i].getLength();\n        }\n        return Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength));\n    }\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    getPoint(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(u, 0));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    }\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    getPointAt(t) {\n        return this.getPoint(t * this.totalArcLength);\n    }\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    getTangentAt(t) {\n        return this.getTangent(t * this.totalArcLength);\n    }\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    getTangent(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            // return undefined;\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length && uTemp + this.bezierCurves[i].getLength() < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    }\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    getPerpendicularAt(t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    }\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    getPerpendicular(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    }\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    static _locateUIndex(path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length && uTemp + path.bezierCurves[i].getLength() < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    }\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    getSubPathAt(startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        let startU = startT * this.totalArcLength;\n        let endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    }\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    moveCurvePoint(curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    }\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustPredecessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustSuccessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    static adjustNeighbourControlPoint(_mainCurve, // TODO: remove param\n    neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, _updateArcLengths // TODO: remove param\n    ) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    }\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    getBounds() {\n        const min = new Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        const max = new Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds(min, max);\n    }\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    clone() {\n        var path = new BezierPath(undefined);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    }\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    equals(path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * Create a <pre>&lt;path&gt;</pre> SVG representation of this bézier curve.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} [options={}] - Like options.className\n     * @param {string=} [options.className] - The classname to use for the SVG item.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The SVG string.\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push(\"<path\");\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        for (var c = 0; c < this.bezierCurves.length; c++) {\n            if (c > 0)\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[c].toSVGPathData());\n        }\n        buffer.push('\" />');\n        return buffer.join(\"\");\n    }\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    toJSON(prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    }\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    static fromArray(obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        const arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(undefined);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve;\n            if (CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength();\n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    }\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    toReducedListRepresentation(digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    static fromReducedListRepresentation(listJSON, adjustCircular) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        return BezierPath.fromReducedList(pointArray, adjustCircular);\n    }\n    /**\n     * Convert a reduced list representation (array of numeric coordinates) to a BezierPath instance.\n     *\n     * The array's length must be 6*n + 2:\n     *  - [sx, sy,  scx, scy,  ecx, ecy, ... , ex,  ey ]\n     *     |                               |   |     |\n     *     +--- sequence of curves --------+   +-end-+\n     *\n     * @param {number[]} pointArray\n     * @returns BezierPath\n     */\n    static fromReducedList(pointArray, adjustCircular) {\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        // var firstStartPoint: Vertex;\n        var startPoint;\n        var startControlPoint;\n        var endControlPoint;\n        var endPoint;\n        var i = 0;\n        do {\n            if (i == 0) {\n                // firstStartPoint =\n                startPoint = new Vertex(pointArray[i], pointArray[i + 1]);\n            }\n            startControlPoint = new Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex(pointArray[i + 4], pointArray[i + 5]);\n            // if (i + 8 >= pointArray.length) {\n            //   endPoint = firstStartPoint;\n            // } else {\n            endPoint = new Vertex(pointArray[i + 6], pointArray[i + 7]);\n            // }\n            var bCurve = new CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.adjustCircular = adjustCircular;\n        if (adjustCircular) {\n            bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint = bezierPath.bezierCurves[0].startPoint;\n        }\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    }\n}\n// +---------------------------------------------------------------------------------\n// | These constants equal the values from CubicBezierCurve.\n// +-------------------------------\n/** @constant {number} */\nBezierPath.START_POINT = 0;\n/** @constant {number} */\nBezierPath.START_CONTROL_POINT = 1;\n/** @constant {number} */\nBezierPath.END_CONTROL_POINT = 2;\n/** @constant {number} */\nBezierPath.END_POINT = 3;\n//# sourceMappingURL=BezierPath.js.map","/**\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-12-04 The `intersection` function returns undefined if both lines are parallel.\n * @version  2.1.3\n *\n * @file Line\n * @public\n **/\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n */\nexport class Line extends VertTuple {\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    constructor(a, b) {\n        super(a, b, (a, b) => new Line(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Line\";\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex|undefined} The intersection (may lie outside the end-points) or `undefined` if both lines are parallel.\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    intersection(line) {\n        const denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        let a = this.a.y - line.a.y;\n        let b = this.a.x - line.a.x;\n        const numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        const numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // Catch NaN?\n        const x = this.a.x + (a * (this.b.x - this.a.x));\n        const y = this.a.y + (a * (this.b.y - this.a.y));\n        if (isNaN(a) || isNaN(x) || isNaN(y)) {\n            return undefined;\n        }\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(x, y);\n    }\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {options} p - A set of options, like the 'classname' to use\n     *                      for the line object.\n     * @return {string} The SVG string representing this line.\n     * @instance\n     * @memberof Line\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<line');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + this.b.x + '\"');\n        buffer.push(' y2=\"' + this.b.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    }\n    ;\n}\n//# sourceMappingURL=Line.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n * @modified 2020-10-16 Added the containsCircle(...) function.\n * @modified 2021-01-20 Added UID.\n * @version  1.2.0\n **/\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class Circle {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    constructor(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.radius = radius;\n    }\n    ;\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsCircle\n     * @param {Circle} circle - The circle to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if any only if the given circle is completely inside this circle.\n     */\n    containsCircle(circle) {\n        return this.center.distance(circle.center) + circle.radius < this.radius;\n    }\n    ;\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    lineDistance(line) {\n        const closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    }\n    ;\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    vertAt(angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    }\n    ;\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    tangentAt(angle) {\n        const pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector(pointA, new Vertex(0, 0)).add(this.center).perp();\n    }\n    ;\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle\n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    circleIntersection(circle) {\n        // Circles do not intersect at all?\n        if (this.center.distance(circle.center) > this.radius + circle.radius) {\n            return null;\n        }\n        // One circle is fully inside the other?\n        if (this.center.distance(circle.center) < Math.abs(this.radius - circle.radius)) {\n            return null;\n        }\n        // Based on the C++ implementation by Robert King\n        //    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n        // and the 'Circles and spheres' article by Paul Bourke.\n        //    http://paulbourke.net/geometry/circlesphere/\n        //\n        // This is the original C++ implementation:\n        //\n        // pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // } \n        var p0 = this.center;\n        var p1 = circle.center;\n        var d = p0.distance(p1);\n        var a = (this.radius * this.radius - circle.radius * circle.radius + d * d) / (2 * d);\n        var h = Math.sqrt(this.radius * this.radius - a * a);\n        var p2 = p1.clone().scale(a / d, p0);\n        var x3 = p2.x + h * (p1.y - p0.y) / d;\n        var y3 = p2.y - h * (p1.x - p0.x) / d;\n        var x4 = p2.x - h * (p1.y - p0.y) / d;\n        var y4 = p2.y + h * (p1.x - p0.x) / d;\n        return new Line(new Vertex(x3, y3), new Vertex(x4, y4));\n    }\n    ;\n    /**\n      * Create an SVG representation of this circle.\n      *\n      * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n      * @method toSVGString\n      * @param {object=} options - An optional set of options, like 'className'.\n      * @return {string} A string representing the SVG code for this vertex.\n      * @instance\n      * @memberof Circle\n      */\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' r=\"' + this.radius + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    }\n    ;\n} // END class\nCircle.circleUtils = {\n    vertAt: (angle, radius) => {\n        /* return new Vertex( Math.sin(angle) * radius,\n                   Math.cos(angle) * radius ); */\n        return new Vertex(Math.cos(angle) * radius, Math.sin(angle) * radius);\n    }\n};\n//# sourceMappingURL=Circle.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-12-17\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-26 Fixed an error in the svg-arc-calculation (case angle<90deg and anti-clockwise).\n * @version  1.1.1\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc A simple circle sector: circle, start- and end-angle.\n *\n * @requires Line\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires XYCoords\n **/\nexport class CircleSector {\n    /**\n     * Create a new circle sector with given circle, start- and end-angle.\n     *\n     * @constructor\n     * @name CircleSector\n     * @param {Circle} circle - The circle.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {number} endAngle - The end angle of the sector.\n     */\n    constructor(circle, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"CircleSector\";\n        this.uid = UIDGenerator.next();\n        this.circle = circle;\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n    }\n    ;\n    /**\n      * Create an SVG representation of this circle.\n      *\n      * @method toSVGString\n      * @param {object=} options - An optional set of options, like 'className'.\n      * @return {string} A string representing the SVG code for this vertex.\n      * @instance\n      * @memberof Circle\n      */\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path ');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        const data = CircleSector.circleSectorUtils.describeSVGArc(this.circle.center.x, this.circle.center.y, this.circle.radius, this.startAngle, this.endAngle);\n        buffer.push(' d=\"' + data.join(\" \") + '\" />');\n        return buffer.join('');\n    }\n    ;\n} // END class\nCircleSector.circleSectorUtils = {\n    /**\n     * Helper function to convert polar circle coordinates to cartesian coordinates.\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {number} angle - The angle in radians.\n    */\n    polarToCartesian: (centerX, centerY, radius, angle) => {\n        return {\n            x: centerX + (radius * Math.cos(angle)),\n            y: centerY + (radius * Math.sin(angle))\n        };\n    },\n    /**\n     * Helper function to convert a circle section as SVG arc params (for the `d` attribute).\n     * Found at: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n     * @return [ 'A', radiusx, radiusy, rotation=0, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n     */\n    describeSVGArc: (x, y, radius, startAngle, endAngle, options) => {\n        if (typeof options === 'undefined')\n            options = { moveToStart: true };\n        const end = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, endAngle);\n        const start = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, startAngle);\n        // Split full circles into two halves.\n        // Some browsers have problems to render full circles (described by start==end).\n        if (Math.PI * 2 - Math.abs(startAngle - endAngle) < 0.001) {\n            const firstHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle, startAngle + (endAngle - startAngle) / 2, options);\n            const secondHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle + (endAngle - startAngle) / 2, endAngle, options);\n            return firstHalf.concat(secondHalf);\n        }\n        // Boolean stored as integers (0|1).\n        const diff = endAngle - startAngle;\n        var largeArcFlag;\n        var sweepFlag;\n        if (diff < 0) {\n            largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n            sweepFlag = 1;\n        }\n        else {\n            largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n            sweepFlag = 1;\n        }\n        const pathData = [];\n        if (options.moveToStart) {\n            pathData.push('M', start.x, start.y);\n        }\n        pathData.push(\"A\", radius, radius, 0, largeArcFlag, sweepFlag, end.x, end.y);\n        return pathData;\n    }\n};\n//# sourceMappingURL=CircleSector.js.map","/**\n * Draws elements into an SVG node.\n *\n * Note that this library uses buffers and draw cycles. To draw onto an SVG canvas, do this:\n *   const drawLib = new drawutilssvg( svgNode, ... );\n *   const fillLib = drawLib.copyInstance(true);\n *   // Begin draw cycle\n *   drawLib.beginDrawCycle(time);\n *   // ... draw or fill your stuff ...\n *   drawLib.endDrawCycle(time); // Here the elements become visible\n *\n * @author   Ikaros Kappler\n * @date     2021-01-03\n * @modified 2021-01-24 Fixed the `fillShapes` attribute in the copyInstance function.\n * @modified 2021-01-26 Changed the `isPrimary` (default true) attribute to `isSecondary` (default false).\n * @modified 2021-02-03 Added the static `createSvg` function.\n * @modified 2021-02-03 Fixed the currentId='background' bug on the clear() function.\n * @modified 2021-02-03 Fixed CSSProperty `stroke-width` (was line-width before, which is wrong).\n * @modified 2021-02-03 Added the static `HEAD_XML` attribute.\n * @modified 2021-02-19 Added the static helper function `transformPathData(...)` for svg path transformations (scale and translate).\n * @modified 2021-02-22 Added the static helper function `copyPathData(...)`.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-01 Fixed a bug in the `clear` function (curClassName was not cleared).\n * @modified 2021-03-29 Fixed a bug in the `text` function (second y param was wrong, used x here).\n * @modified 2021-03-29 Moved this file from `src/ts/utils/helpers/` to `src/ts/`.\n * @modified 2021-03-31 Added 'ellipseSector' the the class names.\n * @modified 2021-03-31 Implemented buffering using a buffer <g> node and the beginDrawCycle and endDrawCycle methods.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @version  1.3.0\n **/\nimport { CircleSector } from \"./CircleSector\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A helper class for basic SVG drawing operations. This class should\n * be compatible to the default 'draw' class.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilssvg {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutilssvg\n     * @param {SVGElement} svgNode - The SVG node to use.\n     * @param {XYCoords} offset - The draw offset to use.\n     * @param {XYCoords} scale - The scale factors to use.\n     * @param {XYDimension} canvasSize - The initial canvas size (use setSize to change).\n     * @param {boolean} fillShapes - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     * @param {DrawConfig} drawConfig - The default draw config to use for CSS fallback styles.\n     * @param {boolean=} isSecondary - (optional) Indicates if this is the primary or secondary instance. Only primary instances manage child nodes.\n     * @param {SVGGElement=} gNode - (optional) Primary and seconday instances share the same &lt;g> node.\n     **/\n    constructor(svgNode, offset, scale, canvasSize, fillShapes, drawConfig, isSecondary, gNode, bufferGNode) {\n        this.svgNode = svgNode;\n        this.offset = new Vertex(0, 0).set(offset);\n        this.scale = new Vertex(1, 1).set(scale);\n        this.fillShapes = fillShapes;\n        this.isSecondary = isSecondary;\n        this.drawlibConfiguration = {};\n        this.cache = new Map();\n        this.setSize(canvasSize);\n        if (isSecondary) {\n            this.gNode = gNode;\n            this.bufferGNode = bufferGNode;\n        }\n        else {\n            this.addStyleDefs(drawConfig);\n            this.gNode = this.createSVGNode(\"g\");\n            this.bufferGNode = this.createSVGNode(\"g\");\n            this.svgNode.appendChild(this.gNode);\n        }\n    }\n    addStyleDefs(drawConfig) {\n        this.nodeStyle = this.createSVGNode(\"style\");\n        this.svgNode.appendChild(this.nodeStyle);\n        // Which default styles to add? -> All from the DrawConfig.\n        // Compare with DrawConfig interface\n        const keys = {\n            \"polygon\": \"Polygon\",\n            \"triangle\": \"Triangle\",\n            \"ellipse\": \"Ellipse\",\n            \"ellipseSector\": \"EllipseSector\",\n            \"circle\": \"Circle\",\n            \"circleSector\": \"CircleSector\",\n            \"vertex\": \"Vertex\",\n            \"line\": \"Line\",\n            \"vector\": \"Vector\",\n            \"image\": \"Image\"\n        };\n        // Question: why isn't this working if the svgNode is created dynamically? (nodeStyle.sheet is null)\n        const rules = [];\n        for (var k in keys) {\n            const className = keys[k];\n            const drawSettings = drawConfig[k];\n            if (drawSettings) {\n                rules.push(`.${className} { fill : none; stroke: ${drawSettings.color}; stroke-width: ${drawSettings.lineWidth}px }`);\n            }\n            else {\n                console.warn(`Warning: your draw config is missing the key '${k}' which is required.`);\n            }\n        }\n        this.nodeStyle.innerHTML = rules.join(\"\\n\");\n    }\n    /**\n     * This is a simple way to include custom CSS class mappings to the style defs of the generated SVG.\n     *\n     * The mapping should be of the form\n     *   [style-class] -> [style-def-string]\n     *\n     * Example:\n     *   \"rect.red\" -> \"fill: #ff0000; border: 1px solid red\"\n     *\n     * @param {Map<string,string>} defs\n     */\n    addCustomStyleDefs(defs) {\n        const buffer = [];\n        defs.forEach((value, key) => {\n            buffer.push(key + \" { \" + value + \" }\");\n        });\n        this.nodeStyle.innerHTML += \"\\n/* Custom styles */\\n\" + buffer.join(\"\\n\");\n    }\n    /**\n     * Retieve an old (cached) element.\n     * Only if both – key and nodeName – match, the element will be returned (null otherwise).\n     *\n     * @method findElement\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {UID} key - The key of the desired element (used when re-drawing).\n     * @param {string} nodeName - The expected node name.\n     */\n    findElement(key, nodeName) {\n        var node = this.cache.get(key);\n        if (node && node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\n            this.cache.delete(key);\n            return node;\n        }\n        return null;\n    }\n    /**\n     * Create a new DOM node &lt;svg&gt; in the SVG namespace.\n     *\n     * @method createSVGNode\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {string} nodeName - The node name (tag-name).\n     * @return {SVGElement} A new element in the SVG namespace with the given node name.\n     */\n    createSVGNode(nodeName) {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", nodeName);\n    }\n    /**\n     * Make a new SVG node (or recycle an old one) with the given node name (circle, path, line, rect, ...).\n     *\n     * This function is used in draw cycles to re-use old DOM nodes (in hope to boost performance).\n     *\n     * @method makeNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {string} nodeName - The node name.\n     * @return {SVGElement} The new node, which is not yet added to any document.\n     */\n    makeNode(nodeName) {\n        // Try to find node in current DOM cache.\n        // Unique node keys are strictly necessary.\n        // Try to recycle an old element from cache.\n        var node = this.findElement(this.curId, nodeName);\n        if (!node) {\n            // If no such old elements exists (key not found, tag name not matching),\n            // then create a new one.\n            node = this.createSVGNode(nodeName);\n        }\n        if (this.drawlibConfiguration.blendMode) {\n            node.style[\"mix-blend-mode\"] = this.drawlibConfiguration.blendMode;\n        }\n        return node;\n    }\n    /**\n     * This is the final helper function for drawing and filling stuff and binding new\n     * nodes to the SVG document.\n     * It is not intended to be used from the outside.\n     *\n     * When in draw mode it draws the current shape.\n     * When in fill mode it fills the current shape.\n     *\n     * This function is usually only called internally.\n     *\n     * @method _bindFillDraw\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The node to draw/fill and bind.\n     * @param {string} className - The class name(s) to use.\n     * @param {string} color - A stroke/fill color to use.\n     * @param {number=1} lineWidth - (optional) A line width to use for drawing (default is 1).\n     * @return {SVGElement} The node itself (for chaining).\n     */\n    _bindFillDraw(node, className, color, lineWidth) {\n        if (this.curClassName) {\n            node.setAttribute(\"class\", `${className} ${this.curClassName}`);\n        }\n        else {\n            node.setAttribute(\"class\", className);\n        }\n        node.setAttribute(\"fill\", this.fillShapes ? color : \"none\");\n        node.setAttribute(\"stroke\", this.fillShapes ? \"none\" : color);\n        node.setAttribute(\"stroke-width\", `${lineWidth || 1}`);\n        if (this.curId) {\n            node.setAttribute(\"id\", `${this.curId}`); // Maybe React-style 'key' would be better?\n        }\n        if (!node.parentNode) {\n            // Attach to DOM only if not already attached\n            this.bufferGNode.appendChild(node);\n        }\n        return node;\n    }\n    /**\n     * Sets the size and view box of the document. Call this if canvas size changes.\n     *\n     * @method setSize\n     * @instance\n     * @memberof drawutilssvg\n     * @param {XYDimension} canvasSize - The new canvas size.\n     */\n    setSize(canvasSize) {\n        this.canvasSize = canvasSize;\n        this.svgNode.setAttribute(\"viewBox\", `0 0 ${this.canvasSize.width} ${this.canvasSize.height}`);\n        this.svgNode.setAttribute(\"width\", `${this.canvasSize.width}`);\n        this.svgNode.setAttribute(\"height\", `${this.canvasSize.height}`);\n    }\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilssvg(this.svgNode, this.offset, this.scale, this.canvasSize, fillShapes, null, // no DrawConfig\n        true, // isSecondary\n        this.gNode, this.bufferGNode);\n        return copy;\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        this.drawlibConfiguration = configuration;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentId(uid) {\n        this.curId = uid;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentClassName(className) {\n        this.curClassName = className;\n    }\n    /**\n     * Called before each draw cycle.\n     * This is required for compatibility with other draw classes in the library.\n     *\n     * @name beginDrawCycle\n     * @method\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    beginDrawCycle(renderTime) {\n        // Clear non-recycable elements from last draw cycle.\n        this.cache.clear();\n        // Clearing an SVG is equivalent to removing all its child elements.\n        for (var i = 0; i < this.bufferGNode.childNodes.length; i++) {\n            // Hide all nodes here. Don't throw them away.\n            // We can probably re-use them in the next draw cycle.\n            var child = this.bufferGNode.childNodes[i];\n            this.cache.set(child.getAttribute(\"id\"), child);\n        }\n        this.removeAllChildNodes();\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        if (!this.isSecondary) {\n            // All elements are drawn into the buffer; they are NOT yet visible, not did the browser perform any\n            // layout updates.\n            // Replace the old <g>-node with the buffer node.\n            //   https://stackoverflow.com/questions/27442464/how-to-update-a-svg-image-without-seeing-a-blinking\n            this.svgNode.replaceChild(this.bufferGNode, this.gNode);\n        }\n        let tmp = this.gNode;\n        this.gNode = this.bufferGNode;\n        this.bufferGNode = tmp;\n    }\n    _x(x) {\n        return this.offset.x + this.scale.x * x;\n    }\n    _y(y) {\n        return this.offset.y + this.scale.y * y;\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    line(zA, zB, color, lineWidth) {\n        const line = this.makeNode(\"line\");\n        line.setAttribute(\"x1\", `${this._x(zA.x)}`);\n        line.setAttribute(\"y1\", `${this._y(zA.y)}`);\n        line.setAttribute(\"x2\", `${this._x(zB.x)}`);\n        line.setAttribute(\"y2\", `${this._y(zB.y)}`);\n        return this._bindFillDraw(line, \"line\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    arrow(zA, zB, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        var headlen = 8; // length of head in pixels\n        var vertices = Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        const d = [\"M\", this._x(zA.x), this._y(zA.y)];\n        for (var i = 0; i <= vertices.length; i++) {\n            d.push(\"L\");\n            // Note: only use offset here (the vertices are already scaled)\n            d.push(this.offset.x + vertices[i % vertices.length].x);\n            d.push(this.offset.y + vertices[i % vertices.length].y);\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"arrow\", color, lineWidth || 1);\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    image(image, position, size) {\n        const node = this.makeNode(\"image\");\n        // We need to re-adjust the image if it was not yet fully loaded before.\n        const setImageSize = (image) => {\n            if (image.naturalWidth) {\n                const ratioX = size.x / image.naturalWidth;\n                const ratioY = size.y / image.naturalHeight;\n                node.setAttribute(\"width\", `${image.naturalWidth * this.scale.x}`);\n                node.setAttribute(\"height\", `${image.naturalHeight * this.scale.y}`);\n                node.setAttribute(\"display\", null); // Dislay when loaded\n                node.setAttribute(\"transform\", `translate(${this._x(position.x)} ${this._y(position.y)}) scale(${ratioX} ${ratioY})`);\n            }\n        };\n        image.addEventListener(\"load\", event => {\n            setImageSize(image);\n        });\n        // Safari has a transform-origin bug.\n        // Use x=0, y=0 and translate/scale instead (see above)\n        node.setAttribute(\"x\", `${0}`);\n        node.setAttribute(\"y\", `${0}`);\n        node.setAttribute(\"display\", \"none\"); // Hide before loaded\n        setImageSize(image);\n        node.setAttribute(\"href\", image.src);\n        return this._bindFillDraw(node, \"image\", null, null);\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve) {\n            return this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n        }\n        const node = this.makeNode(\"path\");\n        // Draw curve\n        const d = [\n            \"M\",\n            this._x(startPoint.x),\n            this._y(startPoint.y),\n            \"C\",\n            this._x(startControlPoint.x),\n            this._y(startControlPoint.y),\n            this._x(endControlPoint.x),\n            this._y(endControlPoint.y),\n            this._x(endPoint.x),\n            this._y(endPoint.y)\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubierBezier\", color, lineWidth);\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        if (!path || path.length == 0)\n            return node;\n        // Draw curve\n        const d = [\"M\", this._x(path[0].x), this._y(path[0].y)];\n        // Draw curve path\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            d.push(\"C\", this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"cubicBezierPath\", color, lineWidth || 1);\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handle(startPoint, endPoint) {\n        // TODO: redefine methods like these into an abstract class?\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handleLine(startPoint, endPoint) {\n        this.line(startPoint, endPoint, \"rgb(192,192,192)\");\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    dot(p, color) {\n        const node = this.makeNode(\"line\");\n        return this._bindFillDraw(node, \"dot\", color, 1);\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    point(p, color) {\n        var radius = 3;\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(p.x)}`);\n        node.setAttribute(\"cy\", `${this._y(p.y)}`);\n        node.setAttribute(\"r\", `${radius}`);\n        return this._bindFillDraw(node, \"point\", color, 1);\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circle(center, radius, color, lineWidth) {\n        // Todo: draw ellipse when scalex!=scaley\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"r\", `${radius * this.scale.x}`); // y?\n        return this._bindFillDraw(node, \"circle\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        const arcData = CircleSector.circleSectorUtils.describeSVGArc(this._x(center.x), this._y(center.y), radius * this.scale.x, // y?\n        startAngle, endAngle);\n        node.setAttribute(\"d\", arcData.join(\" \"));\n        return this._bindFillDraw(node, \"circleArc\", color, lineWidth || 1);\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        const node = this.makeNode(\"ellipse\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"rx\", `${radiusX * this.scale.x}`);\n        node.setAttribute(\"ry\", `${radiusY * this.scale.y}`);\n        // node.setAttribute( 'style', `transform: rotate(${rotation} ${center.x} ${center.y})` );\n        node.setAttribute(\"transform\", `rotate(${(rotation * 180) / Math.PI} ${this._x(center.x)} ${this._y(center.y)})`);\n        return this._bindFillDraw(node, \"ellipse\", color, lineWidth || 1);\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    square(center, size, color, lineWidth) {\n        const node = this.makeNode(\"rectangle\");\n        node.setAttribute(\"x\", `${this._x(center.x - size / 2.0)}`);\n        node.setAttribute(\"y\", `${this._y(center.y - size / 2.0)}`);\n        node.setAttribute(\"width\", `${size * this.scale.x}`);\n        node.setAttribute(\"height\", `${size * this.scale.y}`);\n        return this._bindFillDraw(node, \"square\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect(position, width, height, color, lineWidth) {\n        const node = this.makeNode(\"rect\");\n        node.setAttribute(\"x\", `${this._x(position.x)}`);\n        node.setAttribute(\"y\", `${this._y(position.y)}`);\n        node.setAttribute(\"width\", `${width * this.scale.x}`);\n        node.setAttribute(\"height\", `${height * this.scale.y}`);\n        return this._bindFillDraw(node, \"rect\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        const node = this.makeNode(\"path\");\n        const d = [];\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            d.push(\"M\", this._x(center.x + x), this._y(center.y + yMin));\n            d.push(\"L\", this._x(center.x + x), this._y(center.y + yMax));\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX;\n        var xMax = width / 2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            d.push(\"M\", this._x(center.x + xMin), this._y(center.y + y));\n            d.push(\"L\", this._x(center.x + xMax), this._y(center.y + y));\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"grid\", color, 1);\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        const node = this.makeNode(\"path\");\n        const d = [];\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                d.push(\"M\", this._x(center.x + x) - 4, this._y(center.y + y));\n                d.push(\"L\", this._x(center.x + x) + 4, this._y(center.y + y));\n                d.push(\"M\", this._x(center.x + x), this._y(center.y + y) - 4);\n                d.push(\"L\", this._x(center.x + x), this._y(center.y + y) + 4);\n            }\n        }\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"raster\", color, 1);\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    diamondHandle(center, size, color) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) - size / 2.0,\n            \"L\",\n            this._x(center.x) + size / 2.0,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + size / 2.0,\n            \"Z\"\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"diamondHandle\", color, 1);\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    squareHandle(center, size, color) {\n        const node = this.makeNode(\"rect\");\n        node.setAttribute(\"x\", `${this._x(center.x) - size / 2.0}`);\n        node.setAttribute(\"y\", `${this._y(center.y) - size / 2.0}`);\n        node.setAttribute(\"width\", `${size}`);\n        node.setAttribute(\"height\", `${size}`);\n        return this._bindFillDraw(node, \"squareHandle\", color, 1);\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        const node = this.makeNode(\"circle\");\n        node.setAttribute(\"cx\", `${this._x(center.x)}`);\n        node.setAttribute(\"cy\", `${this._y(center.y)}`);\n        node.setAttribute(\"r\", `${radius}`);\n        return this._bindFillDraw(node, \"circleHandle\", color, 1);\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    crosshair(center, radius, color) {\n        const node = this.makeNode(\"path\");\n        const d = [\n            \"M\",\n            this._x(center.x) - radius,\n            this._y(center.y),\n            \"L\",\n            this._x(center.x) + radius,\n            this._y(center.y),\n            \"M\",\n            this._x(center.x),\n            this._y(center.y) - radius,\n            \"L\",\n            this._x(center.x),\n            this._y(center.y) + radius\n        ];\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"crosshair\", color, 0.5);\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polygon(polygon, color, lineWidth) {\n        return this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        const node = this.makeNode(\"path\");\n        if (vertices.length == 0)\n            return node;\n        // Draw curve\n        const d = [\"M\", this._x(vertices[0].x), this._y(vertices[0].y)];\n        var n = vertices.length;\n        for (var i = 1; i < n; i++) {\n            d.push(\"L\", this._x(vertices[i].x), this._y(vertices[i].y));\n        }\n        if (!isOpen)\n            d.push(\"Z\");\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"polyline\", color, lineWidth || 1);\n    }\n    /**\n     * Draw a text label at the given relative position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    text(text, x, y, options) {\n        options = options || {};\n        const color = options.color || \"black\";\n        const node = this.makeNode(\"text\");\n        node.setAttribute(\"x\", `${this._x(x)}`);\n        node.setAttribute(\"y\", `${this._y(y)}`);\n        node.innerHTML = text;\n        return this._bindFillDraw(node, \"text\", color, 1);\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    label(text, x, y, rotation) {\n        const node = this.makeNode(\"text\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        node.setAttribute(\"transform\", `translate(${this.offset.x},${this.offset.y}), rotate(${(rotation / Math.PI) * 180})`);\n        node.innerHTML = text;\n        return this._bindFillDraw(node, \"label\", \"black\", null);\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        const node = this.makeNode(\"path\");\n        // Transform the path: in-place (fast) or copy (slower)\n        const d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        node.setAttribute(\"d\", d.join(\" \"));\n        return this._bindFillDraw(node, \"path\", color, lineWidth);\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    clear(color) {\n        // If this isn't the primary handler then do not remove anything here.\n        // The primary handler will do that (no double work).\n        if (this.isSecondary) {\n            return;\n        }\n        // // Clearing an SVG is equivalent to removing all its child elements.\n        // for (var i = 0; i < this.gNode.childNodes.length; i++) {\n        //   // Hide all nodes here. Don't throw them away.\n        //   // We can probably re-use them in the next draw cycle.\n        //   var child: SVGElement = this.gNode.childNodes[i] as SVGElement;\n        //   this.cache.set(child.getAttribute(\"id\"), child);\n        // }\n        // this.removeAllChildNodes();\n        // Add a covering rect with the given background color\n        this.curId = \"background\";\n        this.curClassName = undefined;\n        const node = this.makeNode(\"rect\");\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        // Note that the background does not scale with the zoom level (always covers full element)\n        node.setAttribute(\"x\", \"0\");\n        node.setAttribute(\"y\", \"0\");\n        node.setAttribute(\"width\", `${this.canvasSize.width}`);\n        node.setAttribute(\"height\", `${this.canvasSize.height}`);\n        // Bind this special element into the document\n        this._bindFillDraw(node, this.curId, null, null);\n        node.setAttribute(\"fill\", typeof color === \"undefined\" ? \"none\" : color);\n        // Clear the current ID again\n        this.curId = undefined;\n    }\n    /**\n     * A private helper function to clear all SVG nodes from the &gt;g> node.\n     *\n     * @private\n     */\n    removeAllChildNodes() {\n        while (this.bufferGNode.lastChild) {\n            this.bufferGNode.removeChild(this.bufferGNode.lastChild);\n        }\n    }\n    /**\n     * Create a new and empty `SVGElement` &lt;svg&gt; in the svg-namespace.\n     *\n     * @name createSvg\n     * @static\n     * @memberof drawutilssvg\n     * @return SVGElement\n     */\n    static createSvg() {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    }\n    /**\n     * Create a copy of the given path data. As path data only consists of strings and numbers,\n     * the copy will be shallow by definition.\n     *\n     * @name copyPathData\n     * @static\n     * @memberof drawutilssvg\n     */\n    static copyPathData(data) {\n        const copy = new Array(data.length);\n        for (var i = 0, n = data.length; i < n; i++) {\n            copy[i] = data[i];\n        }\n        return copy;\n    }\n    /**\n     * Transform the given path data (translate and scale. rotating is not intended here).\n     *\n     * @name transformPathData\n     * @static\n     * @memberof drawutilssvg\n     * @param {SVGPathParams} data - The data to transform.\n     * @param {XYCoords} offset - The translation offset (neutral is x=0, y=0).\n     * @param {XYCoords} scale - The scale factors (neutral is x=1, y=1).\n     */\n    static transformPathData(data, offset, scale) {\n        // Scale and translate {x,y}\n        const _stx = (index) => {\n            data[index] = offset.x + scale.x * Number(data[index]);\n        };\n        const _sty = (index) => {\n            data[index] = offset.y + scale.y * Number(data[index]);\n        };\n        // scale only {x,y}\n        const _sx = (index) => {\n            data[index] = scale.x * Number(data[index]);\n        };\n        const _sy = (index) => {\n            data[index] = scale.y * Number(data[index]);\n        };\n        const stx = (value) => {\n            return offset.x + scale.x * value;\n        };\n        const sty = (value) => {\n            return offset.y + scale.y * value;\n        };\n        // scale only {x,y}\n        const sx = (value) => {\n            return scale.x * value;\n        };\n        const sy = (value) => {\n            return scale.y * value;\n        };\n        var i = 0;\n        var lastPoint = { x: NaN, y: NaN };\n        // \"save last point\"\n        var _slp = (index) => {\n            lastPoint.x = Number(data[index]);\n            lastPoint.y = Number(data[index + 1]);\n        };\n        while (i < data.length) {\n            const cmd = data[i];\n            switch (cmd) {\n                case \"M\":\n                // MoveTo: M|m x y\n                case \"L\":\n                // LineTo L|l x y\n                case \"T\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"m\":\n                // MoveTo: M|m x y\n                case \"l\":\n                // LineTo L|l x y\n                case \"t\":\n                    // Shorthand/smooth quadratic Bézier curveto: T|t x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _slp(i + 1);\n                    i += 3;\n                    break;\n                case \"H\":\n                    // HorizontalLineTo: H|h x\n                    _stx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"h\":\n                    // HorizontalLineTo: H|h x\n                    _sx(i + 1);\n                    lastPoint.x = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"V\":\n                    // VerticalLineTo: V|v y\n                    _sty(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"v\":\n                    // VerticalLineTo: V|v y\n                    _sy(i + 1);\n                    lastPoint.y = Number(data[i + 1]);\n                    i += 2;\n                    break;\n                case \"C\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _stx(i + 5);\n                    _sty(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"c\":\n                    // CurveTo: C|c x1 y1 x2 y2 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _sx(i + 5);\n                    _sy(i + 6);\n                    _slp(i + 5);\n                    i += 7;\n                    break;\n                case \"S\":\n                case \"Q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _stx(i + 1);\n                    _sty(i + 2);\n                    _stx(i + 3);\n                    _sty(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"s\":\n                case \"q\":\n                    // Shorthand-/SmoothCurveTo: S|s x2 y2 x y\n                    // QuadraticCurveTo: Q|q x1 y1 x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 3);\n                    _sy(i + 4);\n                    _slp(i + 3);\n                    i += 5;\n                    break;\n                case \"A\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    // Uniform scale: just scale\n                    // NOTE: here is something TODO\n                    //  * if scalex!=scaleY this won't work\n                    //  * Arcs have to be converted to Bézier curves here in that case\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _stx(i + 6);\n                    _sty(i + 7);\n                    _slp(i + 6);\n                    // Update the arc flag when x _or_ y scale is negative\n                    if ((scale.x < 0 && scale.y >= 0) || (scale.x >= 0 && scale.y < 0)) {\n                        data[i + 5] = data[i + 5] ? 0 : 1;\n                    }\n                    i += 8;\n                    break;\n                case \"a\":\n                    // EllipticalArcTo: A|a rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                    _sx(i + 1);\n                    _sy(i + 2);\n                    _sx(i + 6);\n                    _sy(i + 7);\n                    _slp(i + 6);\n                    i += 8;\n                    break;\n                case \"z\":\n                case \"Z\":\n                    // ClosePath: Z|z (no arguments)\n                    // lastPoint.x = firstPoint.x;\n                    // lastPoint.y = firstPoint.y;\n                    i++;\n                    break;\n                // Safepoint: continue reading token by token until something is recognized again\n                default:\n                    i++;\n            }\n        } // END while\n    } // END transformPathData\n}\ndrawutilssvg.HEAD_XML = [\n    '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>',\n    '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" ',\n    '         \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">',\n    \"\"\n].join(\"\\n\");\n//# sourceMappingURL=drawutilssvg.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @modified 2020-10-06 Removed the .closePath() instruction from the circleArc function.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2020-10-28 Added the path(Path2D) function.\n * @modified 2020-12-28 Added the `singleSegment` mode (test).\n * @modified 2021-01-05 Added the image-loaded/broken check.\n * @modified 2021-01-24 Added the `setCurrentId` function from the `DrawLib` interface.\n * @modified 2021-02-22 Added the `path` drawing function to draw SVG path data.\n * @modified 2021-03-31 Added the `endDrawCycle` function from `DrawLib`.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @version  1.9.0\n **/\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Vertex } from \"./Vertex\";\nimport { drawutilssvg } from \"./drawutilssvg\";\n// Todo: rename this class to Drawutils?\n/**\n * @classdesc A wrapper class for basic drawing operations.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutils {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        this.ctx = context;\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     **/\n    beginDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        this.ctx.globalCompositeOperation = configuration.blendMode;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     **/\n    setCurrentId(uid) {\n        // NOOP\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color, lineWidth) {\n        var headlen = 8; // length of head in pixels\n        // var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        // var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        this.ctx.save();\n        this.ctx.beginPath();\n        var vertices = Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size) {\n        if (!image.complete || !image.naturalWidth) {\n            // Avoid drawing un-unloaded or broken images\n            return;\n        }\n        this.ctx.save();\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect(position, width, height, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    _fillOrDraw(color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    quadraticBezier(startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        if (!path || path.length == 0)\n            return;\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, \"rgb(0,32,192)\");\n        this.square(endPoint, 5, \"rgba(0,128,192,0.5)\");\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, \"rgb(192,192,192)\");\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n       * Draw a circular arc (section of a circle) with the given CSS color.\n       *\n       * @method circleArc\n       * @param {Vertex} center - The center of the circle.\n       * @param {number} radius - The radius of the circle.\n       * @param {number} startAngle - The angle to start at.\n       * @param {number} endAngle - The angle to end at.\n       * @param {string=#000000} color - The CSS color to draw the circle with.\n       * @param {number=1} lineWidth - The line width to use\n       // * @param {boolean=false} options.asSegment - If `true` then no beginPath and no draw will be applied (as part of larger path).\n       * @return {void}\n       * @instance\n       * @memberof drawutils\n       */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth, options) {\n        if (!options || !options.asSegment) {\n            this.ctx.beginPath();\n        }\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, startAngle, endAngle, false);\n        if (!options || !options.asSegment) {\n            // this.ctx.closePath();\n            this.ctx.lineWidth = lineWidth || 1;\n            this._fillOrDraw(color || \"#000000\");\n        }\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        if (typeof rotation === \"undefined\") {\n            rotation = 0.0;\n        }\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, rotation, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCoords} center - The center of the square.\n     * @param {number} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1)\n            return;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen)\n            // && vertices.length > 2 )\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.closePath();\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    }\n    text(text, x, y, options) {\n        options = options || {};\n        this.ctx.save();\n        x = this.offset.x + x * this.scale.x;\n        y = this.offset.y + y * this.scale.y;\n        const color = options.color || \"black\";\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fillText(text, x, y);\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.strokeText(text, x, y);\n        }\n        this.ctx.restore();\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    label(text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.translate(x, y);\n        if (typeof rotation != \"undefined\")\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || \"black\";\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        const d = options && options.inplace ? pathData : drawutilssvg.copyPathData(pathData);\n        drawutilssvg.transformPathData(d, this.offset, this.scale);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill(new Path2D(d.join(\" \")));\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke(new Path2D(d.join(\" \")));\n        }\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n}\n//# sourceMappingURL=draw.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2021-01-24 Added the `setCurrentId` function.\n * @modified 2021-05-31 Added the `setConfiguration` function from `DrawLib`.\n * @version  0.0.5\n **/\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilsgl {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === \"undefined\")\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log(\"gl initialized\");\n    }\n    _x2rel(x) {\n        return ((this.scale.x * x + this.offset.x) / this.gl.canvas.width) * 2.0 - 1.0;\n    }\n    _y2rel(y) {\n        return ((this.offset.y - this.scale.y * y) / this.gl.canvas.height) * 2.0 - 1.0;\n    }\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    }\n    /**\n     * Called before each draw cycle.\n     * @param {number} renderTime\n     **/\n    beginDrawCycle(renderTime) {\n        this._zindex = 0.0;\n        this.renderTime = renderTime;\n    }\n    /**\n     * Called after each draw cycle.\n     *\n     * This is required for compatibility with other draw classes in the library (like drawgl).\n     *\n     * @name endDrawCycle\n     * @method\n     * @param {number} renderTime\n     * @instance\n     **/\n    endDrawCycle(renderTime) {\n        // NOOP\n    }\n    /**\n     * Set the current drawlib configuration.\n     *\n     * @name setConfiguration\n     * @method\n     * @param {DrawLibConfiguration} configuration - The new configuration settings to use for the next render methods.\n     */\n    setConfiguration(configuration) {\n        // TODO\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).es.\n     **/\n    setCurrentId(uid) {\n        // NOOP\n        this.curId = uid;\n    }\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color) {\n        const vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size) {\n        // NOT YET IMPLEMENTED\n    }\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    _fillOrDraw(color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @param {number=} rotation - (optional, default=0) The rotation of the ellipse.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth, rotation) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {XYCords} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a rectangle.\n     *\n     * @param {XYCoords} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect(position, width, height, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth) {\n        const vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=}  lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    text(text, x, y, options) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    // +---------------------------------------------------------------------------------\n    // | Draw a non-scaling text label at the given position.\n    // +-------------------------------\n    label(text, x, y, rotation) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Draw an SVG-like path given by the specified path data.\n     *\n     * @method path\n     * @param {SVGPathData} pathData - An array of path commands and params.\n     * @param {string=null} color - (optional) The color to draw this path with (default is null).\n     * @param {number=1} lineWidth - (optional) the line width to use (default is 1).\n     * @param {boolean=false} options.inplace - (optional) If set to true then path transforamtions (scale and translate) will be done in-place in the array. This can boost the performance.\n     * @instance\n     * @memberof drawutils\n     * @return {R} An instance representing the drawn path.\n     */\n    path(pathData, color, lineWidth, options) {\n        // NOT YET IMPLEMENTED\n    }\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n}\n// Vertex shader source code\ndrawutilsgl.vertCode = `\n    precision mediump float;\n\n    attribute vec3 position;\n\n    uniform vec2 uRotationVector;\n\n    void main(void) {\n\tvec2 rotatedPosition = vec2(\n\t    position.x * uRotationVector.y +\n\t\tposition.y * uRotationVector.x,\n\t    position.y * uRotationVector.y -\n\t\tposition.x * uRotationVector.x\n\t);\n\n\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\n    }`;\n// Fragment shader source code\ndrawutilsgl.fragCode = `\n    precision highp float;\n\n    void main(void) {\n\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\n    }`;\n/**\n * Some GL helper utils.\n **/\nclass GLU {\n    constructor(gl) {\n        this.gl = gl;\n    }\n    bufferData(verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    }\n    /*=================== Shaders ====================*/\n    compileShader(shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        const vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    }\n    makeProgram(vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    }\n}\n//# sourceMappingURL=drawgl.js.map","/**\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the `getIncenter` function.\n * @modified  2020-12-28 Added the `getArea` function.\n * @modified  2021-01-20 Added UID.\n * @modified  2021-01-22 Always updating circumcircle when retieving it.\n * @version   2.5.1\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { Line } from \"./Line\";\nimport { Polygon } from \"./Polygon\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { geomutils } from \"./geomutils\";\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Bounds\n * @requires Circle\n * @requires Line\n * @requires Vertex\n * @requires Polygon\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires geomutils\n *\n */\nexport class Triangle {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    constructor(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    static fromArray(arr) {\n        if (arr.length < 3)\n            throw `Cannot create triangle from array with less than three vertices (${arr.length})`;\n        return new Triangle(arr[0], arr[1], arr[2]);\n    }\n    ;\n    /**\n     * Get the area of this triangle. The returned area is never negative.\n     *\n     * If you are interested in the signed area, please consider using the\n     * `Triangle.utils.signedArea` helper function. This method just returns\n     * the absolute value of the signed area.\n     *\n     * @method getArea\n     * @instance\n     * @memberof Triangle\n     * @return {number} The non-negative area of this triangle.\n     */\n    getArea() {\n        return Math.abs(Triangle.utils.signedArea(this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y));\n    }\n    ;\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    getCentroid() {\n        return new Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    }\n    ;\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    scaleToCentroid(factor) {\n        let centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    }\n    ;\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    getCircumcircle() {\n        // if( !this.center || !this.radius ) \n        this.calcCircumcircle();\n        return new Circle(this.center.clone(), this.radius);\n    }\n    ;\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    isAdjacent(tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    }\n    ;\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    getThirdVertex(vert1, vert2) {\n        if (this.a.equals(vert1) && this.b.equals(vert2) || this.a.equals(vert2) && this.b.equals(vert1))\n            return this.c;\n        if (this.b.equals(vert1) && this.c.equals(vert2) || this.b.equals(vert2) && this.c.equals(vert1))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    }\n    ;\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    calcCircumcircle() {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        const A = this.b.x - this.a.x;\n        const B = this.b.y - this.a.y;\n        const C = this.c.x - this.a.x;\n        const D = this.c.y - this.a.y;\n        const E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        const F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        const G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        let dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            const bounds = this.bounds();\n            this.center = new Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            const cx = (D * E - B * F) / G;\n            const cy = (A * F - C * E) / G;\n            this.center = new Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    }\n    ; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    inCircumcircle(v) {\n        const dx = this.center.x - v.x;\n        const dy = this.center.y - v.y;\n        const dist_squared = dx * dx + dy * dy;\n        return (dist_squared <= this.radius_squared);\n    }\n    ;\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    bounds() {\n        return new Bounds(new Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    }\n    ;\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    toPolygon() {\n        return new Polygon([this.a, this.b, this.c]);\n    }\n    ;\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    determinant() {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    }\n    ;\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    containsPoint(p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    }\n    ;\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    getIncircularTriangle() {\n        const lineA = new Line(this.a, this.b);\n        const lineB = new Line(this.b, this.c);\n        const lineC = new Line(this.c, this.a);\n        const bisector1 = geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        const bisector2 = geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        const intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        const circleIntersA = lineA.getClosestPoint(intersection);\n        const circleIntersB = lineB.getClosestPoint(intersection);\n        const circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    }\n    ;\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    getIncircle() {\n        return this.getIncircularTriangle().getCircumcircle();\n    }\n    ;\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    getIncenter() {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    }\n    ;\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    toString() {\n        return '{ a : ' + this.a.toString() + ', b : ' + this.b.toString() + ', c : ' + this.c.toString() + '}';\n    }\n    ;\n    /**\n     * Create an SVG representation of this triangle.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Triangle\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        var vertices = [this.a, this.b, this.c];\n        if (vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(vertices[0].x);\n            buffer.push(' ');\n            buffer.push(vertices[0].y);\n            for (var i = 1; i < vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(vertices[i].x);\n                buffer.push(' ');\n                buffer.push(vertices[i].y);\n            }\n            //if( !this.isOpen ) {\n            buffer.push(' Z');\n            //}\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    }\n    ;\n}\n/**\n * An epsilon for comparison.\n * This should be the same epsilon as in Vertex.\n *\n * @private\n **/\nTriangle.EPSILON = 1.0e-6;\nTriangle.utils = {\n    // Used in the bounds() function.\n    max3(a, b, c) {\n        return (a >= b && a >= c) ? a : (b >= a && b >= c) ? b : c;\n    },\n    min3(a, b, c) {\n        return (a <= b && a <= c) ? a : (b <= a && b <= c) ? b : c;\n    },\n    signedArea(p0x, p0y, p1x, p1y, p2x, p2y) {\n        return 0.5 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n    },\n    /**\n     * Used by the containsPoint() function.\n     *\n     * @private\n     **/\n    pointIsInTriangle(px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n        //\n        // Point-in-Triangle test found at\n        //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n        // var area : number = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n        var area = Triangle.utils.signedArea(p0x, p0y, p1x, p1y, p2x, p2y);\n        var s = 1 / (2 * area) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n        var t = 1 / (2 * area) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n        return s > 0 && t > 0 && (1 - s - t) > 0;\n    }\n};\n//# sourceMappingURL=Triangle.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-02-03\n * @modified 2021-03-01 Added `wrapMax` function.\n * @version  1.1.0\n **/\nimport { Line } from \"./Line\";\nimport { Triangle } from \"./Triangle\";\n/**\n * A collection of usefull geometry utilities.\n *\n * @global\n **/\nexport const geomutils = {\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle(pA, pB, pC, n) {\n        const triangle = new Triangle(pA, pB, pC);\n        const lineAB = new Line(pA, pB);\n        const lineAC = new Line(pA, pC);\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        const clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * (-1);\n        // Scale the rotated lines to the max leg length (looks better)\n        const lineLength = Math.max(lineAB.length(), lineAC.length());\n        const scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line(pA, pB.clone().rotate((-i * (insideAngle / n)), pA)).scale(scaleFactor));\n        }\n        return result;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [0,max).\n     *\n     * @name wrapMax\n     * @param {number} x - The value to wrap.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [0,max).\n     */\n    wrapMax(x, max) {\n        // Found at\n        //    https://stackoverflow.com/questions/4633177/c-how-to-wrap-a-float-to-the-interval-pi-pi\n        return (max + (x % max)) % max;\n    },\n    /**\n     * Wrap the value (e.g. an angle) into the given range of [min,max).\n     *\n     * @name wrapMinMax\n     * @param {number} x - The value to wrap.\n     * @param {number} min - The min bound to use for the range.\n     * @param {number} max - The max bound to use for the range.\n     * @return {number} The wrapped value inside the range [min,max).\n     */\n    // Currently un-used\n    wrapMinMax(x, min, max) {\n        return min + geomutils.wrapMax(x - min, max - min);\n    }\n};\n//# sourceMappingURL=geomutils.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\n/**\n * @classdesc A grid class with vertical and horizontal lines (or a raster).\n *\n * Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n * to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n * rather than a drawable object.\n *\n * @requires Vertex\n */\nexport class Grid {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    constructor(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n}\n/**\n * @memberof Grid\n **/\nGrid.utils = {\n    /**\n     * Calculate the logarithm of the given number (num) to a given base.<br>\n     * <br>\n     * This function returns the number l with<br>\n     *  <pre>num == Math.pow(base,l)</pre>\n     *\n     * @member baseLog\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} base - The base to calculate the logarithm to.\n     * @param {number} num  - The number to calculate the logarithm for.\n     * @return {number} <pre>log(base)/log(num)</pre>\n     **/\n    baseLog: (base, num) => { return Math.log(base) / Math.log(num); },\n    /**\n     * Calculate the raster scale for a given logarithmic mapping.<br>\n     * <br>\n     * Example (with adjustFactor=2):<br>\n     * <pre>\n     * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n     * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n     * </pre>\n     *\n     * @member mapRasterScale\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n     * @param {number} scale        The currently used scale factor.\n     * @return {number}\n     **/\n    mapRasterScale: (adjustFactor, scale) => {\n        var gf = 1.0;\n        if (scale >= 1) {\n            gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n            gf = 1 / Math.pow(adjustFactor, gf);\n        }\n        else {\n            gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n        }\n        return gf;\n    }\n};\n//# sourceMappingURL=Grid.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the `delete` key code from 8 to 46.\n * @modified 2020-10-04 Changed `window` to `globalThis`.\n * @modified 2020-10-04 Added extended JSDoc.\n * @version  1.0.4\n *\n * @file KeyHandler\n * @public\n **/\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n * @example\n *      // Javascript\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n */\nexport class KeyHandler {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @instance\n     * @memberof KeyHandler\n     * @param {HTMLElement} options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param {boolean} options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n    **/\n    constructor(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : globalThis;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    ;\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    fireEvent(event, listeners) {\n        let hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    }\n    ;\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireDownEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireDownEvent(e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = 'down';\n        }\n    }\n    ;\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name firePressEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return void\n     */\n    firePressEvent(e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    }\n    ;\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireUpEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireUpEvent(e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    }\n    ;\n    /**\n     * Resolve the key/name code.\n     */\n    static key2code(key) {\n        if (typeof key == 'number')\n            return key;\n        if (typeof key != 'string')\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    }\n    ;\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    installListeners() {\n        var _self = this;\n        this.element.addEventListener('keydown', this._keyDownListener = (e) => { _self.fireDownEvent(e, _self); });\n        this.element.addEventListener('keypress', this._keyPressListener = (e) => { _self.firePressEvent(e, _self); });\n        this.element.addEventListener('keyup', this._keyUpListener = (e) => { _self.fireUpEvent(e, _self); });\n    }\n    ;\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    releaseListeners() {\n        this.element.removeEventListener('keydown', this._keyDownListener);\n        this.element.removeEventListener('keypress', this._keyPressListener);\n        this.element.removeEventListener('keyup', this._keyUpListener);\n    }\n    ;\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @name down\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    down(key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    ;\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @name press\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    press(key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    ;\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     * @name up\n     * @memberof KeyHandler\n     * @instance\n     * @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void)} e - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    up(key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    ;\n    /**\n     * Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    isDown(key) {\n        if (typeof key == 'number')\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    }\n}\n/**\n * Source:\n * https://keycode.info/\n */\nKeyHandler.KEY_CODES = {\n    'break': 3,\n    'backspace': 8,\n    // 'delete'\t : 8, // alternate: 46\n    'tab': 9,\n    'clear': 12,\n    'enter': 13,\n    'shift': 16,\n    'ctrl': 17,\n    'alt': 18,\n    'pause': 19,\n    // 'break'\t         : 19,\n    'capslock': 20,\n    'hangul': 21,\n    'hanja': 25,\n    'escape': 27,\n    'conversion': 28,\n    'non-conversion': 29,\n    'spacebar': 32,\n    'pageup': 33,\n    'pagedown': 34,\n    'end': 35,\n    'home': 36,\n    'leftarrow': 37,\n    'uparrow': 38,\n    'rightarrow': 39,\n    'downarrow': 40,\n    'select': 41,\n    'print': 42,\n    'execute': 43,\n    'printscreen': 44,\n    'insert': 45,\n    'delete': 46,\n    'help': 47,\n    '0': 48,\n    '1': 49,\n    '2': 50,\n    '3': 51,\n    '4': 52,\n    '5': 53,\n    '6': 54,\n    '7': 55,\n    '8': 56,\n    '9': 57,\n    ':': 58,\n    'semicolon (firefox)': 59,\n    'equals': 59,\n    '<': 60,\n    'equals (firefox)': 61,\n    'ß': 63,\n    '@ (firefox)': 64,\n    'a': 65,\n    'b': 66,\n    'c': 67,\n    'd': 68,\n    'e': 69,\n    'f': 70,\n    'g': 71,\n    'h': 72,\n    'i': 73,\n    'j': 74,\n    'k': 75,\n    'l': 76,\n    'm': 77,\n    'n': 78,\n    'o': 79,\n    'p': 80,\n    'q': 81,\n    'r': 82,\n    's': 83,\n    't': 84,\n    'u': 85,\n    'v': 86,\n    'w': 87,\n    'x': 88,\n    'y': 89,\n    'z': 90,\n    'windows': 91,\n    'leftcommand': 91,\n    'chromebooksearch': 91,\n    'rightwindowkey': 92,\n    'windowsmenu': 93,\n    'rightcommant': 93,\n    'sleep': 95,\n    'numpad0': 96,\n    'numpad1': 97,\n    'numpad2': 98,\n    'numpad3': 99,\n    'numpad4': 100,\n    'numpad5': 101,\n    'numpad6': 102,\n    'numpad7': 103,\n    'numpad8': 104,\n    'numpad9': 105,\n    'multiply': 106,\n    'add': 107,\n    'numpadperiod': 108,\n    'subtract': 109,\n    'decimalpoint': 110,\n    'divide': 111,\n    'f1': 112,\n    'f2': 113,\n    'f3': 114,\n    'f4': 115,\n    'f5': 116,\n    'f6': 117,\n    'f7': 118,\n    'f8': 119,\n    'f9': 120,\n    'f10': 121,\n    'f11': 122,\n    'f12': 123,\n    'f13': 124,\n    'f14': 125,\n    'f15': 126,\n    'f16': 127,\n    'f17': 128,\n    'f18': 129,\n    'f19': 130,\n    'f20': 131,\n    'f21': 132,\n    'f22': 133,\n    'f23': 134,\n    'f24': 135,\n    'numlock': 144,\n    'scrolllock': 145,\n    '^': 160,\n    '!': 161,\n    // '؛' \t : 162 // (arabic semicolon)\n    '#': 163,\n    '$': 164,\n    'ù': 165,\n    'pagebackward': 166,\n    'pageforward': 167,\n    'refresh': 168,\n    'closingparen': 169,\n    '*': 170,\n    '~+*': 171,\n    // 'home'\t         : 172,\n    'minus': 173,\n    // 'mute'           : 173,\n    // 'unmute'\t : 173,\n    'decreasevolumelevel': 174,\n    'increasevolumelevel': 175,\n    'next': 176,\n    'previous': 177,\n    'stop': 178,\n    'play/pause': 179,\n    'email': 180,\n    'mute': 181,\n    'unmute': 181,\n    //'decreasevolumelevel'\t182 // firefox\n    //'increasevolumelevel'\t183 // firefox\n    'semicolon': 186,\n    'ñ': 186,\n    'equal': 187,\n    'comma': 188,\n    'dash': 189,\n    'period': 190,\n    'forwardslash': 191,\n    'ç': 191,\n    'grave accent': 192,\n    //'ñ' 192,\n    'æ': 192,\n    'ö': 192,\n    '?': 193,\n    '/': 193,\n    '°': 193,\n    // 'numpadperiod'\t : 194, // chrome\n    'openbracket': 219,\n    'backslash': 220,\n    'closebracket': 221,\n    'å': 221,\n    'singlequote': 222,\n    'ø': 222,\n    'ä': 222,\n    '`': 223,\n    // 'left or right ⌘ key (firefox)'\t224\n    'altgr': 225,\n    // '< /git >, left back slash'\t226\n    'GNOME Compose Key': 230,\n    'XF86Forward': 233,\n    'XF86Back': 234,\n    'alphanumeric': 240,\n    'hiragana': 242,\n    'katakana': 242,\n    'half-width': 243,\n    'full-width': 243,\n    'kanji': 244,\n    'unlocktrackpad': 251,\n    'toggletouchpad': 255\n};\n//# sourceMappingURL=KeyHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @modified 2020-10-04 Added extended JSDoc comments.\n * @modified 2020-11-25 Added the `isTouchEvent` param.\n * @modified 2021-01-10 The mouse handler is now also working with SVGElements.\n * @version  1.2.0\n *\n * @file MouseHandler\n * @public\n **/\nexport class XMouseEvent extends MouseEvent {\n}\nexport class XWheelEvent extends WheelEvent {\n}\n/**\n * @classdesc A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * @requires XYCoords\n */\nexport class MouseHandler {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * Usage\n     * =====\n     * @example\n     *   // Javascript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( function(e) {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( function(e) {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( function(e) {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( function(e) {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( function(e) {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( function(e) {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @example\n     *   // Typescript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( (e:XMouseEvent) => {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( (e:XMouseEvent) => {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( (e:XMouseEvent) => {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( (e:XWheelEvent) => {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    constructor(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // TODO: cc\n        // private mousePos       : { x:number, y:number }|undefined = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = null;\n        this.mouseDragPos = null;\n        // this.mousePos     = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        const _self = this;\n        this.handlers['mousemove'] = (e) => {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, 'mousemove'));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, 'drag'));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers['mouseup'] = (e) => {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, 'mouseup'));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers['mousedown'] = (e) => {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, 'mousedown'));\n        };\n        this.handlers['click'] = (e) => {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, 'click'));\n        };\n        this.handlers['wheel'] = (e) => {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, 'wheel'));\n        };\n        this.element.addEventListener('mousemove', this.handlers['mousemove']);\n        this.element.addEventListener('mouseup', this.handlers['mouseup']);\n        this.element.addEventListener('mousedown', this.handlers['mousedown']);\n        this.element.addEventListener('click', this.handlers['click']);\n        this.element.addEventListener('wheel', this.handlers['wheel']);\n    }\n    /**\n     * Get relative position from the given MouseEvent.\n     *\n     * @name relPos\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @return {XYCoords} The relative mouse coordinates.\n     */\n    relPos(e) {\n        return { x: e.offsetX,\n            y: e.offsetY\n        };\n    }\n    ;\n    /**\n     * Build the extended event params.\n     *\n     * @name mkParams\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @param {string} eventName - The name of the firing event.\n     * @return {XMouseEvent}\n     */\n    mkParams(e, eventName) {\n        const rel = this.relPos(e);\n        const xEvent = e;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            isTouchEvent: false,\n            pos: rel,\n            button: this.mouseButton,\n            leftButton: this.mouseButton == 0,\n            middleButton: this.mouseButton == 1,\n            rightButton: this.mouseButton == 2,\n            mouseDownPos: this.mouseDownPos,\n            draggedFrom: this.mouseDragPos,\n            wasDragged: (this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y)),\n            dragAmount: (this.mouseDownPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 })\n        };\n        return xEvent;\n    }\n    /**\n     * Install a new listener.\n     * Please note that this mouse handler can only handle one listener per event type.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to listen for.\n     * @return {void}\n     */\n    listenFor(eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        this.installed[eventName] = true;\n    }\n    /**\n     * Un-install a new listener.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to unlisten for.\n     * @return {void}\n     */\n    unlistenFor(eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        delete this.installed[eventName];\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-drag.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name drag\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The drag-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    drag(callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled('drag');\n        this.listeners.drag = callback;\n        this.listenFor('mousedown');\n        this.listenFor('mousemove');\n        this.listenFor('mouseup');\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-move.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name move\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The move-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    move(callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled('mousemove');\n        this.listenFor('mousemove');\n        this.listeners.mousemove = callback;\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-up.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name up\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The up-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    up(callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled('mouseup');\n        this.listenFor('mouseup');\n        this.listeners.mouseup = callback;\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-down.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name down\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The down-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    down(callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled('mousedown');\n        this.listenFor('mousedown');\n        this.listeners.mousedown = callback;\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-click.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name click\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The click-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    click(callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled('click');\n        this.listenFor('click');\n        this.listeners.click = callback;\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-wheel.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name wheel\n     * @memberof MouseHandler\n     * @instance\n     * @param {XWheelCallback} callback - The wheel-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    wheel(callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled('wheel');\n        this.listenFor('wheel');\n        this.listeners.wheel = callback;\n        return this;\n    }\n    ;\n    /**\n     * An internal function to throw events.\n     *\n     * @name throwAlreadyInstalled\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} name - The name of the event.\n     * @return {void}\n     */\n    throwAlreadyInstalled(name) {\n        throw `This MouseHandler already has a '${name}' callback. To keep the code simple there is only room for one.`;\n    }\n    ;\n    /**\n     * Call this when your work is done.\n     *\n     * The function will un-install all event listeners.\n     *\n     * @name destroy\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @return {void}\n     */\n    destroy() {\n        this.unlistenFor('mousedown');\n        this.unlistenFor('mousemove');\n        this.unlistenFor('moseup');\n        this.unlistenFor('click');\n        this.unlistenFor('wheel');\n        this.element.removeEventListener('mousemove', this.handlers['mousemove']);\n        this.element.removeEventListener('mouseup', this.handlers['mousedown']);\n        this.element.removeEventListener('mousedown', this.handlers['mousedown']);\n        this.element.removeEventListener('click', this.handlers['click']);\n        this.element.removeEventListener('wheel', this.handlers['wheel']);\n    }\n}\n//# sourceMappingURL=MouseHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @version 1.1.0\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc A wrapper for image objects. Has an upper left and a lower right corner point.\n *\n * @requires Vertex\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n */\nexport class PBImage {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    constructor(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        this.uid = UIDGenerator.next();\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    ;\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof PBImage\n     **/\n    toSVGString(options) {\n        console.warn(\"PBImage is not yet SVG serializable. Returning empty SVG string.\");\n        return \"\";\n    }\n    ;\n}\n//# sourceMappingURL=PBImage.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @modified 2020-11-17 Added pure click handling (no dragEnd and !wasMoved jiggliny any more) to the PlotBoilerplate.\n * @modified 2020-12-11 Added the `removeAll(boolean)` function.\n * @modified 2020-12-17 Added the `CircleSector` drawable.\n * @modified 2021-01-04 Avoiding multiple redraw call on adding multiple Drawables (array).\n * @modified 2021-01-08 Added param `draw:DraLib<void>` to the methods `drawVertices`, `drawGrid` and `drawSelectPolygon`.\n * @modified 2021-01-08 Added the customizable `drawAll(...)` function.\n * @modified 2021-01-09 Added the `drawDrawable(...)` function.\n * @modified 2021-01-10 Added the `eventCatcher` element (used to track mouse events on SVGs).\n * @modified 2021-01-26 Fixed SVG resizing.\n * @modified 2021-01-26 Replaced the old SVGBuilder by the new `drawutilssvg` library.\n * @modified 2021-02-08 Fixed a lot of es2015 compatibility issues.\n * @modified 2021-02-18 Adding `adjustOffset(boolean)` function.\n * @modified 2021-03-01 Updated the `PlotBoilerplate.draw(...)` function: ellipses are now rotate-able.\n * @modified 2021-03-03 Added the `VEllipseSector` drawable.\n * @modified 2021-03-29 Clearing `currentClassName` and `currentId` after drawing each drawable.\n * @modified 2021-04-25 Extending `remove` to accept arrays of drawables.\n * @version  1.14.0\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nvar _a;\nimport AlloyFinger from \"alloyfinger-typescript\";\nimport { drawutils } from \"./draw\";\nimport { drawutilsgl } from \"./drawgl\";\nimport { drawutilssvg } from \"./drawutilssvg\";\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { CircleSector } from \"./CircleSector\";\nimport { Grid } from \"./Grid\";\nimport { KeyHandler } from \"./KeyHandler\";\nimport { Line } from \"./Line\";\nimport { MouseHandler } from \"./MouseHandler\";\nimport { PBImage } from \"./PBImage\";\nimport { Polygon } from \"./Polygon\";\nimport { Triangle } from \"./Triangle\";\nimport { VEllipse } from \"./VEllipse\";\nimport { VEllipseSector } from \"./VEllipseSector\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { VertexAttr } from \"./VertexAttr\";\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex\n * @requires Line\n * @requires Vector\n * @requires Polygon\n * @requires PBImage\n * @requires VEllipse\n * @requires Circle\n * @requires MouseHandler\n * @requires KeyHandler\n * @requires VertexAttr\n * @requires CubicBezierCurve\n * @requires BezierPath\n * @requires Drawable\n * @requires DrawConfig\n * @requires IHooks\n * @requires PBParams\n * @requires Triangle\n * @requires drawutils\n * @requires drawutilsgl\n * @requires SVGSerializable\n * @requires XYCoords\n * @requires XYDimension\n */\nexport class PlotBoilerplate {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     */\n    constructor(config) {\n        /**\n         * A discrete timestamp to identify single render cycles.\n         * Note that using system time milliseconds is not a safe way to identify render frames, as on modern powerful machines\n         * multiple frames might be rendered within each millisecond.\n         * @member {number}\n         * @memberof plotboilerplate\n         * @instance\n         * @private\n         */\n        this.renderTime = 0;\n        // This should be in some static block ...\n        VertexAttr.model = {\n            bezierAutoAdjust: false,\n            renderTime: 0,\n            selectable: true,\n            isSelected: false,\n            draggable: true,\n            visible: true\n        };\n        if (typeof config.canvas == \"undefined\") {\n            throw \"No canvas specified.\";\n        }\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        const f = PlotBoilerplate.utils.fetch;\n        this.config = {\n            canvas: config.canvas,\n            fullSize: f.val(config, \"fullSize\", true),\n            fitToParent: f.bool(config, \"fitToParent\", true),\n            scaleX: f.num(config, \"scaleX\", 1.0),\n            scaleY: f.num(config, \"scaleY\", 1.0),\n            offsetX: f.num(config, \"offsetX\", 0.0),\n            offsetY: f.num(config, \"offsetY\", 0.0),\n            rasterGrid: f.bool(config, \"rasterGrid\", true),\n            rasterScaleX: f.num(config, \"rasterScaleX\", 1.0),\n            rasterScaleY: f.num(config, \"rasterScaleY\", 1.0),\n            rasterAdjustFactor: f.num(config, \"rasterAdjustdFactror\", 2.0),\n            drawOrigin: f.bool(config, \"drawOrigin\", false),\n            autoAdjustOffset: f.val(config, \"autoAdjustOffset\", true),\n            offsetAdjustXPercent: f.num(config, \"offsetAdjustXPercent\", 50),\n            offsetAdjustYPercent: f.num(config, \"offsetAdjustYPercent\", 50),\n            backgroundColor: config.backgroundColor || \"#ffffff\",\n            redrawOnResize: f.bool(config, \"redrawOnResize\", true),\n            defaultCanvasWidth: f.num(config, \"defaultCanvasWidth\", PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: f.num(config, \"defaultCanvasHeight\", PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: f.num(config, \"canvasWidthFactor\", 1.0),\n            canvasHeightFactor: f.num(config, \"canvasHeightFactor\", 1.0),\n            cssScaleX: f.num(config, \"cssScaleX\", 1.0),\n            cssScaleY: f.num(config, \"cssScaleY\", 1.0),\n            cssUniformScale: f.bool(config, \"cssUniformScale\", true),\n            saveFile: () => {\n                _self.hooks.saveFile(_self);\n            },\n            setToRetina: () => {\n                _self._setToRetina();\n            },\n            autoDetectRetina: f.bool(config, \"autoDetectRetina\", true),\n            enableSVGExport: f.bool(config, \"enableSVGExport\", true),\n            // Listeners/observers\n            preClear: f.func(config, \"preClear\", null),\n            preDraw: f.func(config, \"preDraw\", null),\n            postDraw: f.func(config, \"postDraw\", null),\n            // Interaction\n            enableMouse: f.bool(config, \"enableMouse\", true),\n            enableTouch: f.bool(config, \"enableTouch\", true),\n            enableKeys: f.bool(config, \"enableKeys\", true),\n            enableMouseWheel: f.bool(config, \"enableMouseWheel\", true),\n            // Experimental (and unfinished)\n            enableGL: f.bool(config, \"enableGL\", false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: f.bool(config, \"drawBezierHandleLines\", true),\n            drawBezierHandlePoints: f.bool(config, \"drawBezierHandlePoints\", true),\n            drawHandleLines: f.bool(config, \"drawHandleLines\", true),\n            drawHandlePoints: f.bool(config, \"drawHandlePoints\", true),\n            drawGrid: f.bool(config, \"drawGrid\", true),\n            bezier: {\n                color: \"#00a822\",\n                lineWidth: 2,\n                handleLine: {\n                    color: \"rgba(180,180,180,0.5)\",\n                    lineWidth: 1\n                },\n                pathVertex: {\n                    color: \"#B400FF\",\n                    lineWidth: 1,\n                    fill: true\n                },\n                controlVertex: {\n                    color: \"#B8D438\",\n                    lineWidth: 1,\n                    fill: true\n                }\n            },\n            polygon: {\n                color: \"#0022a8\",\n                lineWidth: 1\n            },\n            triangle: {\n                color: \"#6600ff\",\n                lineWidth: 1\n            },\n            ellipse: {\n                color: \"#2222a8\",\n                lineWidth: 1\n            },\n            ellipseSector: {\n                color: \"#a822a8\",\n                lineWidth: 2\n            },\n            circle: {\n                color: \"#22a8a8\",\n                lineWidth: 2\n            },\n            circleSector: {\n                color: \"#2280a8\",\n                lineWidth: 1\n            },\n            vertex: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            },\n            selectedVertex: {\n                color: \"#c08000\",\n                lineWidth: 2\n            },\n            line: {\n                color: \"#a844a8\",\n                lineWidth: 1\n            },\n            vector: {\n                color: \"#ff44a8\",\n                lineWidth: 1\n            },\n            image: {\n                color: \"#a8a8a8\",\n                lineWidth: 1\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.grid = new Grid(new Vertex(0, 0), new Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        const canvasElement = typeof config.canvas == \"string\" ? document.querySelector(config.canvas) : config.canvas;\n        // Which renderer to use: Canvas2D, WebGL (experimental) or SVG?\n        if (canvasElement.tagName.toLowerCase() === \"canvas\") {\n            this.canvas = canvasElement;\n            this.eventCatcher = this.canvas;\n            if (this.config.enableGL && typeof drawutilsgl === \"undefined\") {\n                console.warn(`Cannot use webgl. Package was compiled without experimental gl support. Please use plotboilerplate-glsupport.min.js instead.`);\n                console.warn(`Disabling GL and falling back to Canvas2D.`);\n                this.config.enableGL = false;\n            }\n            if (this.config.enableGL) {\n                const ctx = this.canvas.getContext(\"webgl\"); // webgl-experimental?\n                this.draw = new drawutilsgl(ctx, false);\n                // PROBLEM: same instance of fill and draw when using WebGL.\n                //          Shader program cannot be duplicated on the same context.\n                this.fill = this.draw.copyInstance(true);\n                console.warn(\"Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.\");\n            }\n            else {\n                const ctx = this.canvas.getContext(\"2d\");\n                this.draw = new drawutils(ctx, false);\n                this.fill = new drawutils(ctx, true);\n            }\n        }\n        else if (canvasElement.tagName.toLowerCase() === \"svg\") {\n            if (typeof drawutilssvg === \"undefined\")\n                throw `The svg draw library is not yet integrated part of PlotBoilerplate. Please include ./src/js/utils/helpers/drawutils.svg into your document.`;\n            this.canvas = canvasElement;\n            this.draw = new drawutilssvg(this.canvas, new Vertex(), // offset\n            new Vertex(), // scale\n            this.canvasSize, false, // fillShapes=false\n            this.drawConfig, false // isSecondary=false\n            );\n            this.fill = this.draw.copyInstance(true); // fillShapes=true\n            if (this.canvas.parentElement) {\n                this.eventCatcher = document.createElement(\"div\");\n                this.eventCatcher.style.position = \"absolute\";\n                this.eventCatcher.style.left = \"0\";\n                this.eventCatcher.style.top = \"0\";\n                this.eventCatcher.style.cursor = \"pointer\";\n                this.canvas.parentElement.style.position = \"relative\";\n                this.canvas.parentElement.appendChild(this.eventCatcher);\n            }\n            else {\n                this.eventCatcher = document.body;\n            }\n        }\n        else {\n            throw \"Element is neither a canvas nor an svg element.\";\n        }\n        this.draw.scale.set(this.config.scaleX, this.config.scaleY);\n        this.fill.scale.set(this.config.scaleX, this.config.scaleY);\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        globalThis.addEventListener(\"resize\", () => _self.resizeCanvas());\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    } // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    static _saveFile(pb) {\n        // Create fake SVG node\n        const svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        // Draw everything to fake node.\n        var tosvgDraw = new drawutilssvg(svgNode, pb.draw.offset, pb.draw.scale, pb.canvasSize, false, // fillShapes=false\n        pb.drawConfig);\n        var tosvgFill = tosvgDraw.copyInstance(true); // fillShapes=true\n        tosvgDraw.beginDrawCycle(0);\n        tosvgFill.beginDrawCycle(0);\n        if (pb.config.preClear)\n            pb.config.preClear();\n        tosvgDraw.clear(pb.config.backgroundColor);\n        if (pb.config.preDraw)\n            pb.config.preDraw(tosvgDraw, tosvgFill);\n        pb.drawAll(0, tosvgDraw, tosvgFill);\n        pb.drawVertices(0, tosvgDraw);\n        if (pb.config.postDraw)\n            pb.config.postDraw(tosvgDraw, tosvgFill);\n        tosvgDraw.endDrawCycle(0);\n        tosvgFill.endDrawCycle(0);\n        // Full support in all browsers \\o/\n        //    https://caniuse.com/xml-serializer\n        var serializer = new XMLSerializer();\n        var svgCode = serializer.serializeToString(svgNode);\n        var blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof globalThis[\"saveAs\"] != \"function\")\n            throw \"Cannot save file; did you load the ./utils/savefile helper function and the eligrey/SaveFile library?\";\n        var _saveAs = globalThis[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    }\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    _setToRetina() {\n        this.config.autoDetectRetina = true;\n        const pixelRatio = globalThis.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio;\n        this.resizeCanvas();\n        this.updateCSSscale();\n    }\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    fitToView(bounds) {\n        const canvasCenter = new Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        const canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        const ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        const center = new Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            const newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        else {\n            const newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        this.redraw();\n    }\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is globalThis.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    setConsole(con) {\n        this.console = con;\n    }\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    updateCSSscale() {\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleX);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleY);\n        }\n    }\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a VEllipseSector\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    add(drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            const arr = drawable;\n            // for( var i in arr )\n            for (var i = 0; i < arr.length; i++) {\n                this.add(arr[i], false);\n            }\n        }\n        else if (drawable instanceof Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener((event) => {\n                drawable.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof VEllipseSector) {\n            this.vertices.push(drawable.ellipse.center);\n            this.vertices.push(drawable.ellipse.axis);\n            this.drawables.push(drawable);\n            drawable.ellipse.center.listeners.addDragListener((event) => {\n                drawable.ellipse.axis.add(event.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Circle) {\n            this.vertices.push(drawable.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof CircleSector) {\n            this.vertices.push(drawable.circle.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof Polygon) {\n            this.drawables.push(drawable);\n            // for( var i in drawable.vertices )\n            for (var i = 0; i < drawable.vertices.length; i++)\n                this.vertices.push(drawable.vertices[i]);\n        }\n        else if (drawable instanceof Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath) {\n            this.drawables.push(drawable);\n            const bezierPath = drawable;\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0)\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n        }\n        else if (drawable instanceof PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            // Todo: think about a IDragEvent interface\n            drawable.upperLeft.listeners.addDragListener((e) => {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type: \" + typeof drawable + \".\";\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == \"undefined\")\n            this.redraw();\n    }\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Drawable|Array<Drawable>} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    remove(drawable, redraw, removeWithVertices) {\n        if (Array.isArray(drawable)) {\n            for (var i = 0; i < drawable.length; i++) {\n                this.remove(drawable[i], false, removeWithVertices);\n            }\n            if (redraw) {\n                this.redraw();\n            }\n            return;\n        }\n        if (drawable instanceof Vertex) {\n            this.removeVertex(drawable, false);\n            if (redraw) {\n                this.redraw();\n            }\n        }\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable) {\n                this.drawables.splice(i, 1);\n                if (removeWithVertices) {\n                    // Check if some listeners need to be removed\n                    if (drawable instanceof Line) {\n                        // Add some lines\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof Vector) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof VEllipse) {\n                        this.removeVertex(drawable.center, false);\n                        this.removeVertex(drawable.axis, false);\n                    }\n                    else if (drawable instanceof VEllipseSector) {\n                        this.removeVertex(drawable.ellipse.center);\n                        this.removeVertex(drawable.ellipse.axis);\n                    }\n                    else if (drawable instanceof Circle) {\n                        this.removeVertex(drawable.center, false);\n                    }\n                    else if (drawable instanceof CircleSector) {\n                        this.removeVertex(drawable.circle.center, false);\n                    }\n                    else if (drawable instanceof Polygon) {\n                        // for( var i in drawable.vertices )\n                        for (var i = 0; i < drawable.vertices.length; i++)\n                            this.removeVertex(drawable.vertices[i], false);\n                    }\n                    else if (drawable instanceof Triangle) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                        this.removeVertex(drawable.c, false);\n                    }\n                    else if (drawable instanceof BezierPath) {\n                        for (var i = 0; i < drawable.bezierCurves.length; i++) {\n                            this.removeVertex(drawable.bezierCurves[i].startPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].startControlPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].endControlPoint, false);\n                            if (i + 1 == drawable.bezierCurves.length) {\n                                this.removeVertex(drawable.bezierCurves[i].endPoint, false);\n                            }\n                        }\n                    }\n                    else if (drawable instanceof PBImage) {\n                        this.removeVertex(drawable.upperLeft, false);\n                        this.removeVertex(drawable.lowerRight, false);\n                    }\n                } // END removeWithVertices\n                if (redraw) {\n                    this.redraw();\n                }\n            }\n        }\n    }\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    removeVertex(vert, redraw) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    }\n    /**\n     * Remove all elements.\n     *\n     * If you want to keep the vertices, pass `true`.\n     *\n     * @method removeAll\n     * @param {boolean=false} keepVertices\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     */\n    removeAll(keepVertices) {\n        this.drawables = [];\n        if (!Boolean(keepVertices)) {\n            this.vertices = [];\n        }\n        this.redraw();\n    }\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search.\n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    getVertexNear(pixelPosition, pixelTolerance) {\n        var p = this.locatePointNear(this.transformMousePosition(pixelPosition.x, pixelPosition.y), pixelTolerance / Math.min(this.config.cssScaleX, this.config.cssScaleY));\n        if (p && p.typeName == \"vertex\")\n            return this.vertices[p.vindex];\n        return undefined;\n    }\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawGrid(draw) {\n        if (typeof draw === \"undefined\") {\n            draw = this.draw;\n        }\n        const gScale = {\n            x: (Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX) /\n                this.config.cssScaleX,\n            y: (Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY) /\n                this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        // console.log( \"drawGrid\", gScale, gSize, cs, offset );\n        offset.x =\n            ((Math.round(offset.x + cs.width) / Math.round(gSize.width)) * gSize.width) / this.draw.scale.x +\n                (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y =\n            ((Math.round(offset.y + cs.height) / Math.round(gSize.height)) * gSize.height) / this.draw.scale.y +\n                (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            draw.setCurrentClassName(null);\n            if (this.config.rasterGrid) {\n                // TODO: move config member to drawConfig\n                draw.setCurrentId(\"raster\");\n                draw.raster(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.125)\");\n            }\n            else {\n                draw.setCurrentId(\"grid\");\n                draw.grid(offset, this.canvasSize.width / this.draw.scale.x, this.canvasSize.height / this.draw.scale.y, gSize.width, gSize.height, \"rgba(0,128,255,0.095)\");\n            }\n        }\n    }\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawOrigin(draw) {\n        // Add a crosshair to mark the origin\n        draw.setCurrentId(\"origin\");\n        draw.crosshair({ x: 0, y: 0 }, 10, \"#000000\");\n    }\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    _handleColor(h, color) {\n        return h.attr.isSelected ? this.drawConfig.selectedVertex.color : h.attr.draggable ? color : \"rgba(128,128,128,0.5)\";\n    }\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawables(renderTime, draw, fill) {\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            this.draw.setCurrentId(d.uid);\n            this.fill.setCurrentId(d.uid);\n            this.draw.setCurrentClassName(d.className);\n            this.draw.setCurrentClassName(d.className);\n            this.drawDrawable(d, renderTime, draw, fill);\n        }\n    }\n    /**\n     * Draw the given drawable.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawable\n     * @param {Drawable} d - The drawable to draw.\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawable(d, renderTime, draw, fill) {\n        if (d instanceof BezierPath) {\n            for (var c in d.bezierCurves) {\n                draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                    // if (!d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                    //   if (d.bezierCurves[c].startPoint.attr.visible) {\n                    //     draw.setCurrentId(`${d.uid}_h0`);\n                    //     draw.setCurrentClassName(`${d.className}-start-handle`);\n                    //     draw.diamondHandle(\n                    //       d.bezierCurves[c].startPoint,\n                    //       7,\n                    //       this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color)\n                    //     );\n                    //   }\n                    //   d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    // }\n                    if (d.bezierCurves[c].startPoint.attr.visible) {\n                        draw.setCurrentId(`${d.uid}_h0`);\n                        draw.setCurrentClassName(`${d.className}-start-handle`);\n                        if (d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            draw.squareHandle(d.bezierCurves[c].startPoint, 5, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            draw.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    // if (!d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                    //   if (d.bezierCurves[c].endPoint.attr.visible) {\n                    //     draw.setCurrentId(`${d.uid}_h1`);\n                    //     draw.setCurrentClassName(`${d.className}-end-handle`);\n                    //     draw.diamondHandle(\n                    //       d.bezierCurves[c].endPoint,\n                    //       7,\n                    //       this._handleColor(d.bezierCurves[c].endPoint, \"#ff0000\") // this.drawConfig.bezier.pathVertex.color)\n                    //     );\n                    //   }\n                    //   d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    // }\n                    if (d.bezierCurves[c].endPoint.attr.visible) {\n                        draw.setCurrentId(`${d.uid}_h0`);\n                        draw.setCurrentClassName(`${d.className}-start-handle`);\n                        if (d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            draw.squareHandle(d.bezierCurves[c].endPoint, 5, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                        else {\n                            draw.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.bezier.pathVertex.color));\n                        }\n                    }\n                    if (d.bezierCurves[c].startControlPoint.attr.visible) {\n                        draw.setCurrentId(`${d.uid}_h2`);\n                        draw.setCurrentClassName(`${d.className}-start-control-handle`);\n                        draw.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    if (d.bezierCurves[c].endControlPoint.attr.visible) {\n                        draw.setCurrentId(`${d.uid}_h3`);\n                        draw.setCurrentClassName(`${d.className}-end-control-handle`);\n                        draw.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.controlVertex.color));\n                    }\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                else {\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                    draw.setCurrentId(`${d.uid}_l0`);\n                    draw.setCurrentClassName(`${d.className}-start-line`);\n                    draw.line(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                    draw.setCurrentId(`${d.uid}_l1`);\n                    draw.setCurrentClassName(`${d.className}-end-line`);\n                    draw.line(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                }\n            }\n        }\n        else if (d instanceof Polygon) {\n            draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                for (var i in d.vertices) {\n                    d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n        }\n        else if (d instanceof Triangle) {\n            draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n            if (!this.drawConfig.drawHandlePoints)\n                d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n        }\n        else if (d instanceof VEllipse) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_e0`);\n                draw.setCurrentClassName(`${d.className}-v-line`);\n                // draw.line( d.center.clone().add(0,d.axis.y-d.center.y), d.axis, '#c8c8c8' );\n                draw.line(d.center.clone().add(0, d.signedRadiusV()).rotate(d.rotation, d.center), d.axis, \"#c8c8c8\");\n                draw.setCurrentId(`${d.uid}_e1`);\n                draw.setCurrentClassName(`${d.className}-h-line`);\n                // draw.line( d.center.clone().add(d.axis.x-d.center.x,0), d.axis, '#c8c8c8' );\n                draw.line(d.center.clone().add(d.signedRadiusH(), 0).rotate(d.rotation, d.center), d.axis, \"#c8c8c8\");\n            }\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(`${d.className}`);\n            draw.ellipse(d.center, \n            // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n            d.radiusH(), d.radiusV(), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth, d.rotation);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.center.attr.renderTime = renderTime;\n                d.axis.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof VEllipseSector) {\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(`${d.className}`);\n            /* draw.ellipse( d.center,\n                    // Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y),\n                    d.radiusH(), d.radiusV(),\n                    this.drawConfig.ellipse.color,\n                    this.drawConfig.ellipse.lineWidth,\n                    d.rotation ); */\n            const data = VEllipseSector.ellipseSectorUtils.describeSVGArc(d.ellipse.center.x, d.ellipse.center.y, d.ellipse.radiusH(), d.ellipse.radiusV(), d.startAngle, d.endAngle, d.ellipse.rotation, { moveToStart: true });\n            draw.path(data, this.drawConfig.ellipseSector.color, this.drawConfig.ellipseSector.lineWidth);\n        }\n        else if (d instanceof Circle) {\n            draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n        }\n        else if (d instanceof CircleSector) {\n            draw.circleArc(d.circle.center, d.circle.radius, d.startAngle, d.endAngle, this.drawConfig.circleSector.color, this.drawConfig.circleSector.lineWidth);\n        }\n        else if (d instanceof Vertex) {\n            if (this.drawConfig.drawVertices && (!d.attr.selectable || !d.attr.draggable) && d.attr.visible) {\n                // Draw as special point (grey)\n                draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                d.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof Line) {\n            draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof Vector) {\n            draw.arrow(d.a, d.b, this.drawConfig.vector.color);\n            if (this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-handle`);\n                draw.circleHandle(d.b, 3, \"#a8a8a8\");\n            }\n            else {\n                d.b.attr.renderTime = renderTime;\n            }\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof PBImage) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_l0`);\n                draw.setCurrentClassName(`${d.className}-line`);\n                draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n            }\n            fill.setCurrentId(d.uid);\n            fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n            if (this.drawConfig.drawHandlePoints) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-lower-right`);\n                draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                d.lowerRight.attr.renderTime = renderTime;\n            }\n        }\n        else {\n            console.error(\"Cannot draw object. Unknown class.\");\n        }\n        draw.setCurrentClassName(null);\n        draw.setCurrentId(null);\n        fill.setCurrentClassName(null);\n        fill.setCurrentId(null);\n    }\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawSelectPolygon(draw) {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            draw.setCurrentId(this.selectPolygon.uid);\n            draw.polygon(this.selectPolygon, \"#888888\");\n            draw.crosshair(this.selectPolygon.vertices[0], 3, \"#008888\");\n        }\n    }\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawVertices(renderTime, draw) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime && this.vertices[i].attr.visible) {\n                draw.setCurrentId(this.vertices[i].uid);\n                draw.squareHandle(this.vertices[i], 5, this._handleColor(this.vertices[i], \"rgb(0,128,192)\"));\n                this.vertices[i].attr.renderTime = renderTime;\n            }\n        }\n    }\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    redraw() {\n        const renderTime = this.renderTime++;\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle(renderTime);\n        this.fill.beginDrawCycle(renderTime);\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw(this.draw, this.fill);\n        this.drawAll(renderTime, this.draw, this.fill);\n        if (this.config.postDraw)\n            this.config.postDraw(this.draw, this.fill);\n        this.draw.endDrawCycle(renderTime);\n        this.fill.endDrawCycle(renderTime);\n    }\n    /**\n     * Draw all: drawables, grid, select-polygon and vertices.\n     *\n     * @method drawAll\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawAll(renderTime, draw, fill) {\n        this.drawGrid(draw);\n        if (this.config.drawOrigin)\n            this.drawOrigin(draw);\n        this.drawDrawables(renderTime, draw, fill);\n        this.drawVertices(renderTime, draw);\n        this.drawSelectPolygon(draw);\n        // Clear IDs and classnames (postDraw hook might draw somthing and the do not want\n        // to interfered with that).\n        draw.setCurrentId(undefined);\n        draw.setCurrentClassName(undefined);\n    } // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    clear() {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor);\n    }\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    clearSelection(redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    }\n    /**\n     * Get the current view port.\n     *\n     * @method viewport\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    viewport() {\n        return new Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * this.config.cssScaleX, this.canvasSize.height * this.config.cssScaleY));\n    }\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    saveFile() {\n        this.hooks.saveFile(this);\n    }\n    /**\n     * Internal helper function used to get 'float' properties from elements.\n     * Used to determine border withs and paddings that were defined using CSS.\n     */\n    // TODO: this was moved to the DOM utils\n    getFProp(elem, propName) {\n        return parseFloat(globalThis.getComputedStyle(elem, null).getPropertyValue(propName));\n    }\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    // TODO: this was moved to the DOM utils\n    getAvailableContainerSpace() {\n        const _self = this;\n        const container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        _self.canvas.style.display = \"none\";\n        var padding = this.getFProp(container, \"padding\") || 0, border = this.getFProp(_self.canvas, \"border-width\") || 0, pl = this.getFProp(container, \"padding-left\") || padding, pr = this.getFProp(container, \"padding-right\") || padding, pt = this.getFProp(container, \"padding-top\") || padding, pb = this.getFProp(container, \"padding-bottom\") || padding, bl = this.getFProp(_self.canvas, \"border-left-width\") || border, br = this.getFProp(_self.canvas, \"border-right-width\") || border, bt = this.getFProp(_self.canvas, \"border-top-width\") || border, bb = this.getFProp(_self.canvas, \"border-bottom-width\") || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        _self.canvas.style.display = \"block\";\n        return { width: w - pl - pr - bl - br, height: h - pt - pb - bt - bb };\n    }\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    resizeCanvas() {\n        const _self = this;\n        const _setSize = (w, h) => {\n            w *= _self.config.canvasWidthFactor;\n            h *= _self.config.canvasHeightFactor;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.canvas instanceof HTMLCanvasElement) {\n                _self.canvas.width = w;\n                _self.canvas.height = h;\n            }\n            else if (_self.canvas instanceof SVGElement) {\n                this.canvas.setAttribute(\"viewBox\", `0 0 ${w} ${h}`);\n                this.canvas.setAttribute(\"width\", `${w}`);\n                this.canvas.setAttribute(\"height\", `${h}`);\n                this.draw.setSize(_self.canvasSize); // No need to set size to this.fill (instance copy)\n                this.eventCatcher.style.width = `${w}px`;\n                this.eventCatcher.style.height = `${h}px`;\n            }\n            else {\n                console.error(\"Error: cannot resize canvas element because it seems neither be a HTMLCanvasElement nor an SVGElement.\");\n            }\n            if (_self.config.autoAdjustOffset) {\n                // _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w*(_self.config.offsetAdjustXPercent/100);\n                // _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h*(_self.config.offsetAdjustYPercent/100);\n                _self.adjustOffset(false);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = globalThis.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = globalThis.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = \"absolute\";\n            _self.canvas.style.width = _self.config.canvasWidthFactor * width + \"px\";\n            _self.canvas.style.height = _self.config.canvasWidthFactor * height + \"px\";\n            _self.canvas.style.top = \"0px\";\n            _self.canvas.style.left = \"0px\";\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = \"absolute\";\n            const space = this.getAvailableContainerSpace();\n            _self.canvas.style.width = _self.config.canvasWidthFactor * space.width + \"px\";\n            _self.canvas.style.height = _self.config.canvasHeightFactor * space.height + \"px\";\n            _self.canvas.style.top = null;\n            _self.canvas.style.left = null;\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = null;\n            _self.canvas.style.height = null;\n            _setSize(_self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    }\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    selectVerticesInPolygon(polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    }\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    locatePointNear(point, tolerance) {\n        const _self = this;\n        if (typeof tolerance == \"undefined\")\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        // for( var vindex in _self.vertices ) {\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    }\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    handleClick(e) {\n        // x:number,y:number) {\n        const _self = this;\n        // const x:number = e.params.pos.x;\n        //const y:number = e.params.pos.y;\n        var p = this.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (p) {\n            _self.vertices[p.vindex].listeners.fireClickEvent(e);\n            if (this.keyHandler && this.keyHandler.isDown(\"shift\")) {\n                if (p.typeName == \"bpath\") {\n                    let vert = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (p.typeName == \"vertex\") {\n                    let vert = _self.vertices[p.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler.isDown(\"y\") /* && p.type=='bpath' && (p.pid==BezierPath.START_POINT || p.pid==BezierPath.END_POINT) */) {\n                _self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            const vert = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n            _self.selectPolygon.vertices.push(new Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    }\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    transformMousePosition(x, y) {\n        return {\n            x: (x / this.config.cssScaleX - this.config.offsetX) / this.config.scaleX,\n            y: (y / this.config.cssScaleY - this.config.offsetY) / this.config.scaleY\n        };\n    }\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    revertMousePosition(x, y) {\n        return { x: x / this.config.cssScaleX + this.config.offsetX, y: y / this.config.cssScaleY + this.config.offsetY };\n    }\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    getDraggedElementCount() {\n        return this.draggedElements.length;\n    }\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDownHandler(e) {\n        const _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse or touch events\n        var p = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!p)\n            return;\n        // Drag all selected elements?\n        if (p.typeName == \"vertex\" && _self.vertices[p.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[p.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(p);\n            if (p.typeName == \"bpath\")\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent(e);\n            else if (p.typeName == \"vertex\")\n                _self.vertices[p.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    }\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDragHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDragHandler(e) {\n        const _self = this;\n        const oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler.isDown(\"alt\") || this.keyHandler.isDown(\"spacebar\")) {\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == \"bpath\") {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == \"vertex\") {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    }\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseUpHandler(e) {\n        const _self = this;\n        if (e.button != 0)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged) {\n            _self.handleClick(e); // e.params.pos.x, e.params.pos.y );\n        }\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == \"bpath\") {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == \"vertex\") {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    }\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseWheelHandler(e) {\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        const _self = this;\n        const we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    }\n    /**\n     * Re-adjust the configured offset depending on the current canvas size and zoom (scaleX and scaleY).\n     *\n     * @method adjustOffset\n     * @param {boolean=false} redraw - [optional] If set the canvas will redraw with the new offset (default=false).\n     * @return {void}\n     **/\n    adjustOffset(redraw) {\n        this.draw.offset.x =\n            this.fill.offset.x =\n                this.config.offsetX =\n                    this.canvasSize.width * (this.config.offsetAdjustXPercent / 100);\n        this.draw.offset.y =\n            this.fill.offset.y =\n                this.config.offsetY =\n                    this.canvasSize.height * (this.config.offsetAdjustYPercent / 100);\n        if (redraw) {\n            this.redraw();\n        }\n    }\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    setOffset(newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    }\n    /**\n     * Set a new zoom value (and re-adjust the draw offset).\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {number} zoomFactorX - The new horizontal zoom value.\n     * @param {number} zoomFactorY - The new vertical zoom value.\n     * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n     **/\n    setZoom(zoomFactorX, zoomFactorY, interactionPos) {\n        let oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        let newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        let newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        let newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    }\n    installInputListeners() {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n                .down((e) => {\n                _self.mouseDownHandler(e);\n            })\n                .drag((e) => {\n                _self.mouseDragHandler(e);\n            })\n                .up((e) => {\n                _self.mouseUpHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse interaction disabled.\");\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas).wheel((e) => {\n                _self.mouseWheelHandler(e);\n            });\n        }\n        else {\n            _self.console.log(\"Mouse wheel interaction disabled.\");\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            const relPos = (pos) => {\n                const bounds = _self.canvas.getBoundingClientRect();\n                return { x: pos.x - bounds.left, y: pos.y - bounds.top };\n            };\n            // Make PB work together with both, AlloyFinger as a esm module or a commonjs function.\n            if (typeof globalThis[\"AlloyFinger\"] === \"function\" || typeof globalThis[\"createAlloyFinger\"] === \"function\") {\n                try {\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    const clearTouch = () => {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                        _self.draggedElements = [];\n                    };\n                    const afProps = {\n                        touchStart: (evt) => {\n                            if (evt.touches.length == 1) {\n                                touchMovePos = new Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                touchDownPos = new Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                                if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        params: {\n                                            isTouchEvent: true,\n                                            dragAmount: { x: 0, y: 0 },\n                                            wasDragged: false,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone(),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    _self.draggedElements = [draggedElement];\n                                    draggingVertex.listeners.fireDragStartEvent(fakeEvent);\n                                }\n                            }\n                        },\n                        touchMove: (evt) => {\n                            if (evt.touches.length == 1 && draggedElement) {\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                var rel = relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY });\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == \"vertex\") {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = {\n                                        isTouchEvent: true,\n                                        params: {\n                                            dragAmount: diff.clone(),\n                                            wasDragged: true,\n                                            mouseDownPos: touchDownPos.clone(),\n                                            mouseDragPos: touchDownPos.clone().add(diff),\n                                            vertex: draggingVertex\n                                        }\n                                    };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex(rel);\n                            }\n                            else if (evt.touches.length == 2) {\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                _self.setOffset(_self.draw.offset\n                                    .clone()\n                                    .addXY(evt.deltaX, evt.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: (evt) => {\n                            // Note: e.touches.length is 0 here\n                            if (draggedElement && draggedElement.typeName == \"vertex\") {\n                                var draggingVertex = _self.vertices[draggedElement.vindex];\n                                var fakeEvent = {\n                                    isTouchEvent: true,\n                                    params: {\n                                        dragAmount: { x: 0, y: 0 },\n                                        wasDragged: false,\n                                        mouseDownPos: touchDownPos.clone(),\n                                        mouseDragPos: touchDownPos.clone(),\n                                        vertex: draggingVertex\n                                    }\n                                };\n                                // Check if vertex was moved\n                                if (touchMovePos && touchDownPos && touchDownPos.distance(touchMovePos) < 0.001) {\n                                    // if( e.touches.length == 1 && diff.x == 0 && diff.y == 0 ) {\n                                    draggingVertex.listeners.fireClickEvent(fakeEvent);\n                                }\n                                else {\n                                    draggingVertex.listeners.fireDragEndEvent(fakeEvent);\n                                }\n                            }\n                            clearTouch();\n                        },\n                        touchCancel: (evt) => {\n                            clearTouch();\n                        },\n                        multipointStart: (evt) => {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: (evt) => {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: (evt) => {\n                            // For pinching there must be at least two touch items\n                            const fingerA = new Vertex(evt.touches.item(0).clientX, evt.touches.item(0).clientY);\n                            const fingerB = new Vertex(evt.touches.item(1).clientX, evt.touches.item(1).clientY);\n                            const center = new Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * evt.zoom, multiTouchStartScale.y * evt.zoom, center);\n                            _self.redraw();\n                        }\n                    }; // END afProps\n                    if (window[\"createAlloyFinger\"])\n                        window[\"createAlloyFinger\"](this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                    else\n                        new AlloyFinger(this.eventCatcher ? this.eventCatcher : this.canvas, afProps);\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n            }\n            else if (globalThis[\"Touchy\"] && typeof globalThis[\"Touchy\"] == \"function\") {\n                console.error(\"[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.\");\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\");\n            }\n        }\n        else {\n            _self.console.log(\"Touch interaction disabled.\");\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler({ trackAll: true })\n                .down(\"escape\", function () {\n                _self.clearSelection(true);\n            })\n                .down(\"shift\", function () {\n                _self.selectPolygon = new Polygon();\n                _self.redraw();\n            })\n                .up(\"shift\", function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log(\"Keyboard interaction disabled.\");\n        }\n    }\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    createGUI(props) {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        if (globalThis[\"utils\"] && typeof globalThis[\"utils\"].createGUI == \"function\")\n            return globalThis[\"utils\"].createGUI(this, props);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    }\n} // END class PlotBoilerplate\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n/**\n * A wrapper class for draggable items (mostly vertices).\n * @private\n **/\nPlotBoilerplate.Draggable = (_a = class {\n        constructor(item, typeName) {\n            this.item = item;\n            this.typeName = typeName;\n        }\n        isVertex() {\n            return this.typeName == PlotBoilerplate.Draggable.VERTEX;\n        }\n        setVIndex(vindex) {\n            this.vindex = vindex;\n            return this;\n        }\n    },\n    _a.VERTEX = \"vertex\",\n    _a);\n/**\n * A set of helper functions.\n **/\nPlotBoilerplate.utils = {\n    /**\n     * Merge the elements in the 'extension' object into the 'base' object based on\n     * the keys of 'base'.\n     *\n     * @param {Object} base\n     * @param {Object} extension\n     * @return {Object} base extended by the new attributes.\n     **/\n    safeMergeByKeys: (base, extension) => {\n        for (var k in extension) {\n            if (!extension.hasOwnProperty(k))\n                continue;\n            if (base.hasOwnProperty(k)) {\n                var typ = typeof base[k];\n                try {\n                    if (typ == \"boolean\")\n                        base[k] = !!JSON.parse(extension[k]);\n                    else if (typ == \"number\")\n                        base[k] = JSON.parse(extension[k]) * 1;\n                    else if (typ == \"function\" && typeof extension[k] == \"function\")\n                        base[k] = extension[k];\n                    else\n                        base[k] = extension[k];\n                }\n                catch (e) {\n                    console.error(\"error in key \", k, extension[k], e);\n                }\n            }\n            else {\n                base[k] = extension[k];\n            }\n        }\n        return base;\n    },\n    /**\n     * A helper function to scale elements (usually the canvas) using CSS.\n     *\n     * transform-origin is at (0,0).\n     *\n     * @param {HTMLElement} element - The DOM element to scale.\n     * @param {number} scaleX The - X scale factor.\n     * @param {number} scaleY The - Y scale factor.\n     * @return {void}\n     **/\n    setCSSscale: (element, scaleX, scaleY) => {\n        element.style[\"transform-origin\"] = \"0 0\";\n        if (scaleX == 1.0 && scaleY == 1.0)\n            element.style.transform = null;\n        else\n            element.style.transform = \"scale(\" + scaleX + \",\" + scaleY + \")\";\n    },\n    // A helper for fetching data from objects.\n    fetch: {\n        /**\n         * A helper function to the the object property value specified by the given key.\n         *\n         * @param {any} object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {any}    fallback - A default value if the key does not exist.\n         **/\n        val: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == \"undefined\")\n                return fallback;\n            return obj[key];\n        },\n        /**\n         * A helper function to the the object property numeric value specified by the given key.\n         *\n         * @param {any}    object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {number} fallback - A default value if the key does not exist.\n         * @return {number}\n         **/\n        num: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] === \"number\")\n                return obj[key];\n            else {\n                try {\n                    return JSON.parse(obj[key]) * 1;\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property boolean value specified by the given key.\n         *\n         * @param {any}     object   - The object to get the property's value from. Must not be null.\n         * @param {string}  key      - The key of the object property (the name).\n         * @param {boolean} fallback - A default value if the key does not exist.\n         * @return {boolean}\n         **/\n        bool: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == \"boolean\")\n                return obj[key];\n            else {\n                try {\n                    return !!JSON.parse(obj[key]);\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property function-value specified by the given key.\n         *\n         * @param {any}      object   - The object to get the property's value from. Must not be null.\n         * @param {string}   key      - The key of the object property (the name).\n         * @param {function} fallback - A default value if the key does not exist.\n         * @return {function}\n         **/\n        func: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] !== \"function\")\n                return fallback;\n            return obj[key];\n        }\n    },\n    /**\n     * Installs vertex listeners to the path's vertices so that controlpoints\n     * move with their path points when dragged.\n     *\n     * Bézier path points with attr.bezierAutoAdjust==true will have their\n     * two control points audo-updated if moved, too (keep path connections smooth).\n     *\n     * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n     **/\n    enableBezierPathAutoAdjust: (bezierPath) => {\n        for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n            // This should be wrapped into the BezierPath implementation.\n            bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            if (i + 1 == bezierPath.bezierCurves.length) {\n                // && !bezierPath.adjustCircular ) {\n                // Move last control point with the end point (if not circular)\n                bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                    if (!bezierPath.adjustCircular) {\n                        var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                        bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                    }\n                    bezierPath.updateArcLengths();\n                });\n            }\n        } // END for\n    }\n}; // END utils\nexport default PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-02-14 Added functions `radiusH` and `radiusV`.\n * @modified 2021-02-26 Added helper function `decribeSVGArc(...)`.\n * @modified 2021-03-01 Added attribute `rotation` to allow rotation of ellipses.\n * @modified 2021-03-03 Added the `vertAt` and `perimeter` methods.\n * @modified 2021-03-05 Added the `getFoci`, `normalAt` and `tangentAt` methods.\n * @modified 2021-03-09 Added the `clone` and `rotate` methods.\n * @modified 2021-03-10 Added the `toCubicBezier` method.\n * @modified 2021-03-15 Added `VEllipse.quarterSegmentCount` and `VEllipse.scale` functions.\n * @modified 2021-03-19 Added the `VEllipse.rotate` function.\n * @version  1.2.2\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nimport { Line } from \"./Line\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n */\nexport class VEllipse {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center - The ellipses center.\n     * @param {Vertex} axis - The x- and y-axis (the two radii encoded in a control point).\n     * @param {Vertex} rotation - [optional, default=0] The rotation of this ellipse.\n     * @name VEllipse\n     **/\n    constructor(center, axis, rotation) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.axis = axis;\n        this.rotation = rotation || 0.0;\n    }\n    /**\n     * Clone this ellipse (deep clone).\n     *\n     * @return {VEllipse} A copy of this ellipse.s\n     */\n    clone() {\n        return new VEllipse(this.center.clone(), this.axis.clone(), this.rotation);\n    }\n    /**\n     * Get the non-negative horizonal radius of this ellipse.\n     *\n     * @method radiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned horizontal radius of this ellipse.\n     */\n    radiusH() {\n        return Math.abs(this.signedRadiusH());\n    }\n    /**\n     * Get the signed horizonal radius of this ellipse.\n     *\n     * @method signedRadiusH\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed horizontal radius of this ellipse.\n     */\n    signedRadiusH() {\n        // return Math.abs(this.axis.x - this.center.x);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).x - this.center.x);\n        return new Vertex(this.axis).rotate(-this.rotation, this.center).x - this.center.x;\n    }\n    /**\n     * Get the non-negative vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The unsigned vertical radius of this ellipse.\n     */\n    radiusV() {\n        return Math.abs(this.signedRadiusV());\n    }\n    /**\n     * Get the signed vertical radius of this ellipse.\n     *\n     * @method radiusV\n     * @instance\n     * @memberof VEllipse\n     * @return {number} The signed vertical radius of this ellipse.\n     */\n    signedRadiusV() {\n        // return Math.abs(this.axis.y - this.center.y);\n        // Rotate axis back to origin before calculating radius\n        // return Math.abs(new Vertex(this.axis).rotate(-this.rotation,this.center).y - this.center.y);\n        return new Vertex(this.axis).rotate(-this.rotation, this.center).y - this.center.y;\n    }\n    /**\n     * Scale this ellipse by the given factor from the center point. The factor will be applied to both radii.\n     *\n     * @method scale\n     * @instance\n     * @memberof VEllipse\n     * @param {number} factor - The factor to scale by.\n     * @return {VEllipse} this for chaining.\n     */\n    scale(factor) {\n        this.axis.scale(factor, this.center);\n        return this;\n    }\n    /**\n     * Rotate this ellipse around its center.\n     *\n     * @method rotate\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to rotate by.\n     * @returns {VEllipse} this for chaining.\n     */\n    rotate(angle) {\n        this.axis.rotate(angle, this.center);\n        this.rotation += angle;\n        return this;\n    }\n    /**\n     * Get the vertex on the ellipse's outline at the given angle.\n     *\n     * @method vertAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to determine the vertex at.\n     * @return {Vertex} The vertex on the outline at the given angle.\n     */\n    vertAt(angle) {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        const a = this.radiusH();\n        const b = this.radiusV();\n        return new Vertex(VEllipse.utils.polarToCartesian(this.center.x, this.center.y, a, b, angle)).rotate(this.rotation, this.center);\n    }\n    /**\n     * Get the normal vector at the given angle.\n     * The normal vector is the vector that intersects the ellipse in a 90 degree angle\n     * at the given point (speicified by the given angle).\n     *\n     * Length of desired normal vector can be specified, default is 1.0.\n     *\n     * @method normalAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the normal vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    normalAt(angle, length) {\n        const point = this.vertAt(angle);\n        const foci = this.getFoci();\n        // Calculate the angle between [point,focusA] and [point,focusB]\n        const angleA = new Line(point, foci[0]).angle();\n        const angleB = new Line(point, foci[1]).angle();\n        const centerAngle = angleA + (angleB - angleA) / 2.0;\n        const endPointA = point.clone().addX(50).clone().rotate(centerAngle, point);\n        const endPointB = point\n            .clone()\n            .addX(50)\n            .clone()\n            .rotate(Math.PI + centerAngle, point);\n        if (this.center.distance(endPointA) < this.center.distance(endPointB)) {\n            return new Vector(point, endPointB);\n        }\n        else {\n            return new Vector(point, endPointA);\n        }\n    }\n    /**\n     * Get the tangent vector at the given angle.\n     * The tangent vector is the vector that touches the ellipse exactly at the given given\n     * point (speicified by the given angle).\n     *\n     * Note that the tangent is just 90 degree rotated normal vector.\n     *\n     * Length of desired tangent vector can be specified, default is 1.0.\n     *\n     * @method tangentAt\n     * @instance\n     * @memberof VEllipse\n     * @param {number} angle - The angle to get the tangent vector at.\n     * @param {number=1.0} length - [optional, default=1] The length of the returned vector.\n     */\n    tangentAt(angle, length) {\n        const normal = this.normalAt(angle, length);\n        // Rotate the normal by 90 degrees, then it is the tangent.\n        normal.b.rotate(Math.PI / 2, normal.a);\n        return normal;\n    }\n    /**\n     * Get the perimeter of this ellipse.\n     *\n     * @method perimeter\n     * @instance\n     * @memberof VEllipse\n     * @return {number}\n     */\n    perimeter() {\n        // This method does not use an iterative approximation to determine the perimeter, but it uses\n        // a wonderful closed approximation found by Srinivasa Ramanujan.\n        // Matt Parker made a neat video about it:\n        //    https://www.youtube.com/watch?v=5nW3nJhBHL0\n        const a = this.radiusH();\n        const b = this.radiusV();\n        return Math.PI * (3 * (a + b) - Math.sqrt((3 * a + b) * (a + 3 * b)));\n    }\n    /**\n     * Get the two foci of this ellipse.\n     *\n     * @method getFoci\n     * @instance\n     * @memberof VEllipse\n     * @return {Array<Vertex>} An array with two elements, the two focal points of the ellipse (foci).\n     */\n    getFoci() {\n        // https://www.mathopenref.com/ellipsefoci.html\n        const rh = this.radiusH();\n        const rv = this.radiusV();\n        const sdiff = rh * rh - rv * rv;\n        // f is the distance of each focs to the center.\n        const f = Math.sqrt(Math.abs(sdiff));\n        // Foci on x- or y-axis?\n        if (sdiff < 0) {\n            return [\n                this.center.clone().addY(f).rotate(this.rotation, this.center),\n                this.center.clone().addY(-f).rotate(this.rotation, this.center)\n            ];\n        }\n        else {\n            return [\n                this.center.clone().addX(f).rotate(this.rotation, this.center),\n                this.center.clone().addX(-f).rotate(this.rotation, this.center)\n            ];\n        }\n    }\n    /**\n     * Get equally distributed points on the outline of this ellipse.\n     *\n     * @param {number} pointCount - The number of points.\n     * @returns {Array<Vertex>}\n     */\n    getEquidistantVertices(pointCount) {\n        const angles = VEllipse.utils.equidistantVertAngles(this.radiusH(), this.radiusV(), pointCount);\n        const result = [];\n        for (var i = 0; i < angles.length; i++) {\n            result.push(this.vertAt(angles[i]));\n        }\n        return result;\n    }\n    /**\n     * Convert this ellipse into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing this ellipse.\n     */\n    toCubicBezier(quarterSegmentCount, threshold) {\n        // Math by Luc Maisonobe\n        //    http://www.spaceroots.org/documents/ellipse/node22.html\n        // Note that ellipses with radiusH=0 or radiusV=0 cannot be represented as Bézier curves.\n        // Return a single line here (as a Bézier curve)\n        // if (Math.abs(this.radiusV()) < 0.00001) {\n        //   const radiusH = this.radiusH();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addX(radiusH),\n        //       this.center.clone().addX(-radiusH),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test horizontal line ellipse\n        // }\n        // if (Math.abs(this.radiusH()) < 0.00001) {\n        //   const radiusV = this.radiusV();\n        //   return [\n        //     new CubicBezierCurve(\n        //       this.center.clone().addY(radiusV),\n        //       this.center.clone().addY(-radiusV),\n        //       this.center.clone(),\n        //       this.center.clone()\n        //     )\n        //   ]; // TODO: test vertical line ellipse\n        // }\n        // At least 4, but 16 seems to be a good value.\n        const segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        const radiusH = this.radiusH();\n        const radiusV = this.radiusV();\n        const curves = [];\n        const angles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, segmentCount);\n        let curAngle = angles[0];\n        let startPoint = this.vertAt(curAngle);\n        for (var i = 0; i < angles.length; i++) {\n            let nextAngle = angles[(i + 1) % angles.length];\n            let endPoint = this.vertAt(nextAngle);\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                // Distorted ellipses can only be approximated by linear Bézier segments\n                let diff = startPoint.difference(endPoint);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                let startTangent = this.tangentAt(curAngle);\n                let endTangent = this.tangentAt(nextAngle);\n                // Find intersection\n                let intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                let startDiff = startPoint.difference(intersection);\n                let endDiff = endPoint.difference(intersection);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    }\n    /**\n     * Create an SVG representation of this ellipse.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @param {object} options { className?:string }\n     * @return string The SVG string\n     */\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push(\"<ellipse\");\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' rx=\"' + this.axis.x + '\"');\n        buffer.push(' ry=\"' + this.axis.y + '\"');\n        buffer.push(\" />\");\n        return buffer.join(\"\");\n    }\n}\n/**\n * A static collection of ellipse-related helper functions.\n * @static\n */\nVEllipse.utils = {\n    /**\n     * Calculate a particular point on the outline of the given ellipse (center plus two radii plus angle).\n     *\n     * @name polarToCartesian\n     * @param {number} centerX - The x coordinate of the elliptic center.\n     * @param {number} centerY - The y coordinate of the elliptic center.\n     * @param {number} radiusH - The horizontal radius of the ellipse.\n     * @param {number} radiusV - The vertical radius of the ellipse.\n     * @param {number} angle - The angle (in radians) to get the desired outline point for.\n     * @reutn {XYCoords} The outlont point in absolute x-y-coordinates.\n     */\n    polarToCartesian: (centerX, centerY, radiusH, radiusV, angle) => {\n        // Tanks to Narasinham for the vertex-on-ellipse equations\n        // https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n        var s = Math.sin(Math.PI / 2 - angle);\n        var c = Math.cos(Math.PI / 2 - angle);\n        return {\n            x: centerX + (radiusH * radiusV * s) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2)),\n            y: centerY + (radiusH * radiusV * c) / Math.sqrt(Math.pow(radiusH * c, 2) + Math.pow(radiusV * s, 2))\n        };\n    },\n    /**\n     * Get the `theta` for a given `phi` (used to determine equidistant points on ellipse).\n     *\n     * @param radiusH\n     * @param radiusV\n     * @param phi\n     * @returns {number} theta\n     */\n    phiToTheta: (radiusH, radiusV, phi) => {\n        //  See https://math.stackexchange.com/questions/172766/calculating-equidistant-points-around-an-ellipse-arc\n        var tanPhi = Math.tan(phi);\n        var tanPhi2 = tanPhi * tanPhi;\n        var theta = -Math.PI / 2 + phi + Math.atan(((radiusH - radiusV) * tanPhi) / (radiusV + radiusH * tanPhi2));\n        return theta;\n    },\n    /**\n     * Get n equidistant points on the elliptic arc.\n     *\n     * @param pointCount\n     * @returns\n     */\n    equidistantVertAngles: (radiusH, radiusV, pointCount) => {\n        const angles = [];\n        for (var i = 0; i < pointCount; i++) {\n            var phi = Math.PI / 2.0 + ((Math.PI * 2) / pointCount) * i;\n            let theta = VEllipse.utils.phiToTheta(radiusH, radiusV, phi);\n            angles[i] = theta;\n        }\n        return angles;\n    }\n}; // END utils\n//# sourceMappingURL=VEllipse.js.map","/**\n * Implementation of elliptic sectors.\n * Note that sectors are constructed in clockwise direction.\n *\n * @author  Ikaros Kappler\n * @date    2021-02-26\n * @version 1.0.0\n */\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { geomutils } from \"./geomutils\";\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VEllipse } from \"./VEllipse\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A class for elliptic sectors.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class VEllipseSector {\n    /**\n     * Create a new elliptic sector from the given ellipse and two angles.\n     *\n     * Note that the direction from start to end goes clockwise, and that start and end angle\n     * will be wrapped to [0,PI*2).\n     *\n     * @constructor\n     * @name VEllipseSector\n     * @param {VEllipse} - The underlying ellipse to use.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {numner} endAngle - The end angle of the sector.\n     */\n    constructor(ellipse, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipseSector\";\n        this.uid = UIDGenerator.next();\n        this.ellipse = ellipse;\n        this.startAngle = geomutils.wrapMinMax(startAngle, 0, Math.PI * 2);\n        this.endAngle = geomutils.wrapMinMax(endAngle, 0, Math.PI * 2);\n    }\n    /**\n     * Convert this elliptic sector into cubic Bézier curves.\n     *\n     * @param {number=3} quarterSegmentCount - The number of segments per base elliptic quarter (default is 3, min is 1).\n     * @param {number=0.666666} threshold - The Bézier threshold (default value 0.666666 approximates the ellipse with best results\n     * but you might wish to use other values)\n     * @return {Array<CubicBezierCurve>} An array of cubic Bézier curves representing the elliptic sector.\n     */\n    toCubicBezier(quarterSegmentCount, threshold) {\n        // There are at least 4 segments required (dour quarters) to approximate a whole\n        // ellipse with Bézier curves.\n        // A visually 'good' approximation should have 12; this seems to be a good value (anything multiple of 4).\n        const segmentCount = Math.max(1, quarterSegmentCount || 3) * 4;\n        threshold = typeof threshold === \"undefined\" ? 0.666666 : threshold;\n        const radiusH = this.ellipse.radiusH();\n        const radiusV = this.ellipse.radiusV();\n        var startAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.startAngle);\n        var endAngle = VEllipseSector.ellipseSectorUtils.normalizeAngle(this.endAngle);\n        // Find all angles inside start and end\n        var angles = VEllipseSector.ellipseSectorUtils.equidistantVertAngles(radiusH, radiusV, startAngle, endAngle, segmentCount);\n        angles = [startAngle].concat(angles).concat([endAngle]);\n        const curves = [];\n        let curAngle = angles[0];\n        let startPoint = this.ellipse.vertAt(curAngle);\n        for (var i = 0; i + 1 < angles.length; i++) {\n            let nextAngle = angles[(i + 1) % angles.length];\n            let endPoint = this.ellipse.vertAt(nextAngle);\n            let startTangent = this.ellipse.tangentAt(curAngle);\n            let endTangent = this.ellipse.tangentAt(nextAngle);\n            // Distorted ellipses can only be approximated by linear Bézier segments\n            if (Math.abs(radiusV) < 0.0001 || Math.abs(radiusH) < 0.0001) {\n                let diff = startPoint.difference(endPoint);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().addXY(diff.x * 0.333, diff.y * 0.333), endPoint.clone().addXY(-diff.x * 0.333, -diff.y * 0.333));\n                curves.push(curve);\n            }\n            else {\n                // Find intersection\n                let intersection = startTangent.intersection(endTangent);\n                // What if intersection is undefined?\n                // --> This *can* not happen if segmentCount > 2 and height and width of the ellipse are not zero.\n                let startDiff = startPoint.difference(intersection);\n                let endDiff = endPoint.difference(intersection);\n                let curve = new CubicBezierCurve(startPoint.clone(), endPoint.clone(), startPoint.clone().add(startDiff.scale(threshold)), endPoint.clone().add(endDiff.scale(threshold)));\n                curves.push(curve);\n            }\n            startPoint = endPoint;\n            curAngle = nextAngle;\n        }\n        return curves;\n    }\n}\nVEllipseSector.ellipseSectorUtils = {\n    /**\n     * Helper function to convert an elliptic section to SVG arc params (for the `d` attribute).\n     * Inspiration found at:\n     *    https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n     *\n     * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n     * @return [ 'A', radiusH, radiusV, rotation, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n     */\n    describeSVGArc: (x, y, radiusH, radiusV, startAngle, endAngle, rotation, options) => {\n        if (typeof options === \"undefined\")\n            options = { moveToStart: true };\n        if (typeof rotation === \"undefined\")\n            rotation = 0.0;\n        // Important note: this function only works if start- and end-angle are within\n        // one whole circle [x,x+2*PI].\n        // Revelations of more than 2*PI might result in unexpected arcs.\n        // -> Use the geomutils.wrapMax( angle, 2*PI )\n        startAngle = geomutils.wrapMax(startAngle, Math.PI * 2);\n        endAngle = geomutils.wrapMax(endAngle, Math.PI * 2);\n        // Find the start- and end-point on the rotated ellipse\n        // XYCoords to Vertex (for rotation)\n        var end = new Vertex(VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, endAngle));\n        var start = new Vertex(VEllipse.utils.polarToCartesian(x, y, radiusH, radiusV, startAngle));\n        end.rotate(rotation, { x: x, y: y });\n        start.rotate(rotation, { x: x, y: y });\n        // Boolean stored as integers (0|1).\n        var diff = endAngle - startAngle;\n        var largeArcFlag;\n        if (diff < 0) {\n            largeArcFlag = Math.abs(diff) < Math.PI ? 1 : 0;\n        }\n        else {\n            largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0;\n        }\n        const sweepFlag = 1;\n        const pathData = [];\n        if (options.moveToStart) {\n            pathData.push(\"M\", start.x, start.y);\n        }\n        // Arc rotation in degrees, not radians.\n        const r2d = 180 / Math.PI;\n        pathData.push(\"A\", radiusH, radiusV, rotation * r2d, largeArcFlag, sweepFlag, end.x, end.y);\n        return pathData;\n    },\n    /**\n     * Helper function to find second-kind elliptic angles, so that the euclidean distance along the the\n     * elliptic sector is the same for all.\n     *\n     * Note that this is based on the full ellipse calculuation and start and end will be cropped; so the\n     * distance from the start angle to the first angle and/or the distance from the last angle to\n     * the end angle may be different to the others.\n     *\n     * Furthermore the computation is only possible on un-rotated ellipses; if your source ellipse has\n     * a rotation on the plane please 'rotate' the result angles afterwards to find matching angles.\n     *\n     * Returned angles are normalized to the interval `[ 0, PI*2 ]`.\n     *\n     * @param {number} radiusH - The first (horizonal) radius of the ellipse.\n     * @param {number} radiusV - The second (vertical) radius of the ellipse.\n     * @param {number} startAngle - The opening angle of your elliptic sector (please use normalized angles).\n     * @param {number} endAngle - The closing angle of your elliptic sector (please use normalized angles).\n     * @param {number} fullEllipsePointCount - The number of base segments to use from the source ellipse (12 or 16 are good numbers).\n     * @return {Array<number>} An array of n angles inside startAngle and endAngle (where n <= fullEllipsePointCount).\n     */\n    equidistantVertAngles: (radiusH, radiusV, startAngle, endAngle, fullEllipsePointCount) => {\n        var ellipseAngles = VEllipse.utils.equidistantVertAngles(radiusH, radiusV, fullEllipsePointCount);\n        ellipseAngles = ellipseAngles.map((angle) => VEllipseSector.ellipseSectorUtils.normalizeAngle(angle));\n        var angleIsInRange = (angle) => {\n            if (startAngle < endAngle)\n                return angle >= startAngle && angle <= endAngle;\n            else\n                return angle >= startAngle || (angle <= endAngle && angle >= 0);\n        };\n        // Drop all angles outside the sector\n        var ellipseAngles = ellipseAngles.filter(angleIsInRange);\n        // Now we need to sort the angles to the first one in the array is the closest to startAngle.\n        // --> find the angle that is closest to the start angle\n        var startIndex = VEllipseSector.ellipseSectorUtils.findClosestToStartAngle(startAngle, endAngle, ellipseAngles);\n        // Bring all angles into the correct order\n        //    Idea: use splice or slice here?\n        var angles = [];\n        for (var i = 0; i < ellipseAngles.length; i++) {\n            angles.push(ellipseAngles[(startIndex + i) % ellipseAngles.length]);\n        }\n        return angles;\n    },\n    findClosestToStartAngle: (startAngle, endAngle, ellipseAngles) => {\n        // Note: endAngle > 0 && startAngle > 0\n        if (startAngle > endAngle) {\n            const n = ellipseAngles.length;\n            for (var i = 0; i < n; i++) {\n                const ea = geomutils.wrapMinMax(ellipseAngles[i], 0, Math.PI * 2);\n                if (ea >= startAngle && ea >= endAngle) {\n                    return i;\n                }\n            }\n        }\n        return 0;\n    },\n    normalizeAngle: (angle) => (angle < 0 ? Math.PI * 2 + angle : angle),\n    /**\n     * Convert the elliptic arc from endpoint parameters to center parameters as described\n     * in the w3c svg arc implementation note.\n     *\n     * https://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter\n     *\n     * @param {number} x1 - The x component of the start point (end of last SVG command).\n     * @param {number} y1 - The y component of the start point (end of last SVG command).\n     * @param {number} rx - The first (horizontal) radius of the ellipse.\n     * @param {number} ry - The second (vertical) radius of the ellipse.\n     * @param {number} phi - The ellipse's rotational angle (angle of axis rotation) in radians (not in degrees as the SVG command uses!)\n     * @param {boolean} fa - The large-arc-flag (boolean, not 0 or 1).\n     * @param {boolean} fs - The sweep-flag (boolean, not 0 or 1).\n     * @param {number} x2 - The x component of the end point (end of last SVG command).\n     * @param {number} y2 - The y component of the end point (end of last SVG command).\n     * @returns\n     */\n    endpointToCenterParameters(x1, y1, rx, ry, phi, fa, fs, x2, y2) {\n        // console.log(\"endpointToCenterParameters\", x1, y1, phi, rx, ry, fa, fs, x2, y2);\n        // Thanks to\n        //    https://observablehq.com/@toja/ellipse-and-elliptical-arc-conversion\n        const abs = Math.abs;\n        const sin = Math.sin;\n        const cos = Math.cos;\n        const sqrt = Math.sqrt;\n        const pow = (n) => {\n            return n * n;\n        };\n        const sinphi = sin(phi);\n        const cosphi = cos(phi);\n        // Step 1: simplify through translation/rotation\n        const x = (cosphi * (x1 - x2)) / 2 + (sinphi * (y1 - y2)) / 2;\n        const y = (-sinphi * (x1 - x2)) / 2 + (cosphi * (y1 - y2)) / 2;\n        const px = pow(x), py = pow(y), prx = pow(rx), pry = pow(ry);\n        // correct of out-of-range radii\n        const L = px / prx + py / pry;\n        if (L > 1) {\n            rx = sqrt(L) * abs(rx);\n            ry = sqrt(L) * abs(ry);\n        }\n        else {\n            rx = abs(rx);\n            ry = abs(ry);\n        }\n        // Step 2 + 3: compute center\n        const sign = fa === fs ? -1 : 1;\n        const M = sqrt((prx * pry - prx * py - pry * px) / (prx * py + pry * px)) * sign;\n        const _cx = (M * (rx * y)) / ry;\n        const _cy = (M * (-ry * x)) / rx;\n        const cx = cosphi * _cx - sinphi * _cy + (x1 + x2) / 2;\n        const cy = sinphi * _cx + cosphi * _cy + (y1 + y2) / 2;\n        // Step 4: Compute start and end angle\n        const center = new Vertex(cx, cy);\n        const axis = center.clone().addXY(rx, ry);\n        const ellipse = new VEllipse(center, axis, 0);\n        ellipse.rotate(phi);\n        const startAngle = new Line(ellipse.center, new Vertex(x1, y1)).angle();\n        const endAngle = new Line(ellipse.center, new Vertex(x2, y2)).angle();\n        return new VEllipseSector(ellipse, startAngle - phi, endAngle - phi);\n    }\n}; // END ellipseSectorUtils\n//# sourceMappingURL=VEllipseSector.js.map","/**\n * Todos:\n *  + use a Drawable interface\n *  + use a SVGSerializable interface\n *\n * @require Vertex\n *\n * @deprecated THIS CLASS IS DEPRECATED. Please use the new `drawutilssvg` instead.\n *\n * @author   Ikaros Kappler\n * @date     2018-12-04\n * @modified 2019-11-07 Added the 'Triangle' style class.\n * @modified 2019-11-13 Added the <?xml ...?> tag.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-12-17 Added Circle and CircleSection style classes.\n * @modified 2021-01-26 DEPRECATION\n * @version  1.0.5\n **/\n/**\n * @classdesc A default SVG builder.\n *\n * @requires SVGSerializable\n * @requires Vertex\n */\nexport class SVGBuilder {\n    /**\n     * @constructor\n     **/\n    constructor() {\n        console.warn(\"THIS CLASS IS DEPRECATED. Please use the new 'drawutilssvg' instead.\");\n    }\n    ;\n    /**\n     *  Builds the SVG code from the given list of drawables.\n     *\n     * @param {object[]} drawables - The drawable elements (should implement Drawable) to be converted (each must have a toSVGString-function).\n     * @param {object}   options  - { canvasSize, zoom, offset }\n     * @return {string}\n     **/\n    build(drawables, options) {\n        var nl = '\\n';\n        var indent = '  ';\n        var buffer = [];\n        buffer.push('<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + nl);\n        buffer.push('<svg width=\"' + options.canvasSize.width + '\" height=\"' + options.canvasSize.height + '\"');\n        buffer.push(' viewBox=\"');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push(options.canvasSize.width.toString());\n        buffer.push(' ');\n        buffer.push(options.canvasSize.height.toString());\n        buffer.push('\"');\n        buffer.push(' xmlns=\"http://www.w3.org/2000/svg\">' + nl);\n        buffer.push(indent + '<defs>' + nl);\n        buffer.push(indent + '<style>' + nl);\n        buffer.push(indent + indent + ' .Vertex { fill : blue; stroke : none; } ' + nl);\n        buffer.push(indent + indent + ' .Triangle { fill : none; stroke : turquoise; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Polygon { fill : none; stroke : green; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .BezierPath { fill : none; stroke : blue; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .VEllipse { fill : none; stroke : black; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Line { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Circle { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .CircleSector { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + '</style>' + nl);\n        buffer.push(indent + '</defs>' + nl);\n        buffer.push(indent + '<g class=\"main-g\"');\n        if (options.zoom || options.offset) {\n            buffer.push(' transform=\"');\n            if (options.zoom)\n                buffer.push('scale(' + options.zoom.x + ',' + options.zoom.y + ')');\n            if (options.offset)\n                buffer.push(' translate(' + options.offset.x + ',' + options.offset.y + ')');\n            buffer.push('\"');\n        }\n        buffer.push('>' + nl);\n        for (var i in drawables) {\n            var d = drawables[i];\n            if (typeof d.toSVGString == 'function') {\n                buffer.push(indent + indent);\n                buffer.push(d.toSVGString({ 'className': d.className }));\n                buffer.push(nl);\n            }\n            else {\n                console.warn('Unrecognized drawable type has no toSVGString()-function. Ignoring: ' + d.className);\n            }\n        }\n        buffer.push(indent + '</g>' + nl);\n        buffer.push('</svg>' + nl);\n        return buffer.join('');\n    }\n    ;\n}\n//# sourceMappingURL=SVGBuilder.js.map","/**\n * @author   Ikaros Kappler\n * @version  1.0.1\n * @date     2018-11-10\n * @modified 2020-10-23 Ported to Typescript.\n * @modified 2020-10-30 Exporting each color under its name globally.\n **/\nimport { Color } from \"./datastructures/Color\";\nexport const Red = Color.makeRGB(255, 67, 55);\nexport const Pink = Color.makeRGB(232, 31, 100);\nexport const Purple = Color.makeRGB(156, 39, 175);\nexport const DeepPurple = Color.makeRGB(103, 59, 184);\nexport const Indigo = Color.makeRGB(64, 81, 181);\nexport const Blue = Color.makeRGB(35, 151, 245);\nexport const LightBlue = Color.makeRGB(6, 170, 245);\nexport const Cyan = Color.makeRGB(3, 189, 214);\nexport const Teal = Color.makeRGB(1, 150, 137);\nexport const Green = Color.makeRGB(77, 175, 82);\nexport const LightGreen = Color.makeRGB(141, 195, 67);\n/**\n * A set of beautiful web colors (I know, beauty is in the eye of the beholder).\n *\n * I found this color chart with 11 colors and think it is somewhat nice\n *    https://www.pinterest.com/pin/229965124706497134/\n *\n * @requires Color\n *\n */\nexport const WebColors = [\n    Red,\n    Pink,\n    Purple,\n    DeepPurple,\n    Indigo,\n    Blue,\n    LightBlue,\n    Cyan,\n    Teal,\n    Green,\n    LightGreen\n];\n/**\n * A helper function to shuffle the colors into a new order.\n */\nexport const shuffleWebColors = (order) => {\n    const result = Array(order.length);\n    for (var i = 0; i < order.length; i++) {\n        result[i] = WebColors[order[i] % WebColors.length];\n    }\n    return result;\n};\n//# sourceMappingURL=WebColors.js.map","/**\n * @requires Color\n *\n * @date 2020-10-27\n **/\nimport { shuffleWebColors } from \"./WebColors\";\nconst ORDER_CONTRAST = [8, 0, 6, 4, 1, 9, 2, 10, 3, 7, 5];\nexport const WebColorsContrast = shuffleWebColors(ORDER_CONTRAST);\n//# sourceMappingURL=WebColorsContrast.js.map","/**\n * @author   Ikaros Kappler\n * @version  1.0.0\n * @date     2018-11-11\n **/\nimport { Color } from \"./datastructures/Color\";\n/**\n * A mix of green shades.\n *\n * @requires Color\n */\nexport const WebColorsMalachite = [\n    Color.makeRGB(0, 21, 6),\n    Color.makeRGB(0, 30, 12),\n    Color.makeRGB(0, 52, 28),\n    Color.makeRGB(0, 81, 47),\n    Color.makeRGB(21, 134, 88),\n    Color.makeRGB(0, 46, 19),\n    Color.makeRGB(0, 68, 40),\n    Color.makeRGB(11, 81, 55),\n    Color.makeRGB(0, 91, 46),\n    Color.makeRGB(0, 111, 46),\n    Color.makeRGB(33, 140, 106)\n];\n//# sourceMappingURL=WebColorsMalachite.js.map","/**\n * @author Extended, bugfixed and ported to TypeScript by Ikaros Kappler.\n * @modified 2018-xx-xx Added a clone() function.\n * @modified 2018-xx-xx Allowing leading '#' in the makeHEX() function.\n * @modified 2018-11-28 Fixed the checkHEX() function to accept 000000.\n * @modified 2019-11-18 Added a generic parse(string) function that detects the format.\n * @modified 2020-01-09 Fixed a bug in the parse(string) function. Hex colors with only three elements were considered faulty.\n * @modified 2020-10-23 Ported to Typescript.\n * @modified 2021-02-08 Fixed a lot of es2015 compatibility issues.\n * @modified 2021-02-08 Added basic tsdoc/jsdoc comments.\n * @version 0.0.9\n **/\n/**\n * @classdesc A color class, inspired by neolitec's Javascript class.\n *    Original found at\n *      https://gist.github.com/neolitec/1344610\n *    Thanks to neolitec\n */\nexport class Color {\n    /**\n     * Construct a new color with `r=0 g=0 b=0`.\n     *\n     * Consider using the `makeHex`, `makeRGB` or `makeHSL` functions.\n     *\n     * @constructor\n     * @instance\n     * @memberof Color\n     */\n    constructor() {\n        this.r = this.g = this.b = 0;\n        this.h = this.s = this.l = 0;\n        this.a = 1;\n    }\n    ;\n    // --- RGB ---------------------------------- \n    /**\n     * Get this color as a CSS `rgb` string.\n     *\n     * Consult this for details: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\n     *\n     * @method cssRGB\n     * @instance\n     * @memberof Color\n     * @return {string} This color as a CSS rgb string.\n     */\n    cssRGB() {\n        return \"rgb(\" + Math.round(255 * this.r) + \",\" + Math.round(255 * this.g) + \",\" + Math.round(255 * this.b) + \")\";\n    }\n    ;\n    /**\n     * Get this color as a CSS `rgba` string.\n     *\n     * Consult this for details: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\n     *\n     * @method cssRGBA\n     * @instance\n     * @memberof Color\n     * @return {string} This color as a CSS rgba string.\n     */\n    cssRGBA() {\n        return \"rgba(\" + Math.round(255 * this.r) + \",\" + Math.round(255 * this.g) + \",\" + Math.round(255 * this.b) + \",\" + this.a + \")\";\n    }\n    ;\n    /**\n     * Get the red component of this RGB(A)color. This method just returns the `r` color attribute.\n     *\n     * @method red\n     * @instance\n     * @memberof Color\n     * @return {number} A value between 0.0 and 1.0.\n     */\n    red() { return this.r; }\n    ;\n    /**\n    * Get the green component of this RGB(A) color. This method just returns the `g` color attribute.\n    *\n    * @method green\n    * @instance\n    * @memberof Color\n    * @return {number} A value between 0.0 and 1.0.\n    */\n    green() { return this.g; }\n    ;\n    /**\n     * Get the blue component of this RGB(A) color. This method just returns the `b` color attribute.\n     *\n     * @method blue\n     * @instance\n     * @memberof Color\n     * @return {number} A value between 0.0 and 1.0.\n     */\n    blue() { return this.b; }\n    ;\n    // --- HSL ---------------------------------- \n    /**\n     * Get this color as a CSS `hsl` string.\n     *\n     * @method cssHSL\n     * @instance\n     * @memberof Color\n     * @return {string} This color as a CSS hsl string.\n     */\n    cssHSL() {\n        return \"hsl(\" + Math.round(360 * this.h) + \",\" + Math.round(100 * this.s) + \"%,\" + Math.round(100 * this.l) + \"%)\";\n    }\n    ;\n    /**\n     * Get this color as a CSS `hsla` string.\n     *\n     * @method cssHSLA\n     * @instance\n     * @memberof Color\n     * @return {string} This color as a CSS hsla string.\n     */\n    cssHSLA() {\n        return \"hsla(\" + Math.round(360 * this.h) + \",\" + Math.round(100 * this.s) + \"%,\" + Math.round(100 * this.l) + \"%,\" + Math.round(this.a) + \")\";\n    }\n    ;\n    /**\n     * Get the hue component of this HSL(A) color. This method just returns the `h` color attribute.\n     *\n     * @method hue\n     * @instance\n     * @memberof Color\n     * @return {number} A value between 0.0 and 1.0.\n     */\n    hue() { return this.h; }\n    ;\n    /**\n     * Get the saturation component of this HSL(A) color. This method just returns the `s` color attribute.\n     *\n     * @method saturation\n     * @instance\n     * @memberof Color\n     * @return {number} A value between 0.0 and 1.0.\n     */\n    saturation() { return this.s; }\n    ;\n    /**\n     * Get the lightness component of this HSL(A) color. This method just returns the `l` color attribute.\n     *\n     * @method lightness\n     * @instance\n     * @memberof Color\n     * @return {number} A value between 0.0 and 1.0.\n     */\n    lightness() { return this.l; }\n    ;\n    // --- HEX ----------------------------------\n    /**\n     * Get this color as a CSS-HEX string (non-alpha): #rrggbb\n     *\n     * @method cssHEX\n     * @instance\n     * @memberof Color\n     * @return {string} This color as a CSS-HEX string.\n     */\n    cssHEX() {\n        return \"#\" +\n            (255 * this.r < 16 ? \"0\" : \"\") + Math.round(255 * this.r).toString(16) +\n            (255 * this.g < 16 ? \"0\" : \"\") + Math.round(255 * this.g).toString(16) +\n            (255 * this.b < 16 ? \"0\" : \"\") + Math.round(255 * this.b).toString(16);\n    }\n    ;\n    // --- Transparency ---------------------------------- \n    /**\n     * Get the alpha channel (transparency) of this color.\n     *\n     * @method alpha\n     * @instance\n     * @memberof Color\n     * @return {number} A value between 0.0 and 1.0.\n     */\n    alpha() { return this.a; }\n    ;\n    // --- Modifiers ---------------------------------- \n    saturate(v) {\n        if (\"string\" == typeof v && v.indexOf(\"%\") > -1 && (v = parseInt(v)) != NaN)\n            this.s += v / 100;\n        else if (\"number\" == typeof v) // range 255 \n            this.s += v / 255;\n        else\n            throw new Error(\"error: bad modifier format (percent or number)\");\n        if (this.s > 1)\n            this.s = 1;\n        else if (this.s < 0)\n            this.s = 0;\n        Color.Converter.HSLToRGB(this);\n    }\n    ;\n    desaturate(v) {\n        this.saturate(\"-\" + v);\n    }\n    ;\n    lighten(v) {\n        if (\"string\" == typeof v && v.indexOf(\"%\") > -1 && (v = parseInt(v)) != NaN)\n            this.l += v / 100;\n        else if (\"number\" == typeof v) // range 255 \n            this.l += v / 255;\n        else\n            throw new Error(\"error: bad modifier format (percent or number)\");\n        if (this.l > 1)\n            this.l = 1;\n        else if (this.l < 0)\n            this.l = 0;\n        Color.Converter.HSLToRGB(this);\n    }\n    ;\n    darken(v) {\n        this.lighten(\"-\" + v);\n    }\n    ;\n    fadein(v) {\n        if (\"string\" == typeof v && v.indexOf(\"%\") > -1 && (v = parseInt(v)) != NaN)\n            this.a += v / 100;\n        else if (\"number\" == typeof v) // range 255 \n            this.a += v / 255;\n        else\n            throw new Error(\"error: bad modifier format (percent or number)\");\n        if (this.a > 1)\n            this.a = 1;\n        else if (this.a < 0)\n            this.a = 0;\n        Color.Converter.HSLToRGB(this);\n    }\n    ;\n    fadeout(v) {\n        this.fadein(\"-\" + v);\n    }\n    ;\n    spin(v) {\n        if (\"string\" == typeof v && v.indexOf(\"%\") > -1 && (v = parseInt(v)) != NaN)\n            this.h += v / 100;\n        else if (\"number\" == typeof v) // range 360 \n            this.h += v / 360;\n        else\n            throw new Error(\"error: bad modifier format (percent or number)\");\n        if (this.h > 1)\n            this.h = 1;\n        else if (this.h < 0)\n            this.h = 0;\n        Color.Converter.HSLToRGB(this);\n    }\n    ;\n    static makeRGB(...args) {\n        const c = new Color();\n        let sanitized;\n        if (arguments.length < 3 || arguments.length > 4)\n            throw new Error(\"error: 3 or 4 arguments\");\n        sanitized = Color.Sanitizer.RGB(arguments[0], arguments[1], arguments[2]);\n        c.r = sanitized[0];\n        c.g = sanitized[1];\n        c.b = sanitized[2];\n        if (arguments.length == 4)\n            c.a = arguments[3];\n        Color.Converter.RGBToHSL(c);\n        return c;\n    }\n    ;\n    static makeHSL(...args) {\n        const c = new Color();\n        let sanitized;\n        if (arguments.length < 3 || arguments.length > 4)\n            throw new Error(\"error: 3 or 4 arguments\");\n        sanitized = Color.Sanitizer.HSL(arguments[0], arguments[1], arguments[2]);\n        c.h = sanitized[0];\n        c.s = sanitized[1];\n        c.l = sanitized[2];\n        if (arguments.length == 4)\n            c.a = arguments[3];\n        Color.Converter.HSLToRGB(c);\n        return c;\n    }\n    ;\n    static makeHEX(value) {\n        var c = new Color(), sanitized;\n        // Edit Ika 2018-0308\n        // Allow leading '#'\n        if (value && value.startsWith('#'))\n            value = value.substr(1);\n        Color.Validator.checkHEX(value);\n        if (value.length == 3) {\n            sanitized = Color.Sanitizer.RGB(parseInt(value.substr(0, 1) + value.substr(0, 1), 16), parseInt(value.substr(1, 1) + value.substr(1, 1), 16), parseInt(value.substr(2, 1) + value.substr(2, 1), 16));\n        }\n        else if (value.length == 6) {\n            sanitized = Color.Sanitizer.RGB(parseInt(value.substr(0, 2), 16), parseInt(value.substr(2, 2), 16), parseInt(value.substr(4, 2), 16));\n        }\n        else\n            throw new Error(\"error: 3 or 6 arguments\");\n        c.r = sanitized[0];\n        c.g = sanitized[1];\n        c.b = sanitized[2];\n        Color.Converter.RGBToHSL(c);\n        return c;\n    }\n    ;\n    /**\n     * Parse the given color string. Currently only these formate are recognized: hex, rgb, rgba.\n     *\n     * @method parse\n     * @static\n     * @memberof Color\n     * @param {string} str - The string representation to parse.\n     * @return {Color} The color instance that's represented by the given string.\n     */\n    static parse(str) {\n        if (typeof str == 'undefined')\n            return null;\n        if ((str = str.trim().toLowerCase()).length == 0)\n            return null;\n        if (str.startsWith('#'))\n            return Color.makeHEX(str.substring(1, str.length));\n        if (str.startsWith('rgb')) {\n            var parts = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(0\\.\\d+))?\\)$/.exec(str);\n            // [ str, r, g, b, a|undefined ]\n            if (typeof parts[4] == 'undefined')\n                return Color.makeRGB(parts[1], parts[2], parts[3]);\n            else\n                return Color.makeRGB(parts[1], parts[2], parts[3], parts[4]);\n        }\n        else\n            throw \"Unrecognized color format: \" + str;\n    }\n    ;\n    /**\n     * Create a clone of this color (RGB).\n     *\n     * @method clone\n     * @instance\n     * @memberof Color\n     * @return {Color} A clone of this color (in RGB mode).\n     */\n    clone() {\n        return Color.makeRGB(this.r, this.g, this.b, this.a);\n    }\n    ;\n    /**\n     * Interpolate this color on the RGB scale.\n     *\n     * @method interpolate\n     * @instance\n     * @memberof Color\n     * @param {Color} c - The color to interpolate to.\n     * @param {number} t - An interpolation value between 0.0 and 1.0.\n     * @return {Color} A clone of this color (in RGB mode).\n     */\n    interpolate(c, t) {\n        this.r += (c.r - c.r) * t;\n        this.g += (c.g - c.g) * t;\n        this.b += (c.b - c.b) * t;\n        this.a += (c.a - c.a) * t;\n        return this;\n    }\n    ;\n}\nColor.Sanitizer = {\n    RGB: function (...args) {\n        var o = [];\n        if (arguments.length == 0) {\n            return [];\n        }\n        // const allAreFrac = Color.testFrac( arguments );\n        for (var i = 0; i < arguments.length; i++) {\n            var c = arguments[i];\n            if (\"string\" == typeof c && c.indexOf(\"%\") > -1) {\n                if ((c = parseInt(c)) == NaN)\n                    throw new Error(\"Bad format\");\n                if (c < 0 || c > 100)\n                    throw new Error(\"Bad format\");\n                o[i] = c / 100;\n            }\n            else {\n                // console.log( 'allAreFrac', allAreFrac, arguments );\n                if (\"string\" == typeof c && (c = parseInt(c)) == NaN)\n                    throw new Error(\"Bad format\");\n                if (c < 0)\n                    throw new Error(\"Bad format\");\n                //else if( allAreFrac ) o[i] = c; // c >= 0 && c <= 1 (all)\n                else if (c >= 0 && c < 1)\n                    o[i] = c;\n                // else if(c >= 0.0 && c <= 1.0) o[i] = c;\n                else if (c >= 1 && c < 256)\n                    o[i] = c / 255; // ???\n                // else if(c >= 0 && c < 256) o[i] = c/255;\n                else\n                    throw new Error(\"Bad format (\" + c + \")\");\n            }\n        }\n        return o;\n    },\n    HSL: function (...args) {\n        if (arguments.length < 3 || arguments.length > 4)\n            throw new Error(\"3 or 4 arguments required\");\n        var h = arguments[0], s = arguments[1], l = arguments[2];\n        if (\"string\" == typeof h && (h = parseFloat(h)) == NaN)\n            throw new Error(\"Bad format for hue\");\n        if (h < 0 || h > 360)\n            throw new Error(\"Hue out of range (0..360)\");\n        else if (((\"\" + h).indexOf(\".\") > -1 && h > 1) || (\"\" + h).indexOf(\".\") == -1)\n            h /= 360;\n        if (\"string\" == typeof s && s.indexOf(\"%\") > -1) {\n            if ((s = parseInt(s)) == NaN)\n                throw new Error(\"Bad format for saturation\");\n            if (s < 0 || s > 100)\n                throw new Error(\"Bad format for saturation\");\n            s /= 100;\n        }\n        else if (s < 0 || s > 1)\n            throw new Error(\"Bad format for saturation\");\n        if (\"string\" == typeof l && l.indexOf(\"%\") > -1) {\n            if ((l = parseInt(l)) == NaN)\n                throw new Error(\"Bad format for lightness\");\n            if (l < 0 || l > 100)\n                throw new Error(\"Bad format for lightness\");\n            l /= 100;\n        }\n        else if (l < 0 || l > 1)\n            throw new Error(\"Bad format for lightness\");\n        return [h, s, l];\n    }\n}; // ENd sanitizer\nColor.Validator = {\n    /**\n     * Check a hexa color (without #)\n     */\n    checkHEX: (value) => {\n        if (value.length != 6 && value.length != 3)\n            throw new Error(\"Hexa color: bad length (\" + value.length + \"),\" + value);\n        value = value.toLowerCase();\n        //for( var i in value ) {\n        for (var i = 0; i < value.length; i++) {\n            var c = value.charCodeAt(i);\n            if (!((c >= 48 && c <= 57) || (c >= 97 && c <= 102)))\n                throw new Error(`Hexa color: out of range for \"${value}\" at position ${i}.`);\n        }\n    }\n};\nColor.Converter = {\n    /**\n     * Calculates HSL Color.\n     * RGB must be normalized.\n     * http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n     */\n    RGBToHSL: (color) => {\n        var r = color.r;\n        var g = color.g;\n        var b = color.b;\n        var max = Math.max(r, g, b);\n        var min = Math.min(r, g, b);\n        color.l = (max + min) / 2;\n        if (max == min) {\n            color.h = color.s = 0; // achromatic\n        }\n        else {\n            var d = max - min;\n            color.s = color.l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            switch (max) {\n                case r:\n                    color.h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    color.h = (b - r) / d + 2;\n                    break;\n                case b:\n                    color.h = (r - g) / d + 4;\n                    break;\n            }\n            color.h /= 6;\n        }\n    },\n    /**\n     * Calculates RGB color (nomalized).\n     * HSL must be normalized.\n     *\n     * http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n     */\n    HSLToRGB: (color) => {\n        var h = color.h;\n        var s = color.s;\n        var l = color.l;\n        if (s == 0) {\n            color.r = color.g = color.b = l; // achromatic\n        }\n        else {\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            var p = 2 * l - q;\n            color.r = Color.Converter.hue2rgb(p, q, h + 1 / 3);\n            color.g = Color.Converter.hue2rgb(p, q, h);\n            color.b = Color.Converter.hue2rgb(p, q, h - 1 / 3);\n        }\n    },\n    hue2rgb: (p, q, t) => {\n        if (t < 0)\n            t += 1;\n        if (t > 1)\n            t -= 1;\n        if (t < 1 / 6)\n            return p + (q - p) * 6 * t;\n        if (t < 1 / 2)\n            return q;\n        if (t < 2 / 3)\n            return p + (q - p) * (2 / 3 - t) * 6;\n        return p;\n    }\n};\n; // END class\n//# sourceMappingURL=Color.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkngdg\"] = self[\"webpackChunkngdg\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [736], () => (__webpack_require__(333)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","Object","defineProperty","exports","value","BumpMapper","THREE","computeVertexNormals_1","GeometryGenerationHelpers_1","applyBumpmap","dildoGeometry","bufferedGeometry","bumpmap","material","options","collectedVertexNormals","computeVertexNormals","dildoNormalGeometry","Geometry","vertices","map","normalLine","endPoint","end","clone","GeometryGenerationHelpers","normalizeVectorXYZ","start","bumpmapStrength","dildoNormalsMesh","Points","PointsMaterial","size","color","dildoMesh","console","log","useBumpmap","y","vertexMatrix","length","x","vertIndex","vertex","yRatio","xRatio","lerpFactor","getHeightAt","lerpTarget","lerp","BufferGeometry","fromGeometry","Mesh","DildoGeneration","VertexNormalsHelper_1","DildoGeometry_1","DildoMaterials_1","mergeGeometries_1","PathFinder_1","randomWebColor_1","constants_1","BumpMapper_1","canvasId","this","canvas","document","getElementById","parent","parentElement","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","ambientLightA","AmbientLight","set","multiplyScalar","lightDistanceFactor","add","ambientLightB","PointLight","intensityFactor","directionalLightA","DirectionalLight","target","directionalLightB","renderer","WebGLRenderer","preserveDrawingBuffer","antialias","controls","makeOrbitControls","domElement","update","geometries","partialResults","_self","addEventListener","resizeCanvas","animate","requestAnimationFrame","render","prototype","width","documentElement","clientWidth","body","height","clientHeight","style","setAttribute","setSize","setViewOffset","rebuild","removeCachedGeometries","baseRadius","outline","getBounds","baseShape","mkCircularPolygon","shapeSegmentCount","baseShapeExcentricity","DildoGeometry","assign","useTextureImage","textureImagePath","doubleSingleSide","renderFaces","DoubleSide","BackSide","FrontSide","wireframe","DildoMaterials","createMainMaterial","lookAt","Vector3","spineGeometry","spineVertices","forEach","spineVert","push","addSpine","showBasicPerpendiculars","addPerpendicularPaths","_a","bumpmappedDildoMesh","showBumpmapTargets","addMesh","performSlice","__performPlaneSlice","userData","showNormals","vnHelper","VertexNormalsHelper","normalsLength","latheMesh","latheUnbufferedGeometry","leftPlane","Plane","leftSliceGeometry","makeSlice","rightPlane","rightSliceGeometry","sliceMaterial","createSliceMaterial","planeGeom","PlaneGeometry","planeMesh","MeshBasicMaterial","transparent","opacity","side","rotation","Math","PI","KEY_SPLIT_PANE_MESH","showSplitPane","planeIntersectionPoints","makeAndAddPlaneIntersection","connectedPaths","PathFinder","findAllPathsOnMesh","p","geometry","geometryVertexIndex","linesMesh_1","Line","LineBasicMaterial","randomWebColor","i","addPrecalculatedShapeOutlines","pointGeometry","linesMesh","triangulatedGeometries","triangulationGeometry","makePlaneTriangulation","closeCutAreas","mergeGeometries","EPS","showLeftSplit","uvsNeedUpdate","buffersNeedUpdate","slicedMeshLeft","showRightSplit","slicedMeshRight","KEY_LEFT_SLICE_PLANE","KEY_LEFT_SLICE_GEOMETRY","KEY_RIGHT_SLICE_PLANE","KEY_RIGHT_SLICE_GEOMETRY","KEY_PLANE_INTERSECTION_POINTS","KEY_SPLIT_TRIANGULATION_GEOMETRIES","mesh","old","remove","dispose","generateSTL","exporter","stlBuffer","stlData","parse","onComplete","join","warn","extendStatics","__extends","d","b","setPrototypeOf","__proto__","Array","hasOwnProperty","call","TypeError","String","__","constructor","create","DildoBaseClass","plotboilerplate_1","earcut_typescript_1","UVHelpers_1","DEG_TO_RAD","faces","faceVertexUvs","_super","_this","topIndex","bottomIndex","outerPerpLines","innerPerpLines","flatSidePolygon","leftFlatIndices","rightFlatIndices","leftFlatTriangleIndices","rightFlatTriangleIndices","flatSideBounds","hollowBottomEdgeVertIndices","hollowBottomTriagles","dildoNormals","_buildVertices","_buildFaces","_buildUVMapping","bumpmapTexture","__applyBumpmap","__buildSlice","outlineBounds","outlineVert","sliceIndex","heightT","isBending","bendAngle","arcRadius","shapeTwistAngle","outlineXPct","max","shapeVert","vert","rotateVertY","_bendVertex","__buildSpine","shapeCenter","__buildPerps","perpendicularVert","normalizePerpendiculars","halfIndices","floor","j","perpDifference","endVert","rotateVert","outerPerpVert","normalizeVectorXY","Line3","__makeFlatSideVertices","shapeRadius","Polygon","getPerpendicularPathVertices","nextIndex","__makeFlatSideFaces","polygonVertices","flatSideIndex","polygonData","flattenVert2dArray","triangleIndices","earcut","a","c","makeFace3","includeBottomVert","getInner","getPerpendicularHullLines","perpLines","_getTopVertex","topPoint","min","_getBottomVertex","axis","angle","applyAxisAngle","applyBumpMap","bumpMapTexture","outlineSegmentCount","closeTop","Boolean","closeBottom","makeHollow","baseShapeSegmentCount","s","addFace4ByIndices","__makeBackFrontFaces","_buildHollowBottomFaces","_buildEndFaces","edgeVertices","edgeVertIndex","findClosestEdgeIndex","tmpDist","index","distance","Number","MAX_VALUE","tmpIndex","distanceTo","n","lastIndex","curIndex","Face3","endVertexIndex","shapeIndex","inverseFaceDirection","makeFace4","addCylindricUV4","leftA","leftB","leftC","UVHelpers","makeFlatTriangleUVs","rightA","rightB","rightC","ratioI","ratioJ","Vector2","makeHollowBottomUVs","addPyramidalBaseUV3","bendAngleRad","hollowStrengthX","twistAngle","shapeHeight","shapeBounds","getCenter","isNaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","abs","t","getPointAt","getPerpendicularAt","outlineT","topVertex","bottomVertex","xCenter","yCenter","zCenter","thisGeometry","containingPolygonIndices","triangles","polygonBounds","Bounds","computeFromVertices","Vertex","getUVRatios","vertA","vertB","vertC","textureStore","Map","MeshLambertMaterial","depthTest","visible","emissive","reflectivity","refractionRatio","loadTextureImage","MeshPhongMaterial","flatShading","vertexColors","path","texture","get","TextureLoader","load","threejs_slice_geometry_typescript_1","PlaneMeshIntersection_1","clearDuplicateVertices3_1","vertIndexA","vertIndexB","vertIndexC","vertIndexD","ratioA","ratioB","vertices2d","coordinates","radius","pointCount","excentricity","phi","cos","sin","unbufferedGeometry","plane","slicedGeometry","sliceGeometry","mergeVertices","computeFaceNormals","thisGenerator","planeGeometry","planeGeometryReal","intersectionPoints","PlaneMeshIntersection","getIntersectionPoints","uniqueIntersectionPoints","clearDuplicateVertices3","pointsMaterial","pointsMesh","showSplitShape","triangleGeometry","addRawIntersectionTriangleMesh","triangleMesh","addPrecalculatedMassiveFaces","makeAndAddMassivePlaneIntersection","addPrecalculatedHollowFaces","makeAndAddHollowPlaneIntersection","innerPoint","outerPoint","spineMesh","LineSegments","unbufferedDildoGeometry","addPerpendicularPath","materialColor","outerPerpGeometry","perpLine","outerPerpMesh","generator","connectedPath","currentPathXYData","reduce","earcutInput","trianglesGeometry","vector3","trianglesMesh","KEY_PLANE_INTERSECTION_TRIANGULATION","showSplitShapeTriangulation","base","extend","normalLength","diff","ratio","sqrt","removeAllChildNodes","rootNode","lastChild","removeChild","clamp","imageMap","ImageStore","getImage","image","createElement","onload","isImageLoaded","complete","naturalHeight","undefined","epsilon","visitedVertices","Set","unvisitedVertIndices","numVisitedVertices","pathVertices","collectedPaths","clear","pathVertIndices","mapVerticesToGeometryIndices","_pathVert","nextUnvisitedIndex","values","next","findUnvisitedPaths","combineAdjacentPaths","unvisitedIndex","adjacentVertIndex","delete","findAdjacentFace","faceCount","f","faceHasVertIndex","pathVertIndex","isVisited","has","resultPaths","unvisitedPathIndexSet","_path","currentPathIndex","currentPath","nextPath","findAdjacentPath","reverse","concat","faceIndex","face","pathVert","foundIndex","foundDist","curDist","currentVertIndex","pointsOfIntersection","mathPlane","localToWorld","planePointA","copy","planePointB","planePointC","setFromCoplanarPoints","lineAB","lineBC","lineCA","__setPointOfIntersection","line","intersectionPoint","intersectLine","pointOfIntersection","result","containsElementFrom","fromIndex","eps","vertexNormals","getAttribute","collectedFaceNormals","faceNormalA","array","faceNormalB","faceNormalC","addVertexNormal","normals","averageNormal","computeAverageVector","buffer","vertexNormal","vectors","avg","nrml","divideScalar","DEFAULT_BEZIER_JSON","globalThis","ngdg","locateVertexInArray","vertArray","closestDist","closestIndex","dist","mergeAndMapVertices","locateVertexInArray_1","baseGeometry","mergeGeometry","vertexMap","uvData","v","mergeVert","indexInBase","defaults_1","ImageStore_1","DildoGeneration_1","WebColorsMalachite_1","WebColorsContrast_1","WebColors_1","colorSet","maxLen","WebColorsMalachite","WebColorsContrast","WebColors","round","random","cssRGB","UIDGenerator","static","current","VertexAttr","key","draggable","selectable","isSelected","model","VertexListeners","click","drag","dragStart","dragEnd","addClickListener","listener","_addListener","removeClickListener","_removeListener","addDragListener","removeDragListener","addDragStartListener","removeDragStartListener","addDragEndListener","removeDragEndListener","fireClickEvent","e","_fireEvent","fireDragEvent","fireDragStartEvent","fireDragEndEvent","listeners","ve","params","newListener","oldListener","splice","className","uid","tuple","NaN","attr","setX","setY","invX","invY","addXY","amountX","amountY","addX","addY","sub","equals","eqX","EPSILON","eqY","pow","origin","atan2","difference","scale","factor","center","rotate","len","ZERO","scalar","inv","toString","toSVGString","viewPort","utils","buildArrowHead","zA","zB","headlen","scaleX","scaleY","isOpen","addVertex","getVertexAt","move","containsVert","inside","xi","yi","xj","yj","area","signedArea","isClockwise","toQuadraticBezierData","qbezier","cc0","cc1","edgeCenter","limit","toQuadraticBezierSVGString","qdata","toCubicBezierData","threshold","cbezier","aCenter","bCenter","a2","b0","toCubicBezierSVGString","toCubicBezierPath","pathdata","BezierPath","fromArray","total","l","sum","toPolygon","xMin","xMax","yMin","yMax","VertTuple","factory","setLength","amount","normalize","moveTo","newA","v0","v1","vertAt","denominator","colinear","getClosestT","l2","vtutils","dist2","hasPoint","point","insideBoundsOnly","getClosestPoint","pointDistance","w","Vector","super","perp","inverse","tmp","intersection","numerator1","numerator2","CubicBezierCurve","startPoint","startControlPoint","endControlPoint","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","curveIntervals","segmentCache","segmentLengths","arcLength","updateArcLengths","moveCurvePoint","pointID","moveAmount","moveControlPoint","getStartPoint","getStartControlPoint","getEndControlPoint","getEndPoint","translate","getLength","pointA","pointB","curveStep","newLength","tmpLength","tPrev","tNext","iteration","locateIntervalByDistance","tStart","tEnd","stepCount","minIndex","minDist","tDiff","getPointByID","id","Error","getPoint","u","getTangentAt","t2","nt2","tX","tY","getSubCurveAt","startVec","endVec","convertU2T","getTangent","getPerpendicular","tangentVector","curve","obj","toSVGPathData","toJSON","prettyFormat","jsonString","JSON","fromObject","arr","isArray","pathPoints","totalArcLength","adjustCircular","bezierCurves","addCurve","adjustSuccessorControlPoint","locateCurveByStartPoint","locateCurveByEndPoint","locateCurveByStartControlPoint","locateCurveByEndControlPoint","getCurveCount","getCurveAt","curveIndex","anchor","scaling","curveT","uMin","uTemp","relativeU","uResult","_locateUIndex","bCurve","uPart","uBefore","getSubPathAt","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","curves","adjustPredecessorControlPoint","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","_mainCurve","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","_updateArcLengths","mainHandleBounds","neighbourHandleBounds","mainHandleLength","neighbourHandleLength","bPath","lastCurve","isInstance","toReducedListRepresentation","digits","toFixed","listJSON","pointArray","fromReducedList","bezierPath","Circle","containsCircle","circle","lineDistance","circleUtils","tangentAt","circleIntersection","p0","p1","h","p2","x3","y3","x4","y4","CircleSector","startAngle","endAngle","data","circleSectorUtils","describeSVGArc","polarToCartesian","centerX","centerY","moveToStart","firstHalf","secondHalf","largeArcFlag","sweepFlag","pathData","drawutilssvg","svgNode","offset","canvasSize","fillShapes","drawConfig","isSecondary","gNode","bufferGNode","drawlibConfiguration","cache","addStyleDefs","createSVGNode","appendChild","nodeStyle","keys","rules","k","drawSettings","lineWidth","innerHTML","addCustomStyleDefs","defs","findElement","nodeName","node","toUpperCase","createElementNS","makeNode","curId","blendMode","_bindFillDraw","curClassName","parentNode","copyInstance","setConfiguration","configuration","setCurrentId","setCurrentClassName","beginDrawCycle","renderTime","childNodes","child","endDrawCycle","replaceChild","_x","_y","arrow","setImageSize","naturalWidth","ratioX","ratioY","event","src","cubicBezier","cubicBezierPath","handle","square","handleLine","dot","circleArc","arcData","ellipse","radiusX","radiusY","rect","grid","sizeX","sizeY","ceil","raster","diamondHandle","squareHandle","circleHandle","crosshair","polygon","polyline","text","label","inplace","copyPathData","transformPathData","_stx","_sty","_sx","_sy","lastPoint","_slp","HEAD_XML","drawutils","context","ctx","globalCompositeOperation","save","beginPath","lineTo","strokeStyle","stroke","restore","_fillOrDraw","drawImage","closePath","fillStyle","fill","bezierCurveTo","quadraticBezier","controlPoint","quadraticCurveTo","arc","asSegment","setLineDash","fillText","strokeText","Path2D","clearRect","fillRect","drawutilsgl","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","_x2rel","_y2rel","Float32Array","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","viewport","uRotationVector","getUniformLocation","uniform2fv","drawArrays","LINES","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","verts","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","Triangle","calcCircumcircle","getArea","getCentroid","scaleToCentroid","centroid","getCircumcircle","isAdjacent","tri","getThirdVertex","vert1","vert2","A","B","C","D","E","F","G","dx","dy","bounds","cx","cy","radius_squared","inCircumcircle","min3","max3","determinant","containsPoint","pointIsInTriangle","getIncircularTriangle","lineA","lineB","lineC","bisector1","geomutils","nsectAngle","bisector2","circleIntersA","circleIntersB","circleIntersC","getIncircle","getIncenter","p0x","p0y","p1x","p1y","p2x","p2y","px","py","pA","pB","pC","triangle","lineAC","insideAngle","clockwise","scaleFactor","wrapMax","wrapMinMax","Grid","baseLog","num","mapRasterScale","adjustFactor","gf","KeyHandler","downListeners","pressListeners","upListeners","keyStates","element","trackAllKeys","trackAll","installListeners","fireEvent","hasListener","lis","keyCode","fireDownEvent","handler","firePressEvent","fireUpEvent","KEY_CODES","_keyDownListener","_keyPressListener","_keyUpListener","releaseListeners","removeEventListener","down","key2code","press","up","isDown","XMouseEvent","MouseEvent","XWheelEvent","WheelEvent","MouseHandler","name","mouseDownPos","mouseDragPos","mouseButton","installed","handlers","mousemove","mkParams","relPos","mouseup","button","mousedown","wheel","offsetX","offsetY","eventName","rel","xEvent","isTouchEvent","pos","leftButton","middleButton","rightButton","draggedFrom","wasDragged","dragAmount","listenFor","unlistenFor","callback","throwAlreadyInstalled","destroy","PBImage","upperLeft","lowerRight","VEllipse","radiusH","signedRadiusH","radiusV","signedRadiusV","normalAt","foci","getFoci","angleA","centerAngle","endPointA","endPointB","normal","perimeter","rh","rv","sdiff","getEquidistantVertices","angles","equidistantVertAngles","toCubicBezier","quarterSegmentCount","segmentCount","curAngle","nextAngle","startTangent","endTangent","startDiff","endDiff","phiToTheta","tanPhi","tan","tanPhi2","atan","theta","VEllipseSector","ellipseSectorUtils","normalizeAngle","r2d","fullEllipsePointCount","ellipseAngles","filter","startIndex","findClosestToStartAngle","ea","endpointToCenterParameters","x1","y1","rx","ry","fa","fs","x2","y2","sinphi","cosphi","prx","pry","L","sign","M","_cx","_cy","PlotBoilerplate","config","bezierAutoAdjust","fetch","fullSize","val","fitToParent","bool","rasterGrid","rasterScaleX","rasterScaleY","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","autoDetectRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableGL","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","bezier","pathVertex","controlVertex","ellipseSector","circleSector","selectedVertex","vector","canvasElement","querySelector","tagName","toLowerCase","eventCatcher","getContext","draw","left","top","cursor","selectPolygon","draggedElements","drawables","_saveFile","installInputListeners","updateCSSscale","redraw","focus","pb","tosvgDraw","tosvgFill","drawAll","svgCode","XMLSerializer","serializeToString","blob","Blob","type","_saveAs","pixelRatio","devicePixelRatio","fitToView","canvasCenter","canvasRatio","setOffset","newUniformZoom","setZoom","setConsole","con","setCSSscale","drawable","enableBezierPathAutoAdjust","removeWithVertices","removeVertex","removeAll","keepVertices","getVertexNear","pixelPosition","pixelTolerance","locatePointNear","transformMousePosition","typeName","vindex","gScale","gSize","cs","_handleColor","drawDrawables","drawDrawable","error","drawSelectPolygon","clearSelection","getFProp","elem","propName","parseFloat","getComputedStyle","getPropertyValue","getAvailableContainerSpace","container","display","padding","border","pl","pr","pt","bl","br","bt","bb","_setSize","HTMLCanvasElement","SVGElement","adjustOffset","space","selectVerticesInPolygon","tolerance","Draggable","VERTEX","setVIndex","handleClick","DEFAULT_CLICK_TOLERANCE","keyHandler","paths","pindex","cindex","pid","revertMousePosition","getDraggedElementCount","mouseDownHandler","mouseDragHandler","oldDragAmount","mouseUpHandler","mouseWheelHandler","zoomStep","we","deltaY","preventDefault","newOffset","zoomFactorX","zoomFactorY","interactionPos","oldPos","newPos","newOffsetX","newOffsetY","getBoundingClientRect","touchMovePos","touchDownPos","draggedElement","multiTouchStartScale","clearTouch","afProps","touchStart","evt","touches","clientX","clientY","DEFAULT_TOUCH_TOLERANCE","draggingVertex","fakeEvent","touchMove","stopPropagation","trans","deltaX","touchEnd","touchCancel","multipointStart","multipointEnd","pinch","fingerA","item","fingerB","zoom","createGUI","props","isVertex","safeMergeByKeys","extension","typ","transform","fallback","SVGBuilder","build","nl","indent","Red","Pink","Purple","DeepPurple","Indigo","Blue","LightBlue","Cyan","Teal","Green","LightGreen","shuffleWebColors","order","Color","r","g","cssRGBA","red","green","blue","cssHSL","cssHSLA","hue","saturation","lightness","cssHEX","alpha","saturate","indexOf","parseInt","Converter","HSLToRGB","desaturate","lighten","darken","fadein","fadeout","spin","args","sanitized","arguments","Sanitizer","RGB","RGBToHSL","HSL","startsWith","substr","Validator","checkHEX","str","trim","makeHEX","substring","parts","exec","makeRGB","interpolate","o","charCodeAt","q","hue2rgb","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","m","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","every","definition","enumerable","prop","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}