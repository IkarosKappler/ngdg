{"version":3,"file":"index.esm.js","sources":["../src/esm/DildoMaterials.js"],"sourcesContent":["/**\n * A collection of materials and material making functions.\n *\n * @require THREE\n *\n * @author Ikaros Kappler\n * @date 2021-07-02\n * @modified 2021-08-04 Ported to Typescript from vanilla JS.\n * @version 1.0.1\n */\nimport * as THREE from 'three';\nexport const DildoMaterials = (() => {\n    /**\n     * Map<string,texture>\n     */\n    var textureStore = new Map();\n    const DildoMaterials = {\n        /**\n         * Create a new mesh material from the given parameters.\n         *\n         * @param {boolean} useTextureImage - Load and use the given texture (at `textureImagePath`) if set to true.\n         * @param {boolean} wireframe - Create a wireframe material if true.\n         * @param {string} textureImagePath - The texture path to use (if useTextureImage is set to true).\n         * @param {THREE.DoubleSide|THREE.FrontSide|THREE.Backside} doubleSingleSide - Wether to display one one or both face sides.\n         * @returns\n         */\n        createMainMaterial: function (useTextureImage, wireframe, textureImagePath, doubleSingleSide) {\n            return useTextureImage\n                ? new THREE.MeshLambertMaterial({\n                    color: 0xffffff,\n                    wireframe: wireframe,\n                    //   flatShading: false,\n                    depthTest: true,\n                    opacity: 1.0,\n                    // side: THREE.DoubleSide,\n                    side: doubleSingleSide,\n                    visible: true,\n                    emissive: 0x0,\n                    reflectivity: 1.0,\n                    refractionRatio: 0.89,\n                    map: loadTextureImage(textureImagePath)\n                })\n                : new THREE.MeshPhongMaterial({\n                    color: 0x3838ff,\n                    wireframe: wireframe,\n                    flatShading: false,\n                    depthTest: true,\n                    opacity: 1.0,\n                    // side: THREE.DoubleSide,\n                    side: doubleSingleSide,\n                    visible: true,\n                    emissive: 0x0,\n                    reflectivity: 1.0,\n                    refractionRatio: 0.89,\n                    map: null\n                });\n        },\n        createSliceMaterial: function (useTextureImage, wireframe, textureImagePath) {\n            if (wireframe) {\n                return new THREE.MeshBasicMaterial({ wireframe: true });\n                // return new THREE.MeshStandardMaterial({ wireframe: true });\n            }\n            else {\n                return new THREE.MeshLambertMaterial({\n                    color: useTextureImage ? 0x888888 : 0xa1848a8,\n                    wireframe: false,\n                    // flatShading: false,\n                    depthTest: true,\n                    opacity: 1.0,\n                    side: THREE.DoubleSide,\n                    // side: doubleSingleSide,\n                    visible: true,\n                    emissive: 0x0,\n                    reflectivity: 1.0,\n                    refractionRatio: 0.89,\n                    map: useTextureImage ? loadTextureImage(textureImagePath) : null,\n                    vertexColors: false\n                });\n            }\n        },\n    };\n    /**\n     * Load a texture or get it from the internal buffer if it was already loaded before.\n     *\n     * @param {string} path - The path (absolute or relative) to the texture image to load.\n     * @returns {THREE.Texture}\n     */\n    const loadTextureImage = function (path) {\n        var texture = textureStore.get(path);\n        if (!texture) {\n            var loader = new THREE.TextureLoader();\n            var texture = loader.load(path);\n            textureStore.set(path, texture);\n        }\n        return texture;\n    };\n    return DildoMaterials;\n})();\n//# sourceMappingURL=DildoMaterials.js.map"],"names":[],"mappings":"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"}