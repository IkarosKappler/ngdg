{"version":3,"file":"index.esm.js","sources":["../src/esm/clearDuplicateVertices3.js","../src/esm/defaults.js","../src/esm/DildoMaterials.js","../src/esm/UVHelpers.js"],"sourcesContent":["/**\n * @author   Ikaros Kappler\n * @date     2021-07-13\n * @modified 2021-08-04 Ported to Typescript from vainlla JS.\n * @version  1.0.1\n **/\nconst EPS = 0.000001;\n/**\n * Filter the array and clear all duplicates.\n *\n * The original array is left unchanged. The vertices in the array are not cloned.\n *\n * @param {THREE.Vector3[]} vertices\n * @param {number=EPS} epsilon\n * @return {THREE.Vector3[]}\n */\nexport const clearDuplicateVertices3 = (vertices, epsilon) => {\n    if (typeof epsilon === \"undefined\") {\n        epsilon = EPS;\n    }\n    var result = [];\n    for (var i = 0; i < vertices.length; i++) {\n        if (!containsElementFrom(vertices, vertices[i], i + 1, epsilon)) {\n            result.push(vertices[i]);\n        }\n    }\n    return result;\n};\nconst isCloseTo = (vertA, vertB, eps) => {\n    return vertA.distanceTo(vertB) < eps;\n};\nconst containsElementFrom = (vertices, vertex, fromIndex, epsilon) => {\n    for (var i = fromIndex; i < vertices.length; i++) {\n        if (isCloseTo(vertices[i], vertex, epsilon)) {\n            return true;\n        }\n    }\n    return false;\n};\n//# sourceMappingURL=clearDuplicateVertices3.js.map","// Refactored from dildo-generator\nexport const DEFAULT_BEZIER_JSON = \"[ { \\\"startPoint\\\" : [-122,77.80736634304651], \\\"endPoint\\\" : [-65.59022229786551,21.46778533702511], \\\"startControlPoint\\\": [-121.62058129515852,25.08908859418696], \\\"endControlPoint\\\" : [-79.33419353770395,48.71529293460728] }, { \\\"startPoint\\\" : [-65.59022229786551,21.46778533702511], \\\"endPoint\\\" : [-65.66917273472913,-149.23537680826058], \\\"startControlPoint\\\": [-52.448492057756646,-4.585775770903305], \\\"endControlPoint\\\" : [-86.1618869001374,-62.11613821618976] }, { \\\"startPoint\\\" : [-65.66917273472913,-149.23537680826058], \\\"endPoint\\\" : [-61.86203591980055,-243.8368165606738], \\\"startControlPoint\\\": [-53.701578771473564,-200.1123697454778], \\\"endControlPoint\\\" : [-69.80704300441666,-205.36451303641783] }, { \\\"startPoint\\\" : [-61.86203591980055,-243.8368165606738], \\\"endPoint\\\" : [-21.108966092052256,-323], \\\"startControlPoint\\\": [-54.08681426887413,-281.486963896856], \\\"endControlPoint\\\" : [-53.05779349623559,-323] } ]\";\n//# sourceMappingURL=defaults.js.map","/**\n * A collection of materials and material making functions.\n *\n * @require THREE\n *\n * @author Ikaros Kappler\n * @date 2021-07-02\n * @modified 2021-08-04 Ported to Typescript from vanilla JS.\n * @version 1.0.1\n */\nimport * as THREE from 'three';\nexport const DildoMaterials = (() => {\n    /**\n     * Map<string,texture>\n     */\n    var textureStore = new Map();\n    const DildoMaterials = {\n        /**\n         * Create a new mesh material from the given parameters.\n         *\n         * @param {boolean} useTextureImage - Load and use the given texture (at `textureImagePath`) if set to true.\n         * @param {boolean} wireframe - Create a wireframe material if true.\n         * @param {string} textureImagePath - The texture path to use (if useTextureImage is set to true).\n         * @param {THREE.DoubleSide|THREE.FrontSide|THREE.Backside} doubleSingleSide - Wether to display one one or both face sides.\n         * @returns\n         */\n        createMainMaterial: function (useTextureImage, wireframe, textureImagePath, doubleSingleSide) {\n            return useTextureImage\n                ? new THREE.MeshLambertMaterial({\n                    color: 0xffffff,\n                    wireframe: wireframe,\n                    //   flatShading: false,\n                    depthTest: true,\n                    opacity: 1.0,\n                    // side: THREE.DoubleSide,\n                    side: doubleSingleSide,\n                    visible: true,\n                    emissive: 0x0,\n                    reflectivity: 1.0,\n                    refractionRatio: 0.89,\n                    map: loadTextureImage(textureImagePath)\n                })\n                : new THREE.MeshPhongMaterial({\n                    color: 0x3838ff,\n                    wireframe: wireframe,\n                    flatShading: false,\n                    depthTest: true,\n                    opacity: 1.0,\n                    // side: THREE.DoubleSide,\n                    side: doubleSingleSide,\n                    visible: true,\n                    emissive: 0x0,\n                    reflectivity: 1.0,\n                    refractionRatio: 0.89,\n                    map: null\n                });\n        },\n        createSliceMaterial: function (useTextureImage, wireframe, textureImagePath) {\n            if (wireframe) {\n                return new THREE.MeshBasicMaterial({ wireframe: true });\n                // return new THREE.MeshStandardMaterial({ wireframe: true });\n            }\n            else {\n                return new THREE.MeshLambertMaterial({\n                    color: useTextureImage ? 0x888888 : 0xa1848a8,\n                    wireframe: false,\n                    // flatShading: false,\n                    depthTest: true,\n                    opacity: 1.0,\n                    side: THREE.DoubleSide,\n                    // side: doubleSingleSide,\n                    visible: true,\n                    emissive: 0x0,\n                    reflectivity: 1.0,\n                    refractionRatio: 0.89,\n                    map: useTextureImage ? loadTextureImage(textureImagePath) : null,\n                    vertexColors: false\n                });\n            }\n        },\n    };\n    /**\n     * Load a texture or get it from the internal buffer if it was already loaded before.\n     *\n     * @param {string} path - The path (absolute or relative) to the texture image to load.\n     * @returns {THREE.Texture}\n     */\n    const loadTextureImage = function (path) {\n        var texture = textureStore.get(path);\n        if (!texture) {\n            var loader = new THREE.TextureLoader();\n            var texture = loader.load(path);\n            textureStore.set(path, texture);\n        }\n        return texture;\n    };\n    return DildoMaterials;\n})();\n//# sourceMappingURL=DildoMaterials.js.map","/**\n * @author   Ikaros Kappler\n * @date     2021-08-03\n * @modified 2021-08-04 Ported to Typsescript from vanilla JS.\n * @version  1.0.1\n */\nimport * as THREE from \"three\";\nexport const UVHelpers = {\n    /**\n     * Helper function to create triangular UV Mappings for a triangle.\n     *\n     * @param {THREE.Geometry} thisGeometry\n     * @param {Bounds} shapeBounds\n     * @param {number} vertIndexA - The index in the geometry's vertices array.\n     * @param {number} vertIndexB - ...\n     * @param {number} vertIndexC - ...\n     */\n    makeFlatTriangleUVs: (thisGeometry, // THREE.Geometry does not longer exist since r125 and will be replaced by BufferGeometry\n    shapeBounds, vertIndexA, vertIndexB, vertIndexC) => {\n        var vertA = thisGeometry.vertices[vertIndexA];\n        var vertB = thisGeometry.vertices[vertIndexB];\n        var vertC = thisGeometry.vertices[vertIndexC];\n        // Convert a position vertex { x, y, * } to UV coordinates { u, v }\n        var getUVRatios = (vert) => {\n            // console.log((vert.x - shapeBounds.min.x) / shapeBounds.width, (vert.y - shapeBounds.min.y) / shapeBounds.height);\n            return new THREE.Vector2((vert.x - shapeBounds.min.x) / shapeBounds.width, (vert.y - shapeBounds.min.y) / shapeBounds.height);\n        };\n        thisGeometry.faceVertexUvs[0].push([getUVRatios(vertA), getUVRatios(vertB), getUVRatios(vertC)]);\n    }\n};\n//# sourceMappingURL=UVHelpers.js.map"],"names":[],"mappings":"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"}